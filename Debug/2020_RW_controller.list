
2020_RW_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800e180  0800e180  0001e180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e780  0800e780  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e780  0800e780  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e780  0800e780  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e780  0800e780  0001e780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001f8  0800e980  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800e980  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f28  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003654  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  0003c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f8ff  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000142d4  00000000  00000000  0005e97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aff12  00000000  00000000  00072c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e28  00000000  00000000  00122be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e164 	.word	0x0800e164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e164 	.word	0x0800e164

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d06:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000d08:	f001 fea0 	bl	8002a4c <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d12:	f001 f9a7 	bl	8002064 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000d22:	f002 fbc1 	bl	80034a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d2c:	f001 f99a 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d30:	230b      	movs	r3, #11
 8000d32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000d4e:	f002 f8e9 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d58:	f001 f984 	bl	8002064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC1_Init+0xf8>)
 8000d6a:	f002 f8db 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000d74:	f001 f976 	bl	8002064 <Error_Handler>
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000240 	.word	0x20000240

08000d84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d14b      	bne.n	8000e3e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_ADC_MspInit+0xc4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = rw_current_Pin|rw_speed_Pin;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <HAL_ADC_MspInit+0xc8>)
 8000dea:	f003 f87f 	bl	8003eec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <HAL_ADC_MspInit+0xd0>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e18:	2220      	movs	r2, #32
 8000e1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e24:	f002 fe53 	bl	8003ace <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000e2e:	f001 f919 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_ADC_MspInit+0xcc>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	20000290 	.word	0x20000290
 8000e54:	40020008 	.word	0x40020008

08000e58 <bldc_get_speed>:
#define SRC_BLDC_C_

#include "tim.h"
#include "bldc.h"

float bldc_get_speed(uint16_t adc_data){
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	return (float)(2.0 * ((float)adc_data/4096.0 - 0.5) * MAX_SPEED_RANGE);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6c:	ee17 0a90 	vmov	r0, s15
 8000e70:	f7ff fb6a 	bl	8000548 <__aeabi_f2d>
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <bldc_get_speed+0x78>)
 8000e7a:	f7ff fce7 	bl	800084c <__aeabi_ddiv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460c      	mov	r4, r1
 8000e82:	4618      	mov	r0, r3
 8000e84:	4621      	mov	r1, r4
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <bldc_get_speed+0x7c>)
 8000e8c:	f7ff f9fc 	bl	8000288 <__aeabi_dsub>
 8000e90:	4603      	mov	r3, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	4618      	mov	r0, r3
 8000e96:	4621      	mov	r1, r4
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	f7ff f9f6 	bl	800028c <__adddf3>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <bldc_get_speed+0x80>)
 8000eae:	f7ff fba3 	bl	80005f8 <__aeabi_dmul>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4621      	mov	r1, r4
 8000eba:	f7ff fe95 	bl	8000be8 <__aeabi_d2f>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	ee07 3a90 	vmov	s15, r3
}
 8000ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40b00000 	.word	0x40b00000
 8000ed4:	3fe00000 	.word	0x3fe00000
 8000ed8:	40bf4000 	.word	0x40bf4000

08000edc <bldc_get_current>:

float bldc_get_current(uint16_t adc_data){
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	return (float)(2.0 * ((float)adc_data/4096.0 - 0.5) * MAX_CURRENT_RANGE);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef0:	ee17 0a90 	vmov	r0, s15
 8000ef4:	f7ff fb28 	bl	8000548 <__aeabi_f2d>
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <bldc_get_current+0x74>)
 8000efe:	f7ff fca5 	bl	800084c <__aeabi_ddiv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	4618      	mov	r0, r3
 8000f08:	4621      	mov	r1, r4
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <bldc_get_current+0x78>)
 8000f10:	f7ff f9ba 	bl	8000288 <__aeabi_dsub>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	f7ff f9b4 	bl	800028c <__adddf3>
 8000f24:	4603      	mov	r3, r0
 8000f26:	460c      	mov	r4, r1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4621      	mov	r1, r4
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	f7ff f9ac 	bl	800028c <__adddf3>
 8000f34:	4603      	mov	r3, r0
 8000f36:	460c      	mov	r4, r1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	f7ff fe54 	bl	8000be8 <__aeabi_d2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	ee07 3a90 	vmov	s15, r3
}
 8000f46:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	40b00000 	.word	0x40b00000
 8000f54:	3fe00000 	.word	0x3fe00000

08000f58 <bldc_current_to_pulse>:

uint16_t bldc_current_to_pulse(float target_current){
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t)((htim1.Init.Period + 1) * (0.1 + 0.8 * fabs(target_current) / MAX_CURRENT_RANGE));
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <bldc_current_to_pulse+0x90>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff facb 	bl	8000504 <__aeabi_ui2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eef0 7ae7 	vabs.f32	s15, s15
 8000f7a:	ee17 0a90 	vmov	r0, s15
 8000f7e:	f7ff fae3 	bl	8000548 <__aeabi_f2d>
 8000f82:	a315      	add	r3, pc, #84	; (adr r3, 8000fd8 <bldc_current_to_pulse+0x80>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fb36 	bl	80005f8 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	f7ff fc56 	bl	800084c <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a30d      	add	r3, pc, #52	; (adr r3, 8000fe0 <bldc_current_to_pulse+0x88>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff f96d 	bl	800028c <__adddf3>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f7ff fb1d 	bl	80005f8 <__aeabi_dmul>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460c      	mov	r4, r1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f7ff fdef 	bl	8000ba8 <__aeabi_d2uiz>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	9999999a 	.word	0x9999999a
 8000fdc:	3fe99999 	.word	0x3fe99999
 8000fe0:	9999999a 	.word	0x9999999a
 8000fe4:	3fb99999 	.word	0x3fb99999
 8000fe8:	20000458 	.word	0x20000458

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_DMA_Init+0x38>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <MX_DMA_Init+0x38>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_DMA_Init+0x38>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200b      	movs	r0, #11
 8001010:	f002 fd23 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001014:	200b      	movs	r0, #11
 8001016:	f002 fd3c 	bl	8003a92 <HAL_NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a30      	ldr	r2, [pc, #192]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_GPIO_Init+0xdc>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_GPIO_Init+0xdc>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <MX_GPIO_Init+0xdc>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_GPIO_Init+0xdc>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rw_enable_GPIO_Port, rw_enable_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2102      	movs	r1, #2
 800108a:	481f      	ldr	r0, [pc, #124]	; (8001108 <MX_GPIO_Init+0xe0>)
 800108c:	f003 f8a0 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f003 f89a 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, user_led1_Pin|rw_direction_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2128      	movs	r1, #40	; 0x28
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <MX_GPIO_Init+0xe4>)
 80010a2:	f003 f895 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rw_enable_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(rw_enable_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_GPIO_Init+0xe0>)
 80010be:	f002 ff15 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 ff06 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = user_led1_Pin|rw_direction_Pin;
 80010e0:	2328      	movs	r3, #40	; 0x28
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_GPIO_Init+0xe4>)
 80010f8:	f002 fef8 	bl	8003eec <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	48001400 	.word	0x48001400
 800110c:	48000400 	.word	0x48000400

08001110 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_I2C1_Init+0x74>)
 8001116:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <MX_I2C1_Init+0x78>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_I2C1_Init+0x74>)
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <MX_I2C1_Init+0x7c>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_I2C1_Init+0x74>)
 8001128:	2201      	movs	r2, #1
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <MX_I2C1_Init+0x74>)
 800114c:	f003 f872 	bl	8004234 <HAL_I2C_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001156:	f000 ff85 	bl	8002064 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <MX_I2C1_Init+0x74>)
 800115e:	f003 fd43 	bl	8004be8 <HAL_I2CEx_ConfigAnalogFilter>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001168:	f000 ff7c 	bl	8002064 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_I2C1_Init+0x74>)
 8001170:	f003 fd85 	bl	8004c7e <HAL_I2CEx_ConfigDigitalFilter>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800117a:	f000 ff73 	bl	8002064 <Error_Handler>
  }

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200002d4 	.word	0x200002d4
 8001188:	40005400 	.word	0x40005400
 800118c:	00602173 	.word	0x00602173

08001190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_I2C_MspInit+0x7c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d127      	bne.n	8001202 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23c0      	movs	r3, #192	; 0xc0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011da:	2304      	movs	r3, #4
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_I2C_MspInit+0x84>)
 80011e6:	f002 fe81 	bl	8003eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_I2C_MspInit+0x80>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <lpme1_get_timestamp>:
  *@brief: Get system time stamp
  *@para: Pointer to float variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_timestamp(float *time)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    if(lpme1_read_buffer(TIMESTAMP_0, buffer, 4) == LPME1_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2204      	movs	r2, #4
 8001226:	4619      	mov	r1, r3
 8001228:	2020      	movs	r0, #32
 800122a:	f000 f96f 	bl	800150c <lpme1_read_buffer>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10b      	bne.n	800124c <lpme1_get_timestamp+0x34>
    {
        *time = uint8_to_float(buffer);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f905 	bl	8001448 <uint8_to_float>
 800123e:	eef0 7a40 	vmov.f32	s15, s0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edc3 7a00 	vstr	s15, [r3]
        return LPME1_OK;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <lpme1_get_timestamp+0x36>
    }
    else
        return LPME1_ERROR;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <lpme1_get_gyr>:
  *@brief: Get gyroscope data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_gyr(float *gyr)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(GYR_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	220c      	movs	r2, #12
 8001264:	4619      	mov	r1, r3
 8001266:	2030      	movs	r0, #48	; 0x30
 8001268:	f000 f950 	bl	800150c <lpme1_read_buffer>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d116      	bne.n	80012a0 <lpme1_get_gyr+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e00e      	b.n	8001296 <lpme1_get_gyr+0x40>
        {
            *(gyr+i) = data[i].fval;
 8001278:	7dfa      	ldrb	r2, [r7, #23]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	440b      	add	r3, r1
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	f107 0118 	add.w	r1, r7, #24
 8001288:	440a      	add	r2, r1
 800128a:	3a10      	subs	r2, #16
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	3301      	adds	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d9ed      	bls.n	8001278 <lpme1_get_gyr+0x22>
        }
        return LPME1_OK;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <lpme1_get_gyr+0x4c>
    }
    else
        return LPME1_ERROR;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <lpme1_get_euler>:
  *@brief: Get euler angle
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_euler(float *euler)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(EULER_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	220c      	movs	r2, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	2048      	movs	r0, #72	; 0x48
 80012bc:	f000 f926 	bl	800150c <lpme1_read_buffer>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d116      	bne.n	80012f4 <lpme1_get_euler+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	e00e      	b.n	80012ea <lpme1_get_euler+0x40>
        {
            *(euler+i) = data[i].fval;
 80012cc:	7dfa      	ldrb	r2, [r7, #23]
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	440b      	add	r3, r1
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	f107 0118 	add.w	r1, r7, #24
 80012dc:	440a      	add	r2, r1
 80012de:	3a10      	subs	r2, #16
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	3301      	adds	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d9ed      	bls.n	80012cc <lpme1_get_euler+0x22>
        }
        return LPME1_OK;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <lpme1_get_euler+0x4c>
    }
    else
        return LPME1_ERROR;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <lpme1_set_Freq>:
        LPMS_DATA_FREQ_200HZ
        LPMS_DATA_FREQ_400HZ
  *@ret: Status, return LPME1_OK if write success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_set_Freq(uint8_t freq)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if(lpme1_read_reg(DATA_CTRL, &data) != LPME1_OK)
 8001308:	f107 030f 	add.w	r3, r7, #15
 800130c:	4619      	mov	r1, r3
 800130e:	2002      	movs	r0, #2
 8001310:	f000 f8bc 	bl	800148c <lpme1_read_reg>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <lpme1_set_Freq+0x20>
        return LPME1_ERROR;
 800131a:	2300      	movs	r3, #0
 800131c:	e042      	b.n	80013a4 <lpme1_set_Freq+0xa6>

    data &= ~LPMS_DATA_FREQ_MASK;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f023 030f 	bic.w	r3, r3, #15
 8001324:	b2db      	uxtb	r3, r3
 8001326:	73fb      	strb	r3, [r7, #15]

    if(freq == LPMS_DATA_FREQ_5HZ)          data |= LPMS_DATA_FREQ_5HZ;
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <lpme1_set_Freq+0x36>
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e02b      	b.n	800138c <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_10HZ)    data |= LPMS_DATA_FREQ_10HZ;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d105      	bne.n	8001346 <lpme1_set_Freq+0x48>
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e022      	b.n	800138c <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_50HZ)    data |= LPMS_DATA_FREQ_50HZ;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d105      	bne.n	8001358 <lpme1_set_Freq+0x5a>
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e019      	b.n	800138c <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_100HZ)   data |= LPMS_DATA_FREQ_100HZ;
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d105      	bne.n	800136a <lpme1_set_Freq+0x6c>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f043 0303 	orr.w	r3, r3, #3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e010      	b.n	800138c <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_200HZ)   data |= LPMS_DATA_FREQ_200HZ;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d105      	bne.n	800137c <lpme1_set_Freq+0x7e>
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e007      	b.n	800138c <lpme1_set_Freq+0x8e>
    else if(freq == LPMS_DATA_FREQ_400HZ)   data |= LPMS_DATA_FREQ_400HZ;
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d104      	bne.n	800138c <lpme1_set_Freq+0x8e>
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	f043 0305 	orr.w	r3, r3, #5
 8001388:	b2db      	uxtb	r3, r3
 800138a:	73fb      	strb	r3, [r7, #15]

    if(lpme1_write_reg(DATA_CTRL, &data) != LPME1_OK)
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	4619      	mov	r1, r3
 8001392:	2002      	movs	r0, #2
 8001394:	f000 f89a 	bl	80014cc <lpme1_write_reg>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <lpme1_set_Freq+0xa4>
        return LPME1_ERROR;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <lpme1_set_Freq+0xa6>

    return LPME1_OK;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lpme1_set_filter>:
        LPMS_FILTER_MODE_MAD_GYR_ACC
        LPMS_FILTER_MODE_MAD_GYR_ACC_MAG
  *@ret: Status, return LPME1_OK if write success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_set_filter(uint8_t mode)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if(lpme1_read_reg(FILTER_CONFIG, &data) != LPME1_OK)
 80013b6:	f107 030f 	add.w	r3, r7, #15
 80013ba:	4619      	mov	r1, r3
 80013bc:	2008      	movs	r0, #8
 80013be:	f000 f865 	bl	800148c <lpme1_read_reg>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d001      	beq.n	80013cc <lpme1_set_filter+0x20>
        return LPME1_ERROR;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e039      	b.n	8001440 <lpme1_set_filter+0x94>

    data &= ~LPMS_FILTER_MODE_MASK;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f023 0307 	bic.w	r3, r3, #7
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]

    if(mode == LPMS_FILTER_MODE_GYR)                   data |= LPMS_FILTER_MODE_GYR;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <lpme1_set_filter+0x36>
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e022      	b.n	8001428 <lpme1_set_filter+0x7c>
    else if(mode == LPMS_FILTER_MODE_GYR_ACC)          data |= LPMS_FILTER_MODE_GYR_ACC;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <lpme1_set_filter+0x48>
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e019      	b.n	8001428 <lpme1_set_filter+0x7c>
    else if(mode == LPMS_FILTER_MODE_GYR_ACC_MAG)      data |= LPMS_FILTER_MODE_GYR_ACC_MAG;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d105      	bne.n	8001406 <lpme1_set_filter+0x5a>
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e010      	b.n	8001428 <lpme1_set_filter+0x7c>
    else if(mode == LPMS_FILTER_MODE_MAD_GYR_ACC)      data |= LPMS_FILTER_MODE_MAD_GYR_ACC;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d105      	bne.n	8001418 <lpme1_set_filter+0x6c>
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	f043 0303 	orr.w	r3, r3, #3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e007      	b.n	8001428 <lpme1_set_filter+0x7c>
    else if(mode == LPMS_FILTER_MODE_MAD_GYR_ACC_MAG)  data |= LPMS_FILTER_MODE_MAD_GYR_ACC_MAG;
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d104      	bne.n	8001428 <lpme1_set_filter+0x7c>
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]

    if(lpme1_write_reg(FILTER_CONFIG, &data) != LPME1_OK)
 8001428:	f107 030f 	add.w	r3, r7, #15
 800142c:	4619      	mov	r1, r3
 800142e:	2008      	movs	r0, #8
 8001430:	f000 f84c 	bl	80014cc <lpme1_write_reg>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <lpme1_set_filter+0x92>
        return LPME1_ERROR;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <lpme1_set_filter+0x94>

    return LPME1_OK;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <uint8_to_float>:
  *@brief: Convert 4 uint8_t values to float value
  *@para: Pointer to uint8_t array[4];
  *@ret: float value
  */
float uint8_to_float(uint8_t *pu8vals)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    DataDecoder decoder;
    for(uint8_t i = 0; i < 4; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e00c      	b.n	8001470 <uint8_to_float+0x28>
    {
        decoder.u8vals[i] = *(pu8vals +i);
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	441a      	add	r2, r3
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	f107 0110 	add.w	r1, r7, #16
 8001464:	440b      	add	r3, r1
 8001466:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 0; i < 4; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d9ef      	bls.n	8001456 <uint8_to_float+0xe>
    }
    return decoder.fval;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <lpme1_read_reg>:
  *@para: regaddr, register address to be read
  *@para: buf, Pointer to uint8_t variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_reg(uint8_t regaddr,uint8_t *buf)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af04      	add	r7, sp, #16
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	b29a      	uxth	r2, r3
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	2164      	movs	r1, #100	; 0x64
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <lpme1_read_reg+0x3c>)
 80014ae:	f003 f865 	bl	800457c <HAL_I2C_Mem_Read>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <lpme1_read_reg+0x30>
                        I2C_MEMADD_SIZE_8BIT, buf, 1, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <lpme1_read_reg+0x32>
    else
        return LPME1_ERROR;
 80014bc:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    temp = 20; while(temp--);   //give slave some time
	
    return LPME1_OK;
#endif
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002d4 	.word	0x200002d4

080014cc <lpme1_write_reg>:
  *@para: regaddr, register address to be write
  *@para: buf, Pointer to uint8_t variable saved the data to be write
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_write_reg(uint8_t regaddr,uint8_t *buf)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Write(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2364      	movs	r3, #100	; 0x64
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	2164      	movs	r1, #100	; 0x64
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <lpme1_write_reg+0x3c>)
 80014ee:	f002 ff31 	bl	8004354 <HAL_I2C_Mem_Write>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <lpme1_write_reg+0x30>
                         I2C_MEMADD_SIZE_8BIT, buf, 1, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <lpme1_write_reg+0x32>
    else
        return LPME1_ERROR;
 80014fc:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	uint8_t i = 20;while(i--);
	
    return LPME1_OK;
#endif
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002d4 	.word	0x200002d4

0800150c <lpme1_read_buffer>:
  *@para: buf, Pointer to uint8_t array use to save read datas
  *@para: len, data length to be read
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_buffer(uint8_t regaddr,uint8_t *buf,uint8_t len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af04      	add	r7, sp, #16
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b299      	uxth	r1, r3
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	b29b      	uxth	r3, r3
 8001524:	2264      	movs	r2, #100	; 0x64
 8001526:	9202      	str	r2, [sp, #8]
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	460a      	mov	r2, r1
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <lpme1_read_buffer+0x44>)
 8001536:	f003 f821 	bl	800457c <HAL_I2C_Mem_Read>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <lpme1_read_buffer+0x38>
                        I2C_MEMADD_SIZE_8BIT, buf, len, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <lpme1_read_buffer+0x3a>
    else
        return LPME1_ERROR;
 8001544:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	while(i--);
	
    return LPME1_OK;
#endif
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d4 	.word	0x200002d4

08001554 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	if(uart_key==1){
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__io_putchar+0x3c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d106      	bne.n	8001574 <__io_putchar+0x20>
		HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001566:	1df9      	adds	r1, r7, #7
 8001568:	2301      	movs	r3, #1
 800156a:	2201      	movs	r2, #1
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <__io_putchar+0x40>)
 800156e:	f006 f87b 	bl	8007668 <HAL_UART_Transmit>
	} else if(uart_key==2){
		HAL_UART_Transmit(&huart2, &ch, 1, 1);
	}
}
 8001572:	e009      	b.n	8001588 <__io_putchar+0x34>
	} else if(uart_key==2){
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <__io_putchar+0x3c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d105      	bne.n	8001588 <__io_putchar+0x34>
		HAL_UART_Transmit(&huart2, &ch, 1, 1);
 800157c:	1df9      	adds	r1, r7, #7
 800157e:	2301      	movs	r3, #1
 8001580:	2201      	movs	r2, #1
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <__io_putchar+0x44>)
 8001584:	f006 f870 	bl	8007668 <HAL_UART_Transmit>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000014 	.word	0x20000014
 8001594:	200004f0 	.word	0x200004f0
 8001598:	20000574 	.word	0x20000574

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f001 f9ae 	bl	8002900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f819 	bl	80015da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f7ff fd3e 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ac:	f7ff fd1e 	bl	8000fec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015b0:	f001 f8d0 	bl	8002754 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015b4:	f7ff fb68 	bl	8000c88 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015b8:	f7ff fdaa 	bl	8001110 <MX_I2C1_Init>
  MX_TIM1_Init();
 80015bc:	f000 fe8c 	bl	80022d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80015c0:	f001 f898 	bl	80026f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015c4:	f000 ff34 	bl	8002430 <MX_TIM2_Init>
  MX_TIM17_Init();
 80015c8:	f000 ffce 	bl	8002568 <MX_TIM17_Init>
  MX_TIM3_Init();
 80015cc:	f000 ff7e 	bl	80024cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80015d0:	f000 f860 	bl	8001694 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80015d4:	f000 f934 	bl	8001840 <loop>
 80015d8:	e7fc      	b.n	80015d4 <main+0x38>

080015da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b096      	sub	sp, #88	; 0x58
 80015de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e4:	2228      	movs	r2, #40	; 0x28
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 ff00 	bl	80083ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160e:	2302      	movs	r3, #2
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001616:	2310      	movs	r3, #16
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	2302      	movs	r3, #2
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800161e:	2300      	movs	r3, #0
 8001620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001622:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fb73 	bl	8004d18 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001638:	f000 fd14 	bl	8002064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fa65 	bl	8005b28 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001664:	f000 fcfe 	bl	8002064 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001668:	f241 0321 	movw	r3, #4129	; 0x1021
 800166c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800166e:	2301      	movs	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001672:	2310      	movs	r3, #16
 8001674:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4618      	mov	r0, r3
 800167e:	f004 fc89 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001688:	f000 fcec 	bl	8002064 <Error_Handler>
  }
}
 800168c:	bf00      	nop
 800168e:	3758      	adds	r7, #88	; 0x58
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <setup>:

/* USER CODE BEGIN 4 */
void setup(void){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	_Bool ready_flag=1;
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]
	//rw pwm pin setup
	ConfigOC_rw.OCMode = TIM_OCMODE_PWM1;
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <setup+0x17c>)
 80016a0:	2260      	movs	r2, #96	; 0x60
 80016a2:	601a      	str	r2, [r3, #0]
	ConfigOC_rw.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <setup+0x17c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
	ConfigOC_rw.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016aa:	4b59      	ldr	r3, [pc, #356]	; (8001810 <setup+0x17c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
	ConfigOC_rw.OCFastMode = TIM_OCFAST_DISABLE;
 80016b0:	4b57      	ldr	r3, [pc, #348]	; (8001810 <setup+0x17c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
	ConfigOC_rw.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <setup+0x17c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
	ConfigOC_rw.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <setup+0x17c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
	ConfigOC_rw.Pulse=0;
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <setup+0x17c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&htim1,&ConfigOC_rw,TIM_CHANNEL_1);
 80016c8:	2200      	movs	r2, #0
 80016ca:	4951      	ldr	r1, [pc, #324]	; (8001810 <setup+0x17c>)
 80016cc:	4851      	ldr	r0, [pc, #324]	; (8001814 <setup+0x180>)
 80016ce:	f005 f8a9 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 80016d2:	2100      	movs	r1, #0
 80016d4:	484f      	ldr	r0, [pc, #316]	; (8001814 <setup+0x180>)
 80016d6:	f004 fe99 	bl	800640c <HAL_TIM_PWM_Start>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <setup+0x50>
		Error_Handler();
 80016e0:	f000 fcc0 	bl	8002064 <Error_Handler>
	}
	//ADC setup
	/*
	 * なぜかDMAのAD変換とfloat型のprintfが両立できない→ログ取りは基本int型でやる
	 */
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_Data1, sizeof(ADC_Data1)) != HAL_OK){
 80016e4:	2208      	movs	r2, #8
 80016e6:	494c      	ldr	r1, [pc, #304]	; (8001818 <setup+0x184>)
 80016e8:	484c      	ldr	r0, [pc, #304]	; (800181c <setup+0x188>)
 80016ea:	f001 fb41 	bl	8002d70 <HAL_ADC_Start_DMA>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <setup+0x64>
		 Error_Handler();
 80016f4:	f000 fcb6 	bl	8002064 <Error_Handler>
	}

	setbuf(stdout, NULL);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <setup+0x18c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f007 fd37 	bl	8009174 <setbuf>

	//Motor variable initialization
	rw_motor.actual_current = 0;
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <setup+0x190>)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
	rw_motor.actual_speed = 0;
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <setup+0x190>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
	rw_motor.target_current = 0;
 8001716:	4b43      	ldr	r3, [pc, #268]	; (8001824 <setup+0x190>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
	rw_motor.target_speed = 0;
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <setup+0x190>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
	rw_motor.direction = 1;
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <setup+0x190>)
 8001728:	2201      	movs	r2, #1
 800172a:	745a      	strb	r2, [r3, #17]
	rw_motor.enable = 0;
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <setup+0x190>)
 800172e:	2200      	movs	r2, #0
 8001730:	741a      	strb	r2, [r3, #16]
	rw_motor.pwm_pulse = (htim1.Init.Period + 1) * 0.5;
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <setup+0x180>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fee3 	bl	8000504 <__aeabi_ui2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <setup+0x194>)
 8001744:	f7fe ff58 	bl	80005f8 <__aeabi_dmul>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4618      	mov	r0, r3
 800174e:	4621      	mov	r1, r4
 8001750:	f7ff fa2a 	bl	8000ba8 <__aeabi_d2uiz>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <setup+0x190>)
 800175a:	825a      	strh	r2, [r3, #18]

	ma.target_angle = 0;
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <setup+0x198>)
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
	ma.target_speed = 0;
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <setup+0x198>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
	ma.actual_angle = 0;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <setup+0x198>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
	ma.actual_speed = 0;
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <setup+0x198>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
	ma.angle_base = 0;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <setup+0x198>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	611a      	str	r2, [r3, #16]


	HAL_Delay(300);
 8001784:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001788:	f001 f920 	bl	80029cc <HAL_Delay>
	while(1) {
		if(lpme1_set_Freq(LPMS_DATA_FREQ_200HZ) != LPME1_OK) ready_flag=0;
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff fdb6 	bl	80012fe <lpme1_set_Freq>
 8001792:	4603      	mov	r3, r0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d001      	beq.n	800179c <setup+0x108>
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
		if(lpme1_set_filter(LPMS_FILTER_MODE_MAD_GYR_ACC_MAG)!=LPME1_OK) ready_flag=0;
 800179c:	2004      	movs	r0, #4
 800179e:	f7ff fe05 	bl	80013ac <lpme1_set_filter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d001      	beq.n	80017ac <setup+0x118>
 80017a8:	2300      	movs	r3, #0
 80017aa:	71fb      	strb	r3, [r7, #7]
		if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) ready_flag=0;
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <setup+0x19c>)
 80017ae:	f004 fd6f 	bl	8006290 <HAL_TIM_Base_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <setup+0x128>
 80017b8:	2300      	movs	r3, #0
 80017ba:	71fb      	strb	r3, [r7, #7]
		//if(HAL_UART_Receive_IT(&huart1, &key, 1) != HAL_OK) ready_flag=0;
		HAL_Delay(100);
 80017bc:	2064      	movs	r0, #100	; 0x64
 80017be:	f001 f905 	bl	80029cc <HAL_Delay>
		if(ready_flag == 1) break;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <setup+0x13a>
		ready_flag = 1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	71fb      	strb	r3, [r7, #7]
		if(lpme1_set_Freq(LPMS_DATA_FREQ_200HZ) != LPME1_OK) ready_flag=0;
 80017cc:	e7de      	b.n	800178c <setup+0xf8>
		if(ready_flag == 1) break;
 80017ce:	bf00      	nop
	}
	uart_key=2;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <setup+0x1a0>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
	printf("Time,Angle Error,Speed Error,Actual Current,Wheel Speed\r\n");
 80017d6:	4818      	ldr	r0, [pc, #96]	; (8001838 <setup+0x1a4>)
 80017d8:	f007 fcc4 	bl	8009164 <puts>

	//Ready beep
	for(int i=0;i<3;i++){
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	e00e      	b.n	8001800 <setup+0x16c>
		buzzer_output(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 f964 	bl	8001ab0 <buzzer_output>
		HAL_Delay(50);
 80017e8:	2032      	movs	r0, #50	; 0x32
 80017ea:	f001 f8ef 	bl	80029cc <HAL_Delay>
		buzzer_output(0);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f95e 	bl	8001ab0 <buzzer_output>
		HAL_Delay(50);
 80017f4:	2032      	movs	r0, #50	; 0x32
 80017f6:	f001 f8e9 	bl	80029cc <HAL_Delay>
	for(int i=0;i<3;i++){
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	dded      	ble.n	80017e2 <setup+0x14e>
	}
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}
 800180e:	bf00      	nop
 8001810:	20000390 	.word	0x20000390
 8001814:	20000458 	.word	0x20000458
 8001818:	2000022c 	.word	0x2000022c
 800181c:	20000240 	.word	0x20000240
 8001820:	20000024 	.word	0x20000024
 8001824:	200003ac 	.word	0x200003ac
 8001828:	3fe00000 	.word	0x3fe00000
 800182c:	20000374 	.word	0x20000374
 8001830:	200004a4 	.word	0x200004a4
 8001834:	20000014 	.word	0x20000014
 8001838:	0800e180 	.word	0x0800e180
 800183c:	00000000 	.word	0x00000000

08001840 <loop>:
void loop(void){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b083      	sub	sp, #12
 8001844:	af02      	add	r7, sp, #8
	//update xbee command
	HAL_UART_Receive(&huart1,&key, 1, 10);
 8001846:	230a      	movs	r3, #10
 8001848:	2201      	movs	r2, #1
 800184a:	4987      	ldr	r1, [pc, #540]	; (8001a68 <loop+0x228>)
 800184c:	4887      	ldr	r0, [pc, #540]	; (8001a6c <loop+0x22c>)
 800184e:	f005 ff9f 	bl	8007790 <HAL_UART_Receive>

	switch(key){
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <loop+0x228>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	3b52      	subs	r3, #82	; 0x52
 8001858:	2b26      	cmp	r3, #38	; 0x26
 800185a:	f200 80d9 	bhi.w	8001a10 <loop+0x1d0>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <loop+0x24>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001a0b 	.word	0x08001a0b
 8001868:	08001a11 	.word	0x08001a11
 800186c:	08001a11 	.word	0x08001a11
 8001870:	08001a11 	.word	0x08001a11
 8001874:	08001a11 	.word	0x08001a11
 8001878:	08001a11 	.word	0x08001a11
 800187c:	080019a3 	.word	0x080019a3
 8001880:	08001a11 	.word	0x08001a11
 8001884:	08001a11 	.word	0x08001a11
 8001888:	08001a11 	.word	0x08001a11
 800188c:	08001a11 	.word	0x08001a11
 8001890:	08001a11 	.word	0x08001a11
 8001894:	08001a11 	.word	0x08001a11
 8001898:	08001a11 	.word	0x08001a11
 800189c:	08001a11 	.word	0x08001a11
 80018a0:	08001a11 	.word	0x08001a11
 80018a4:	08001a11 	.word	0x08001a11
 80018a8:	08001a11 	.word	0x08001a11
 80018ac:	08001a11 	.word	0x08001a11
 80018b0:	080019b7 	.word	0x080019b7
 80018b4:	08001a11 	.word	0x08001a11
 80018b8:	08001a11 	.word	0x08001a11
 80018bc:	08001a11 	.word	0x08001a11
 80018c0:	08001925 	.word	0x08001925
 80018c4:	08001a11 	.word	0x08001a11
 80018c8:	08001a11 	.word	0x08001a11
 80018cc:	08001a11 	.word	0x08001a11
 80018d0:	08001a11 	.word	0x08001a11
 80018d4:	08001a11 	.word	0x08001a11
 80018d8:	0800193f 	.word	0x0800193f
 80018dc:	080019cb 	.word	0x080019cb
 80018e0:	08001a11 	.word	0x08001a11
 80018e4:	08001a11 	.word	0x08001a11
 80018e8:	08001901 	.word	0x08001901
 80018ec:	08001a11 	.word	0x08001a11
 80018f0:	08001a11 	.word	0x08001a11
 80018f4:	08001a11 	.word	0x08001a11
 80018f8:	08001a11 	.word	0x08001a11
 80018fc:	08001953 	.word	0x08001953
	case 's':	//stop
		uart_key=1;
 8001900:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <loop+0x230>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		printf("\r\nSTOP\r\n");
 8001906:	485b      	ldr	r0, [pc, #364]	; (8001a74 <loop+0x234>)
 8001908:	f007 fc2c 	bl	8009164 <puts>
		rw_motor.enable=0;
 800190c:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <loop+0x238>)
 800190e:	2200      	movs	r2, #0
 8001910:	741a      	strb	r2, [r3, #16]
		rw_motor.target_speed=0;
 8001912:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <loop+0x238>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
		rw_motor.target_current=0;
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <loop+0x238>)
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
		break;
 8001922:	e076      	b.n	8001a12 <loop+0x1d2>
	case 'i':	//start
		uart_key=1;
 8001924:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <loop+0x230>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
		printf("\r\nCURRENT ENABLE\r\n");
 800192a:	4854      	ldr	r0, [pc, #336]	; (8001a7c <loop+0x23c>)
 800192c:	f007 fc1a 	bl	8009164 <puts>
		//rw_motor.enable=1;
		//rw_motor.target_speed=4000;
		rw_motor.target_current=0.3;
 8001930:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <loop+0x238>)
 8001932:	4a53      	ldr	r2, [pc, #332]	; (8001a80 <loop+0x240>)
 8001934:	601a      	str	r2, [r3, #0]
		rw_motor.enable=1;
 8001936:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <loop+0x238>)
 8001938:	2201      	movs	r2, #1
 800193a:	741a      	strb	r2, [r3, #16]
		break;
 800193c:	e069      	b.n	8001a12 <loop+0x1d2>
	case 'o':
		uart_key=1;
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <loop+0x230>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		//printf("\r\nCURRENT ENABLE\r\n");
		rw_motor.target_current=-0.1;
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <loop+0x238>)
 8001946:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <loop+0x244>)
 8001948:	601a      	str	r2, [r3, #0]
		rw_motor.enable=1;
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <loop+0x238>)
 800194c:	2201      	movs	r2, #1
 800194e:	741a      	strb	r2, [r3, #16]
		break;
 8001950:	e05f      	b.n	8001a12 <loop+0x1d2>
	case 'x':	//control start
		uart_key=1;
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <loop+0x230>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
		printf("\r\nControl Start !!!\r\n");
 8001958:	484b      	ldr	r0, [pc, #300]	; (8001a88 <loop+0x248>)
 800195a:	f007 fc03 	bl	8009164 <puts>
		ma.angle_base = lpme1Data.euler[2];
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <loop+0x24c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <loop+0x250>)
 8001964:	6113      	str	r3, [r2, #16]
		ma.target_angle = ma.angle_base + PI;
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <loop+0x250>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdec 	bl	8000548 <__aeabi_f2d>
 8001970:	a33b      	add	r3, pc, #236	; (adr r3, 8001a60 <loop+0x220>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc89 	bl	800028c <__adddf3>
 800197a:	4603      	mov	r3, r0
 800197c:	460c      	mov	r4, r1
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	f7ff f931 	bl	8000be8 <__aeabi_d2f>
 8001986:	4602      	mov	r2, r0
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <loop+0x250>)
 800198a:	601a      	str	r2, [r3, #0]
		ma.target_speed = 0;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <loop+0x250>)
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
		rw_motor.enable=1;
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <loop+0x238>)
 8001996:	2201      	movs	r2, #1
 8001998:	741a      	strb	r2, [r3, #16]
		logger_flag = 1;
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <loop+0x254>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
		break;
 80019a0:	e037      	b.n	8001a12 <loop+0x1d2>
	case 'X':
		uart_key=1;
 80019a2:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <loop+0x230>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		printf("\r\nControl Start !!!\r\n");
 80019a8:	4837      	ldr	r0, [pc, #220]	; (8001a88 <loop+0x248>)
 80019aa:	f007 fbdb 	bl	8009164 <puts>
		/*ma.angle_base = lpme1Data.euler[2];
		ma.target_angle = ma.angle_base + PI;
		ma.target_speed = 0;
		rw_motor.enable=1;*/
		//logger_flag = 1;
		speed_observation_flag=1;
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <loop+0x258>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
		break;
 80019b4:	e02d      	b.n	8001a12 <loop+0x1d2>

	case 'e':	//enable
		uart_key=1;
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <loop+0x230>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
		printf("\r\nMOTOR ENABLE\r\n");
 80019bc:	4837      	ldr	r0, [pc, #220]	; (8001a9c <loop+0x25c>)
 80019be:	f007 fbd1 	bl	8009164 <puts>
		rw_motor.enable=1;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <loop+0x238>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	741a      	strb	r2, [r3, #16]
		break;
 80019c8:	e023      	b.n	8001a12 <loop+0x1d2>
	case 'p':	//change target speed
		uart_key=1;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <loop+0x230>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
		printf("\r\neneble:%d, direction:%d, speed:%d, current:%d\r\n", rw_motor.enable, rw_motor.direction,(int)(1000 * rw_motor.target_current), (int)(rw_motor.target_speed));
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <loop+0x238>)
 80019d2:	7c1b      	ldrb	r3, [r3, #16]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <loop+0x238>)
 80019d8:	7c5b      	ldrb	r3, [r3, #17]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <loop+0x238>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001aa0 <loop+0x260>
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <loop+0x238>)
 80019f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f8:	ee17 3a90 	vmov	r3, s15
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	ee17 3a10 	vmov	r3, s14
 8001a02:	4828      	ldr	r0, [pc, #160]	; (8001aa4 <loop+0x264>)
 8001a04:	f007 fb3a 	bl	800907c <iprintf>
		break;
 8001a08:	e003      	b.n	8001a12 <loop+0x1d2>
	case 'R':	//system reset
		HAL_NVIC_SystemReset();
 8001a0a:	f002 f850 	bl	8003aae <HAL_NVIC_SystemReset>
		break;
 8001a0e:	e000      	b.n	8001a12 <loop+0x1d2>
	default:

		break;
 8001a10:	bf00      	nop
	}
	key='0';
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <loop+0x228>)
 8001a14:	2230      	movs	r2, #48	; 0x30
 8001a16:	701a      	strb	r2, [r3, #0]

	uart_key=1;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <loop+0x230>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
	//printf("\r\n current:%d, speed:%d\r\n",(int)(1000 * rw_motor.actual_current), (int)(rw_motor.actual_speed));
	//printf("\r\nangle:%d, speed:%d target_current:%d\r\n", (int)(180*lpme1Data.euler[2]/PI), (int)(180*lpme1Data.gyr[1]/PI), (int)(tmp_output*1000));
	//printf("actual_angle:%d\r\n", (int)(180*ma.angle_error/PI));

	if(logger_flag==0 && counter>counter_th){
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <loop+0x254>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d112      	bne.n	8001a4c <loop+0x20c>
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <loop+0x268>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <loop+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dd0c      	ble.n	8001a4c <loop+0x20c>
		buzzer_output(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 f83c 	bl	8001ab0 <buzzer_output>
		counter=0;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <loop+0x268>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f000 ffc3 	bl	80029cc <HAL_Delay>
		buzzer_output(0);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f832 	bl	8001ab0 <buzzer_output>
	/*if(print_flag==1){
		uart_key=1;
		//printf("roll:%d, pitch:%d, yaw:%d\r\n", (int)(180*lpme1Data.euler[0]/PI), (int)(180*lpme1Data.euler[1]/PI), (int)(180*lpme1Data.euler[2]/PI));
	}*/

	HAL_Delay(500);
 8001a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a50:	f000 ffbc 	bl	80029cc <HAL_Delay>
}
 8001a54:	bf00      	nop
 8001a56:	3704      	adds	r7, #4
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	f3af 8000 	nop.w
 8001a60:	c083126f 	.word	0xc083126f
 8001a64:	400921ca 	.word	0x400921ca
 8001a68:	20000015 	.word	0x20000015
 8001a6c:	200004f0 	.word	0x200004f0
 8001a70:	20000014 	.word	0x20000014
 8001a74:	0800e1bc 	.word	0x0800e1bc
 8001a78:	200003ac 	.word	0x200003ac
 8001a7c:	0800e1c4 	.word	0x0800e1c4
 8001a80:	3e99999a 	.word	0x3e99999a
 8001a84:	bdcccccd 	.word	0xbdcccccd
 8001a88:	0800e1d8 	.word	0x0800e1d8
 8001a8c:	20000320 	.word	0x20000320
 8001a90:	20000374 	.word	0x20000374
 8001a94:	20000224 	.word	0x20000224
 8001a98:	20000218 	.word	0x20000218
 8001a9c:	0800e1f0 	.word	0x0800e1f0
 8001aa0:	447a0000 	.word	0x447a0000
 8001aa4:	0800e200 	.word	0x0800e200
 8001aa8:	20000228 	.word	0x20000228
 8001aac:	20000010 	.word	0x20000010

08001ab0 <buzzer_output>:

void buzzer_output(_Bool state){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	}
	else {
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
	}
#endif
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <motor_control>:

void motor_control(void){
 8001ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001acc:	af00      	add	r7, sp, #0
	rw_motor.actual_current = bldc_get_current(ADC_Data1[0]);
 8001ace:	4bc2      	ldr	r3, [pc, #776]	; (8001dd8 <motor_control+0x310>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa01 	bl	8000edc <bldc_get_current>
 8001ada:	eef0 7a40 	vmov.f32	s15, s0
 8001ade:	4bbf      	ldr	r3, [pc, #764]	; (8001ddc <motor_control+0x314>)
 8001ae0:	edc3 7a02 	vstr	s15, [r3, #8]
	rw_motor.actual_speed = bldc_get_speed(ADC_Data1[1]);
 8001ae4:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <motor_control+0x310>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f9b4 	bl	8000e58 <bldc_get_speed>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	4bb9      	ldr	r3, [pc, #740]	; (8001ddc <motor_control+0x314>)
 8001af6:	edc3 7a03 	vstr	s15, [r3, #12]

	ma.actual_angle = lpme1Data.euler[2] - ma.angle_base;
 8001afa:	4bb9      	ldr	r3, [pc, #740]	; (8001de0 <motor_control+0x318>)
 8001afc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001b00:	4bb8      	ldr	r3, [pc, #736]	; (8001de4 <motor_control+0x31c>)
 8001b02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0a:	4bb6      	ldr	r3, [pc, #728]	; (8001de4 <motor_control+0x31c>)
 8001b0c:	edc3 7a02 	vstr	s15, [r3, #8]
	if(ma.actual_angle < (-1)*PI){
 8001b10:	4bb4      	ldr	r3, [pc, #720]	; (8001de4 <motor_control+0x31c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd17 	bl	8000548 <__aeabi_f2d>
 8001b1a:	a3ab      	add	r3, pc, #684	; (adr r3, 8001dc8 <motor_control+0x300>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe ffdc 	bl	8000adc <__aeabi_dcmplt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d018      	beq.n	8001b5c <motor_control+0x94>
		ma.actual_angle = (-1) * ma.actual_angle - PI;
 8001b2a:	4bae      	ldr	r3, [pc, #696]	; (8001de4 <motor_control+0x31c>)
 8001b2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b30:	eef1 7a67 	vneg.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd05 	bl	8000548 <__aeabi_f2d>
 8001b3e:	a3a4      	add	r3, pc, #656	; (adr r3, 8001dd0 <motor_control+0x308>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fba0 	bl	8000288 <__aeabi_dsub>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4621      	mov	r1, r4
 8001b50:	f7ff f84a 	bl	8000be8 <__aeabi_d2f>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4ba3      	ldr	r3, [pc, #652]	; (8001de4 <motor_control+0x31c>)
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	e024      	b.n	8001ba6 <motor_control+0xde>
	} else if(ma.actual_angle>PI){
 8001b5c:	4ba1      	ldr	r3, [pc, #644]	; (8001de4 <motor_control+0x31c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	a39a      	add	r3, pc, #616	; (adr r3, 8001dd0 <motor_control+0x308>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d017      	beq.n	8001ba6 <motor_control+0xde>
		ma.actual_angle = (-1) * ma.actual_angle + PI;
 8001b76:	4b9b      	ldr	r3, [pc, #620]	; (8001de4 <motor_control+0x31c>)
 8001b78:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b7c:	eef1 7a67 	vneg.f32	s15, s15
 8001b80:	ee17 3a90 	vmov	r3, s15
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcdf 	bl	8000548 <__aeabi_f2d>
 8001b8a:	a391      	add	r3, pc, #580	; (adr r3, 8001dd0 <motor_control+0x308>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fb7c 	bl	800028c <__adddf3>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7ff f824 	bl	8000be8 <__aeabi_d2f>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b90      	ldr	r3, [pc, #576]	; (8001de4 <motor_control+0x31c>)
 8001ba4:	609a      	str	r2, [r3, #8]
	}

	//ベクトルの内積と外積を利用して目標角と現在角の偏差を計算する
	ma.angle_error = acos(cos(lpme1Data.euler[2]) * cos(ma.target_angle) + sin(lpme1Data.euler[2]) * sin(ma.target_angle));
 8001ba6:	4b8e      	ldr	r3, [pc, #568]	; (8001de0 <motor_control+0x318>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fccc 	bl	8000548 <__aeabi_f2d>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	ec44 3b10 	vmov	d0, r3, r4
 8001bb8:	f00a ff0e 	bl	800c9d8 <cos>
 8001bbc:	ec55 4b10 	vmov	r4, r5, d0
 8001bc0:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <motor_control+0x31c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	ec43 2b10 	vmov	d0, r2, r3
 8001bd2:	f00a ff01 	bl	800c9d8 <cos>
 8001bd6:	ec53 2b10 	vmov	r2, r3, d0
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4625      	mov	r5, r4
 8001be8:	461c      	mov	r4, r3
 8001bea:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <motor_control+0x318>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcaa 	bl	8000548 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	ec43 2b10 	vmov	d0, r2, r3
 8001bfc:	f00a ff30 	bl	800ca60 <sin>
 8001c00:	ec59 8b10 	vmov	r8, r9, d0
 8001c04:	4b77      	ldr	r3, [pc, #476]	; (8001de4 <motor_control+0x31c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc9d 	bl	8000548 <__aeabi_f2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	ec43 2b10 	vmov	d0, r2, r3
 8001c16:	f00a ff23 	bl	800ca60 <sin>
 8001c1a:	ec53 2b10 	vmov	r2, r3, d0
 8001c1e:	4640      	mov	r0, r8
 8001c20:	4649      	mov	r1, r9
 8001c22:	f7fe fce9 	bl	80005f8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb2d 	bl	800028c <__adddf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	ec44 3b17 	vmov	d7, r3, r4
 8001c3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c3e:	eef0 0a67 	vmov.f32	s1, s15
 8001c42:	f00a ff55 	bl	800caf0 <acos>
 8001c46:	ec54 3b10 	vmov	r3, r4, d0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	f7fe ffcb 	bl	8000be8 <__aeabi_d2f>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <motor_control+0x31c>)
 8001c56:	615a      	str	r2, [r3, #20]
	if((cos(lpme1Data.euler[2]) * sin(ma.target_angle) - sin(lpme1Data.euler[2]) * cos(ma.target_angle)) < 0){
 8001c58:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <motor_control+0x318>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc73 	bl	8000548 <__aeabi_f2d>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	ec44 3b10 	vmov	d0, r3, r4
 8001c6a:	f00a feb5 	bl	800c9d8 <cos>
 8001c6e:	ec55 4b10 	vmov	r4, r5, d0
 8001c72:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <motor_control+0x31c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc66 	bl	8000548 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	ec43 2b10 	vmov	d0, r2, r3
 8001c84:	f00a feec 	bl	800ca60 <sin>
 8001c88:	ec53 2b10 	vmov	r2, r3, d0
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f7fe fcb2 	bl	80005f8 <__aeabi_dmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4625      	mov	r5, r4
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <motor_control+0x318>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc51 	bl	8000548 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	ec43 2b10 	vmov	d0, r2, r3
 8001cae:	f00a fed7 	bl	800ca60 <sin>
 8001cb2:	ec59 8b10 	vmov	r8, r9, d0
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <motor_control+0x31c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ec43 2b10 	vmov	d0, r2, r3
 8001cc8:	f00a fe86 	bl	800c9d8 <cos>
 8001ccc:	ec53 2b10 	vmov	r2, r3, d0
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe fc90 	bl	80005f8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fad2 	bl	8000288 <__aeabi_dsub>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4621      	mov	r1, r4
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f7fe fef2 	bl	8000adc <__aeabi_dcmplt>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <motor_control+0x246>
		ma.angle_error = (-1) * ma.angle_error;
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <motor_control+0x31c>)
 8001d00:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d04:	eef1 7a67 	vneg.f32	s15, s15
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <motor_control+0x31c>)
 8001d0a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	ma.speed_error = ma.target_speed - lpme1Data.gyr[1];
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <motor_control+0x31c>)
 8001d10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <motor_control+0x318>)
 8001d16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <motor_control+0x31c>)
 8001d20:	edc3 7a06 	vstr	s15, [r3, #24]

#ifdef ENABLE_FB
	tmp_output = torque_coef * (ma.angle_error * K_angle + ma.speed_error * K_omega);
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <motor_control+0x31c>)
 8001d26:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <motor_control+0x320>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <motor_control+0x31c>)
 8001d36:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <motor_control+0x324>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <motor_control+0x328>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <motor_control+0x32c>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]
	if(tmp_output > max_current){
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <motor_control+0x32c>)
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <motor_control+0x330>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	dd04      	ble.n	8001d78 <motor_control+0x2b0>
		tmp_output = max_current;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <motor_control+0x330>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <motor_control+0x32c>)
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e014      	b.n	8001da2 <motor_control+0x2da>
	} else if(tmp_output < (-1)*max_current){
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <motor_control+0x330>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	eeb1 7a67 	vneg.f32	s14, s15
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <motor_control+0x32c>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	dd07      	ble.n	8001da2 <motor_control+0x2da>
		tmp_output = (-1)*max_current;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <motor_control+0x330>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eef1 7a67 	vneg.f32	s15, s15
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <motor_control+0x32c>)
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
	}
	rw_motor.target_current = tmp_output;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <motor_control+0x32c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <motor_control+0x314>)
 8001da8:	6013      	str	r3, [r2, #0]
#endif

#ifdef CURRENT_MODE
	if(rw_motor.target_current < 0){
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <motor_control+0x314>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d520      	bpl.n	8001dfc <motor_control+0x334>
		rw_motor.direction = 1;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <motor_control+0x314>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	745a      	strb	r2, [r3, #17]
 8001dc0:	e01f      	b.n	8001e02 <motor_control+0x33a>
 8001dc2:	bf00      	nop
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	c083126f 	.word	0xc083126f
 8001dcc:	c00921ca 	.word	0xc00921ca
 8001dd0:	c083126f 	.word	0xc083126f
 8001dd4:	400921ca 	.word	0x400921ca
 8001dd8:	2000022c 	.word	0x2000022c
 8001ddc:	200003ac 	.word	0x200003ac
 8001de0:	20000320 	.word	0x20000320
 8001de4:	20000374 	.word	0x20000374
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000214 	.word	0x20000214
 8001df8:	2000000c 	.word	0x2000000c
	} else {
		rw_motor.direction = 0;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <motor_control+0x39c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	745a      	strb	r2, [r3, #17]
	}
	rw_motor.pwm_pulse = bldc_current_to_pulse(rw_motor.target_current);
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <motor_control+0x39c>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	f7ff f8a4 	bl	8000f58 <bldc_current_to_pulse>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <motor_control+0x39c>)
 8001e16:	825a      	strh	r2, [r3, #18]
		rw_motor.direction = 0;
	}
	rw_motor.pwm_pulse = bldc_speed_to_pulse(rw_motor.target_speed);
#endif

	if(rw_motor.enable==1){
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <motor_control+0x39c>)
 8001e1a:	7c1b      	ldrb	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <motor_control+0x364>
		HAL_GPIO_WritePin(rw_enable_GPIO_Port, rw_enable_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2102      	movs	r1, #2
 8001e24:	4810      	ldr	r0, [pc, #64]	; (8001e68 <motor_control+0x3a0>)
 8001e26:	f002 f9d3 	bl	80041d0 <HAL_GPIO_WritePin>
 8001e2a:	e004      	b.n	8001e36 <motor_control+0x36e>
	} else {
		HAL_GPIO_WritePin(rw_enable_GPIO_Port, rw_enable_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2102      	movs	r1, #2
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <motor_control+0x3a0>)
 8001e32:	f002 f9cd 	bl	80041d0 <HAL_GPIO_WritePin>
	}

	if(rw_motor.direction==1){
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <motor_control+0x39c>)
 8001e38:	7c5b      	ldrb	r3, [r3, #17]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <motor_control+0x382>
		HAL_GPIO_WritePin(GPIOB, rw_direction_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2120      	movs	r1, #32
 8001e42:	480a      	ldr	r0, [pc, #40]	; (8001e6c <motor_control+0x3a4>)
 8001e44:	f002 f9c4 	bl	80041d0 <HAL_GPIO_WritePin>
 8001e48:	e004      	b.n	8001e54 <motor_control+0x38c>
	} else {
		HAL_GPIO_WritePin(GPIOB, rw_direction_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <motor_control+0x3a4>)
 8001e50:	f002 f9be 	bl	80041d0 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rw_motor.pwm_pulse);
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <motor_control+0x39c>)
 8001e56:	8a5a      	ldrh	r2, [r3, #18]
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <motor_control+0x3a8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e5e:	bf00      	nop
 8001e60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e64:	200003ac 	.word	0x200003ac
 8001e68:	48001400 	.word	0x48001400
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	20000458 	.word	0x20000458
 8001e74:	00000000 	.word	0x00000000

08001e78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a64      	ldr	r2, [pc, #400]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	f040 80b7 	bne.w	8001ffc <HAL_TIM_PeriodElapsedCallback+0x184>
		/* IMUセンサデータの更新 */
		if(lpme1_get_timestamp(&lpme1Data.time)==LPME1_OK) HAL_GPIO_TogglePin(GPIOB, user_led1_Pin);	//For instant visual debug
 8001e8e:	4863      	ldr	r0, [pc, #396]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001e90:	f7ff f9c2 	bl	8001218 <lpme1_get_timestamp>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d103      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4860      	ldr	r0, [pc, #384]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001e9e:	f002 f9af 	bl	8004200 <HAL_GPIO_TogglePin>
		//lpme1_get_acc(lpme1Data.acc);
		lpme1_get_gyr(lpme1Data.gyr);
 8001ea2:	4860      	ldr	r0, [pc, #384]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ea4:	f7ff f9d7 	bl	8001256 <lpme1_get_gyr>
		//lpme1_get_mag(lpme1Data.mag);
		lpme1_get_euler(lpme1Data.euler);
 8001ea8:	485f      	ldr	r0, [pc, #380]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001eaa:	f7ff f9fe 	bl	80012aa <lpme1_get_euler>
		//lpme1_get_quat(lpme1Data.quat);

		/* モータ制御値の計算，モータ関連ピンの制御 */
		motor_control();
 8001eae:	f7ff fe0b 	bl	8001ac8 <motor_control>

		if(logger_flag==1){
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d159      	bne.n	8001f6e <HAL_TIM_PeriodElapsedCallback+0xf6>
			uart_key = 2;
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	701a      	strb	r2, [r3, #0]
			//Time [ms], ma.angle_error [*10^-2 deg], ma.speed_error [*10^-2 deg/s], actual_current [*10^-2 mA], actual_speed [rpm]
			printf("%d,%d,%d,%d,%d\r\n", (int)(1000 * lpme1Data.time), (int)(18000 * ma.angle_error / PI), (int)(18000 * ma.speed_error / PI), (int)(100000 * rw_motor.actual_current), (int)(rw_motor.actual_speed));
 8001ec0:	4b56      	ldr	r3, [pc, #344]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002034 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ece:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001ed2:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001ed4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ed8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800203c <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee0:	ee17 0a90 	vmov	r0, s15
 8001ee4:	f7fe fb30 	bl	8000548 <__aeabi_f2d>
 8001ee8:	a349      	add	r3, pc, #292	; (adr r3, 8002010 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe fcad 	bl	800084c <__aeabi_ddiv>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4621      	mov	r1, r4
 8001efa:	f7fe fe2d 	bl	8000b58 <__aeabi_d2iz>
 8001efe:	4605      	mov	r5, r0
 8001f00:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001f02:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f06:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800203c <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0e:	ee17 0a90 	vmov	r0, s15
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	a33e      	add	r3, pc, #248	; (adr r3, 8002010 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fc96 	bl	800084c <__aeabi_ddiv>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	4618      	mov	r0, r3
 8001f26:	4621      	mov	r1, r4
 8001f28:	f7fe fe16 	bl	8000b58 <__aeabi_d2iz>
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f34:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002044 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 2a90 	vmov	r2, s15
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001f46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	460b      	mov	r3, r1
 8001f58:	462a      	mov	r2, r5
 8001f5a:	ee18 1a10 	vmov	r1, s16
 8001f5e:	483a      	ldr	r0, [pc, #232]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001f60:	f007 f88c 	bl	800907c <iprintf>
			//printf("%d,%d,%d\r\n", (int)(1000 * lpme1Data.time), (int)(18000 * lpme1Data.euler[2] / PI), (int)(18000 * lpme1Data.gyr[1] / PI));
			counter++;
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001f6c:	6013      	str	r3, [r2, #0]
		}
		if(counter>counter_th){
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dd02      	ble.n	8001f80 <HAL_TIM_PeriodElapsedCallback+0x108>
			logger_flag=0;
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
		 * とみなし，その瞬間の角度を目標として制御する．
		 * 実際の安定角度と機体角速度が最大になる瞬間には差が存在するため，
		 * ベストな推定法ではない
		 */

		if(speed_observation_flag==1){
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d139      	bne.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x184>
			old_speed = now_speed;
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a33      	ldr	r2, [pc, #204]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001f8e:	6013      	str	r3, [r2, #0]
			now_speed = lpme1Data.gyr[1];
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4a30      	ldr	r2, [pc, #192]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001f96:	6013      	str	r3, [r2, #0]
			if(fabs(now_speed) < fabs(old_speed)){
 8001f98:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	eef0 7ae7 	vabs.f32	s15, s15
 8001fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d506      	bpl.n	8001fc4 <HAL_TIM_PeriodElapsedCallback+0x14c>
				observation_counter++;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e002      	b.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x152>
			} else {
				observation_counter=0;
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
			}
			if(observation_counter>5){
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d914      	bls.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x184>
				ma.angle_base = lpme1Data.euler[2];
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fd8:	6113      	str	r3, [r2, #16]
				ma.target_angle = ma.angle_base;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fe0:	6013      	str	r3, [r2, #0]
				ma.target_speed = 0;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
				rw_motor.enable = 1;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	741a      	strb	r2, [r3, #16]
				speed_observation_flag=0;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
				logger_flag = 1;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001ffe:	f004 f947 	bl	8006290 <HAL_TIM_Base_Start_IT>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	ecbd 8b02 	vpop	{d8}
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	c083126f 	.word	0xc083126f
 8002014:	400921ca 	.word	0x400921ca
 8002018:	200004a4 	.word	0x200004a4
 800201c:	20000320 	.word	0x20000320
 8002020:	48000400 	.word	0x48000400
 8002024:	20000330 	.word	0x20000330
 8002028:	20000348 	.word	0x20000348
 800202c:	20000224 	.word	0x20000224
 8002030:	20000014 	.word	0x20000014
 8002034:	447a0000 	.word	0x447a0000
 8002038:	20000374 	.word	0x20000374
 800203c:	468ca000 	.word	0x468ca000
 8002040:	200003ac 	.word	0x200003ac
 8002044:	47c35000 	.word	0x47c35000
 8002048:	0800e234 	.word	0x0800e234
 800204c:	20000228 	.word	0x20000228
 8002050:	20000010 	.word	0x20000010
 8002054:	20000218 	.word	0x20000218
 8002058:	2000021c 	.word	0x2000021c
 800205c:	20000220 	.word	0x20000220
 8002060:	20000219 	.word	0x20000219

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_TogglePin(GPIOB, user_led1_Pin);
 8002068:	2108      	movs	r1, #8
 800206a:	4802      	ldr	r0, [pc, #8]	; (8002074 <Error_Handler+0x10>)
 800206c:	f002 f8c8 	bl	8004200 <HAL_GPIO_TogglePin>
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	48000400 	.word	0x48000400

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_MspInit+0x44>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_MspInit+0x44>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_MspInit+0x44>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_MspInit+0x44>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_MspInit+0x44>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_MspInit+0x44>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 fc3a 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <DMA1_Channel1_IRQHandler+0x10>)
 8002122:	f001 fdf1 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000290 	.word	0x20000290

08002130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <TIM2_IRQHandler+0x10>)
 8002136:	f004 fa55 	bl	80065e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004a4 	.word	0x200004a4

08002144 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <TIM3_IRQHandler+0x10>)
 800214a:	f004 fa4b 	bl	80065e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000040c 	.word	0x2000040c

08002158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USART1_IRQHandler+0x10>)
 800215e:	f005 fbe9 	bl	8007934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200004f0 	.word	0x200004f0

0800216c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00a      	b.n	8002194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800217e:	f3af 8000 	nop.w
 8002182:	4601      	mov	r1, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf0      	blt.n	800217e <_read+0x12>
	}

return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f9c7 	bl	8001554 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x12>
	}
	return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_close>:

int _close(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	605a      	str	r2, [r3, #4]
	return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_isatty>:

int _isatty(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return 1;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
	return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f006 f884 	bl	8008384 <__errno>
 800227c:	4602      	mov	r2, r0
 800227e:	230c      	movs	r3, #12
 8002280:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20003000 	.word	0x20003000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000234 	.word	0x20000234
 80022b0:	20000600 	.word	0x20000600

080022b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09a      	sub	sp, #104	; 0x68
 80022dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
 8002308:	615a      	str	r2, [r3, #20]
 800230a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	222c      	movs	r2, #44	; 0x2c
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f006 f86b 	bl	80083ee <memset>

  htim1.Instance = TIM1;
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <MX_TIM1_Init+0x150>)
 800231a:	4a44      	ldr	r2, [pc, #272]	; (800242c <MX_TIM1_Init+0x154>)
 800231c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <MX_TIM1_Init+0x150>)
 8002320:	223f      	movs	r2, #63	; 0x3f
 8002322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b40      	ldr	r3, [pc, #256]	; (8002428 <MX_TIM1_Init+0x150>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800232a:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <MX_TIM1_Init+0x150>)
 800232c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <MX_TIM1_Init+0x150>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <MX_TIM1_Init+0x150>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <MX_TIM1_Init+0x150>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002344:	4838      	ldr	r0, [pc, #224]	; (8002428 <MX_TIM1_Init+0x150>)
 8002346:	f003 ff4b 	bl	80061e0 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002350:	f7ff fe88 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800235e:	4619      	mov	r1, r3
 8002360:	4831      	ldr	r0, [pc, #196]	; (8002428 <MX_TIM1_Init+0x150>)
 8002362:	f004 fb6f 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800236c:	f7ff fe7a 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002370:	482d      	ldr	r0, [pc, #180]	; (8002428 <MX_TIM1_Init+0x150>)
 8002372:	f003 ffe9 	bl	8006348 <HAL_TIM_PWM_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800237c:	f7ff fe72 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800238c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002390:	4619      	mov	r1, r3
 8002392:	4825      	ldr	r0, [pc, #148]	; (8002428 <MX_TIM1_Init+0x150>)
 8002394:	f005 f816 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800239e:	f7ff fe61 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	2360      	movs	r3, #96	; 0x60
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c2:	2200      	movs	r2, #0
 80023c4:	4619      	mov	r1, r3
 80023c6:	4818      	ldr	r0, [pc, #96]	; (8002428 <MX_TIM1_Init+0x150>)
 80023c8:	f004 fa2c 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023d2:	f7ff fe47 	bl	8002064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_TIM1_Init+0x150>)
 800240c:	f005 f848 	bl	80074a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002416:	f7ff fe25 	bl	8002064 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <MX_TIM1_Init+0x150>)
 800241c:	f000 f932 	bl	8002684 <HAL_TIM_MspPostInit>

}
 8002420:	bf00      	nop
 8002422:	3768      	adds	r7, #104	; 0x68
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000458 	.word	0x20000458
 800242c:	40012c00 	.word	0x40012c00

08002430 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <MX_TIM2_Init+0x94>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1280000-1;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002464:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_TIM2_Init+0x94>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002474:	4813      	ldr	r0, [pc, #76]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002476:	f003 feb3 	bl	80061e0 <HAL_TIM_Base_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002480:	f7ff fdf0 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <MX_TIM2_Init+0x94>)
 8002492:	f004 fad7 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800249c:	f7ff fde2 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_TIM2_Init+0x94>)
 80024ae:	f004 ff89 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024b8:	f7ff fdd4 	bl	8002064 <Error_Handler>
  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200004a4 	.word	0x200004a4
 80024c8:	001387ff 	.word	0x001387ff

080024cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <MX_TIM3_Init+0x94>)
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <MX_TIM3_Init+0x98>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_TIM3_Init+0x94>)
 80024f2:	223f      	movs	r2, #63	; 0x3f
 80024f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_TIM3_Init+0x94>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_TIM3_Init+0x94>)
 80024fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <MX_TIM3_Init+0x94>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_TIM3_Init+0x94>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002510:	4813      	ldr	r0, [pc, #76]	; (8002560 <MX_TIM3_Init+0x94>)
 8002512:	f003 fe65 	bl	80061e0 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800251c:	f7ff fda2 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <MX_TIM3_Init+0x94>)
 800252e:	f004 fa89 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002538:	f7ff fd94 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_TIM3_Init+0x94>)
 800254a:	f004 ff3b 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002554:	f7ff fd86 	bl	8002064 <Error_Handler>
  }

}
 8002558:	bf00      	nop
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000040c 	.word	0x2000040c
 8002564:	40000400 	.word	0x40000400

08002568 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_TIM17_Init+0x44>)
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <MX_TIM17_Init+0x48>)
 8002570:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_TIM17_Init+0x44>)
 8002574:	223f      	movs	r2, #63	; 0x3f
 8002576:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_TIM17_Init+0x44>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_TIM17_Init+0x44>)
 8002580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002584:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_TIM17_Init+0x44>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <MX_TIM17_Init+0x44>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_TIM17_Init+0x44>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <MX_TIM17_Init+0x44>)
 800259a:	f003 fe21 	bl	80061e0 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80025a4:	f7ff fd5e 	bl	8002064 <Error_Handler>
  }

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200003c0 	.word	0x200003c0
 80025b0:	40014800 	.word	0x40014800

080025b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <HAL_TIM_Base_MspInit+0xc0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d0:	6193      	str	r3, [r2, #24]
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80025de:	e044      	b.n	800266a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d114      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201c      	movs	r0, #28
 8002608:	f001 fa27 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	201c      	movs	r0, #28
 800260e:	f001 fa40 	bl	8003a92 <HAL_NVIC_EnableIRQ>
}
 8002612:	e02a      	b.n	800266a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIM_Base_MspInit+0xc8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d114      	bne.n	8002648 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	201d      	movs	r0, #29
 800263c:	f001 fa0d 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002640:	201d      	movs	r0, #29
 8002642:	f001 fa26 	bl	8003a92 <HAL_NVIC_EnableIRQ>
}
 8002646:	e010      	b.n	800266a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM17)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_TIM_Base_MspInit+0xcc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10b      	bne.n	800266a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265c:	6193      	str	r3, [r2, #24]
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_TIM_Base_MspInit+0xc4>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40000400 	.word	0x40000400
 8002680:	40014800 	.word	0x40014800

08002684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_TIM_MspPostInit+0x68>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11d      	bne.n	80026e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	6153      	str	r3, [r2, #20]
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = rw_pwm_Pin;
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026d0:	2306      	movs	r3, #6
 80026d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(rw_pwm_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026de:	f001 fc05 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40021000 	.word	0x40021000

080026f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_USART1_UART_Init+0x58>)
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <MX_USART1_UART_Init+0x5c>)
 80026fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_USART1_UART_Init+0x58>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART1_UART_Init+0x58>)
 800271a:	220c      	movs	r2, #12
 800271c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART1_UART_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART1_UART_Init+0x58>)
 8002738:	f004 ff48 	bl	80075cc <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002742:	f7ff fc8f 	bl	8002064 <Error_Handler>
  }

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200004f0 	.word	0x200004f0
 8002750:	40013800 	.word	0x40013800

08002754 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <MX_USART2_UART_Init+0x58>)
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <MX_USART2_UART_Init+0x5c>)
 800275c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002760:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <MX_USART2_UART_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART2_UART_Init+0x58>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART2_UART_Init+0x58>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_USART2_UART_Init+0x58>)
 8002798:	f004 ff18 	bl	80075cc <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027a2:	f7ff fc5f 	bl	8002064 <Error_Handler>
  }

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000574 	.word	0x20000574
 80027b0:	40004400 	.word	0x40004400

080027b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <HAL_UART_MspInit+0xec>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d132      	bne.n	800283c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	6153      	str	r3, [r2, #20]
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002806:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002818:	2307      	movs	r3, #7
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002826:	f001 fb61 	bl	8003eec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2025      	movs	r0, #37	; 0x25
 8002830:	f001 f913 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002834:	2025      	movs	r0, #37	; 0x25
 8002836:	f001 f92c 	bl	8003a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800283a:	e02d      	b.n	8002898 <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_UART_MspInit+0xf4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d128      	bne.n	8002898 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_UART_MspInit+0xf0>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002876:	230c      	movs	r3, #12
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002886:	2307      	movs	r3, #7
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f001 fb2a 	bl	8003eec <HAL_GPIO_Init>
}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	; 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40004400 	.word	0x40004400

080028ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <LoopForever+0xe>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <LoopForever+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028d6:	f7ff fced 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028da:	f005 fd59 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028de:	f7fe fe5d 	bl	800159c <main>

080028e2 <LoopForever>:

LoopForever:
    b LoopForever
 80028e2:	e7fe      	b.n	80028e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80028f0:	0800e788 	.word	0x0800e788
  ldr r2, =_sbss
 80028f4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80028f8:	20000600 	.word	0x20000600

080028fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_2_IRQHandler>
	...

08002900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_Init+0x28>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_Init+0x28>)
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002910:	2003      	movs	r0, #3
 8002912:	f001 f897 	bl	8003a44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f808 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800291c:	f7ff fbac 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_InitTick+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x58>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f001 f8b3 	bl	8003ab6 <HAL_SYSTICK_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00e      	b.n	8002978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d80a      	bhi.n	8002976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002968:	f001 f877 	bl	8003a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <HAL_InitTick+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000018 	.word	0x20000018
 8002984:	20000020 	.word	0x20000020
 8002988:	2000001c 	.word	0x2000001c

0800298c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000020 	.word	0x20000020
 80029b0:	200005f8 	.word	0x200005f8

080029b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200005f8 	.word	0x200005f8

080029cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_Delay+0x40>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000020 	.word	0x20000020

08002a10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09a      	sub	sp, #104	; 0x68
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e172      	b.n	8002d52 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d176      	bne.n	8002b6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d152      	bne.n	8002b2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe f96f 	bl	8000d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13b      	bne.n	8002b2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fe81 	bl	80037bc <ADC_Disable>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d12f      	bne.n	8002b2c <HAL_ADC_Init+0xe0>
 8002acc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12b      	bne.n	8002b2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	f043 0202 	orr.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b08:	4b94      	ldr	r3, [pc, #592]	; (8002d5c <HAL_ADC_Init+0x310>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a94      	ldr	r2, [pc, #592]	; (8002d60 <HAL_ADC_Init+0x314>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9a      	lsrs	r2, r3, #18
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b48:	d110      	bne.n	8002b6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f023 0312 	bic.w	r3, r3, #18
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 80df 	bne.w	8002d38 <HAL_ADC_Init+0x2ec>
 8002b7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80da 	bne.w	8002d38 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80d2 	bne.w	8002d38 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_ADC_Init+0x318>)
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d102      	bne.n	8002bb8 <HAL_ADC_Init+0x16c>
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <HAL_ADC_Init+0x31c>)
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_Init+0x172>
 8002bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bbc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d108      	bne.n	8002bde <HAL_ADC_Init+0x192>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_Init+0x192>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_Init+0x194>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11c      	bne.n	8002c1e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d010      	beq.n	8002c0c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_ADC_Init+0x1ba>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x1ba>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_ADC_Init+0x1bc>
 8002c06:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7e5b      	ldrb	r3, [r3, #25]
 8002c22:	035b      	lsls	r3, r3, #13
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c28:	2a01      	cmp	r2, #1
 8002c2a:	d002      	beq.n	8002c32 <HAL_ADC_Init+0x1e6>
 8002c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c30:	e000      	b.n	8002c34 <HAL_ADC_Init+0x1e8>
 8002c32:	2200      	movs	r2, #0
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c44:	4313      	orrs	r3, r2
 8002c46:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11b      	bne.n	8002c8a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7e5b      	ldrb	r3, [r3, #25]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	045a      	lsls	r2, r3, #17
 8002c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6c:	e00d      	b.n	8002c8a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d007      	beq.n	8002ca2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d114      	bne.n	8002cda <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cbe:	f023 0302 	bic.w	r3, r3, #2
 8002cc2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7e1b      	ldrb	r3, [r3, #24]
 8002cc8:	039a      	lsls	r2, r3, #14
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_ADC_Init+0x320>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002cea:	430b      	orrs	r3, r1
 8002cec:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10c      	bne.n	8002d10 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f023 010f 	bic.w	r1, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	e007      	b.n	8002d20 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020f 	bic.w	r2, r2, #15
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
 8002d36:	e00a      	b.n	8002d4e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f023 0312 	bic.w	r3, r3, #18
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3768      	adds	r7, #104	; 0x68
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000018 	.word	0x20000018
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	50000300 	.word	0x50000300
 8002d68:	50000100 	.word	0x50000100
 8002d6c:	fff0c007 	.word	0xfff0c007

08002d70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80b9 	bne.w	8002f02 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x2e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0b4      	b.n	8002f08 <HAL_ADC_Start_DMA+0x198>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002da6:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <HAL_ADC_Start_DMA+0x1a0>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80a0 	bne.w	8002ef4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fca3 	bl	8003700 <ADC_Enable>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8092 	bne.w	8002eea <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002dda:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_ADC_Start_DMA+0x1a0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_Start_DMA+0x80>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dee:	d115      	bne.n	8002e1c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d027      	beq.n	8002e5a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e1a:	e01e      	b.n	8002e5a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e30:	d004      	beq.n	8002e3c <HAL_ADC_Start_DMA+0xcc>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <HAL_ADC_Start_DMA+0x1a4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10e      	bne.n	8002e5a <HAL_ADC_Start_DMA+0xea>
 8002e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f023 0206 	bic.w	r2, r3, #6
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_ADC_Start_DMA+0x1ac>)
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <HAL_ADC_Start_DMA+0x1b0>)
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	221c      	movs	r2, #28
 8002ea2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0210 	orr.w	r2, r2, #16
 8002eb2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3340      	adds	r3, #64	; 0x40
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f000 fe42 	bl	8003b5c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0204 	orr.w	r2, r2, #4
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e00d      	b.n	8002f06 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ef2:	e008      	b.n	8002f06 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f00:	e001      	b.n	8002f06 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	50000300 	.word	0x50000300
 8002f14:	50000100 	.word	0x50000100
 8002f18:	08003635 	.word	0x08003635
 8002f1c:	080036af 	.word	0x080036af
 8002f20:	080036cb 	.word	0x080036cb

08002f24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b09b      	sub	sp, #108	; 0x6c
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x22>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e2a5      	b.n	8003492 <HAL_ADC_ConfigChannel+0x56e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 8289 	bne.w	8003470 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d81c      	bhi.n	8002fa0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	231f      	movs	r3, #31
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4019      	ands	r1, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa00 f203 	lsl.w	r2, r0, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9e:	e063      	b.n	8003068 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d81e      	bhi.n	8002fe6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	3b1e      	subs	r3, #30
 8002fbc:	221f      	movs	r2, #31
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	4019      	ands	r1, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	3b1e      	subs	r3, #30
 8002fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8002fe4:	e040      	b.n	8003068 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b0e      	cmp	r3, #14
 8002fec:	d81e      	bhi.n	800302c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	3b3c      	subs	r3, #60	; 0x3c
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	4019      	ands	r1, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	3b3c      	subs	r3, #60	; 0x3c
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
 800302a:	e01d      	b.n	8003068 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	3b5a      	subs	r3, #90	; 0x5a
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	4019      	ands	r1, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	3b5a      	subs	r3, #90	; 0x5a
 800305c:	fa00 f203 	lsl.w	r2, r0, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 80e5 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b09      	cmp	r3, #9
 800307e:	d91c      	bls.n	80030ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	3b1e      	subs	r3, #30
 8003092:	2207      	movs	r2, #7
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	4019      	ands	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6898      	ldr	r0, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	3b1e      	subs	r3, #30
 80030ac:	fa00 f203 	lsl.w	r2, r0, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
 80030b8:	e019      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6959      	ldr	r1, [r3, #20]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	2207      	movs	r2, #7
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	4019      	ands	r1, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6898      	ldr	r0, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	3b01      	subs	r3, #1
 800310c:	2b03      	cmp	r3, #3
 800310e:	d84f      	bhi.n	80031b0 <HAL_ADC_ConfigChannel+0x28c>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_ADC_ConfigChannel+0x1f4>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003129 	.word	0x08003129
 800311c:	0800314b 	.word	0x0800314b
 8003120:	0800316d 	.word	0x0800316d
 8003124:	0800318f 	.word	0x0800318f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800312e:	4b9e      	ldr	r3, [pc, #632]	; (80033a8 <HAL_ADC_ConfigChannel+0x484>)
 8003130:	4013      	ands	r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	0691      	lsls	r1, r2, #26
 8003138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800313a:	430a      	orrs	r2, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003148:	e07e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003150:	4b95      	ldr	r3, [pc, #596]	; (80033a8 <HAL_ADC_ConfigChannel+0x484>)
 8003152:	4013      	ands	r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	0691      	lsls	r1, r2, #26
 800315a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315c:	430a      	orrs	r2, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003168:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800316a:	e06d      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003172:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <HAL_ADC_ConfigChannel+0x484>)
 8003174:	4013      	ands	r3, r2
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	0691      	lsls	r1, r2, #26
 800317c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800317e:	430a      	orrs	r2, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800318a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800318c:	e05c      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003194:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_ADC_ConfigChannel+0x484>)
 8003196:	4013      	ands	r3, r2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	0691      	lsls	r1, r2, #26
 800319e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031a0:	430a      	orrs	r2, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031ac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031ae:	e04b      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	069b      	lsls	r3, r3, #26
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d107      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	069b      	lsls	r3, r3, #26
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d107      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800321a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	429a      	cmp	r2, r3
 800322e:	d10a      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800323e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003240:	e001      	b.n	8003246 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003242:	bf00      	nop
 8003244:	e000      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003246:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x344>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x344>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x346>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 810b 	bne.w	8003486 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00f      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003296:	e049      	b.n	800332c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d91c      	bls.n	80032f4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6999      	ldr	r1, [r3, #24]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	3b1b      	subs	r3, #27
 80032cc:	2207      	movs	r2, #7
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	4019      	ands	r1, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6898      	ldr	r0, [r3, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	3b1b      	subs	r3, #27
 80032e6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	e01b      	b.n	800332c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6959      	ldr	r1, [r3, #20]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	2207      	movs	r2, #7
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	4019      	ands	r1, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6898      	ldr	r0, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	fa00 f203 	lsl.w	r2, r0, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <HAL_ADC_ConfigChannel+0x488>)
 800332e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b10      	cmp	r3, #16
 8003336:	d105      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003348:	2b11      	cmp	r3, #17
 800334a:	d105      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800335c:	2b12      	cmp	r3, #18
 800335e:	f040 8092 	bne.w	8003486 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 808b 	bne.w	8003486 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003378:	d102      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x45c>
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_ADC_ConfigChannel+0x48c>)
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e002      	b.n	8003386 <HAL_ADC_ConfigChannel+0x462>
 8003380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003384:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10f      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x490>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x490>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x492>
 80033a6:	bf00      	nop
 80033a8:	83fff000 	.word	0x83fff000
 80033ac:	50000300 	.word	0x50000300
 80033b0:	50000100 	.word	0x50000100
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d150      	bne.n	800345c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x4b8>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x4b8>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_ADC_ConfigChannel+0x4ba>
 80033dc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d13c      	bne.n	800345c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d11d      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x502>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f2:	d118      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80033f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_ADC_ConfigChannel+0x57c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_ADC_ConfigChannel+0x580>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0c9a      	lsrs	r2, r3, #18
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003416:	e002      	b.n	800341e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003424:	e02e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b11      	cmp	r3, #17
 800342c:	d10b      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x522>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003436:	d106      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003444:	e01e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b12      	cmp	r3, #18
 800344c:	d11a      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003458:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800345a:	e013      	b.n	8003484 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800346e:	e00a      	b.n	8003486 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003482:	e000      	b.n	8003486 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003484:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800348e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003492:	4618      	mov	r0, r3
 8003494:	376c      	adds	r7, #108	; 0x6c
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000018 	.word	0x20000018
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b099      	sub	sp, #100	; 0x64
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c0:	d102      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80034c2:	4b5a      	ldr	r3, [pc, #360]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	e002      	b.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80034c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034cc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0a2      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e09b      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d17f      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d179      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003508:	4b49      	ldr	r3, [pc, #292]	; (8003630 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800350a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d040      	beq.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003526:	035b      	lsls	r3, r3, #13
 8003528:	430b      	orrs	r3, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d108      	bne.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d15c      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003572:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003574:	2b00      	cmp	r3, #0
 8003576:	d14b      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003580:	f023 030f 	bic.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	6811      	ldr	r1, [r2, #0]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	430a      	orrs	r2, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003592:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003594:	e03c      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d123      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80035e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d112      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80035ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035fa:	e009      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003610:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800361e:	4618      	mov	r0, r3
 8003620:	3764      	adds	r7, #100	; 0x64
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	50000100 	.word	0x50000100
 8003630:	50000300 	.word	0x50000300

08003634 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d126      	bne.n	800369c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003664:	2b00      	cmp	r3, #0
 8003666:	d115      	bne.n	8003694 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff f9bb 	bl	8002a10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800369a:	e004      	b.n	80036a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff f9b1 	bl	8002a24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff f9a1 	bl	8002a38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d108      	bne.n	800372c <ADC_Enable+0x2c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <ADC_Enable+0x2c>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <ADC_Enable+0x2e>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d13c      	bne.n	80037ac <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <ADC_Enable+0xb8>)
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e028      	b.n	80037ae <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800376c:	f7ff f922 	bl	80029b4 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003772:	e014      	b.n	800379e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003774:	f7ff f91e 	bl	80029b4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d90d      	bls.n	800379e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d1e3      	bne.n	8003774 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	8000003f 	.word	0x8000003f

080037bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d108      	bne.n	80037e8 <ADC_Disable+0x2c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <ADC_Disable+0x2c>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <ADC_Disable+0x2e>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030d 	and.w	r3, r3, #13
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10f      	bne.n	800381c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0202 	orr.w	r2, r2, #2
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2203      	movs	r2, #3
 8003812:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003814:	f7ff f8ce 	bl	80029b4 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800381a:	e022      	b.n	8003862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0210 	orr.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e01c      	b.n	8003872 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003838:	f7ff f8bc 	bl	80029b4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d90d      	bls.n	8003862 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d0e3      	beq.n	8003838 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039dc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <__NVIC_SystemReset+0x20>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <__NVIC_SystemReset+0x20>)
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_SystemReset+0x24>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60cb      	str	r3, [r1, #12]
 80039f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <__NVIC_SystemReset+0x1c>
 80039f8:	e000ed00 	.word	0xe000ed00
 80039fc:	05fa0004 	.word	0x05fa0004

08003a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a10:	d301      	bcc.n	8003a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <SysTick_Config+0x40>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1e:	210f      	movs	r1, #15
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a24:	f7ff ff7a 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <SysTick_Config+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SysTick_Config+0x40>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010

08003a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff15 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6c:	f7ff ff2a 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff7a 	bl	8003970 <NVIC_EncodePriority>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff49 	bl	800391c <__NVIC_SetPriority>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff1d 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003ab2:	f7ff ff91 	bl	80039d8 <__NVIC_SystemReset>

08003ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff9e 	bl	8003a00 <SysTick_Config>
 8003ac4:	4603      	mov	r3, r0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e037      	b.n	8003b54 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003afa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003afe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9b8 	bl	8003eac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}  
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Start_IT+0x20>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e04a      	b.n	8003c12 <HAL_DMA_Start_IT+0xb6>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d13a      	bne.n	8003c04 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f94b 	bl	8003e4e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 020e 	orr.w	r2, r2, #14
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e00f      	b.n	8003bf2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 020a 	orr.w	r2, r2, #10
 8003be0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e005      	b.n	8003c10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d008      	beq.n	8003c3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e020      	b.n	8003c80 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 020e 	bic.w	r2, r2, #14
 8003c4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d005      	beq.n	8003cae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e027      	b.n	8003cfe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 020e 	bic.w	r2, r2, #14
 8003cbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
    } 
  }
  return status;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2204      	movs	r2, #4
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d024      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x72>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01f      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2104      	movs	r1, #4
 8003d62:	fa01 f202 	lsl.w	r2, r1, r2
 8003d66:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d06a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d78:	e065      	b.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2202      	movs	r2, #2
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02c      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xdc>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d027      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 020a 	bic.w	r2, r2, #10
 8003db0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d035      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003de2:	e030      	b.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2208      	movs	r2, #8
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d028      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d023      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 020e 	bic.w	r2, r2, #14
 8003e0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	2101      	movs	r1, #1
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
    }
  }
}  
 8003e44:	e7ff      	b.n	8003e46 <HAL_DMA_IRQHandler+0x13e>
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d108      	bne.n	8003e8e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e8c:	e007      	b.n	8003e9e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	60da      	str	r2, [r3, #12]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <DMA_CalcBaseAndBitshift+0x34>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <DMA_CalcBaseAndBitshift+0x38>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x3c>)
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	bffdfff8 	.word	0xbffdfff8
 8003ee4:	cccccccd 	.word	0xcccccccd
 8003ee8:	40020000 	.word	0x40020000

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	e14e      	b.n	800419a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8140 	beq.w	8004194 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d00b      	beq.n	8003f34 <HAL_GPIO_Init+0x48>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d007      	beq.n	8003f34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f28:	2b11      	cmp	r3, #17
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b12      	cmp	r3, #18
 8003f32:	d130      	bne.n	8003f96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 0201 	and.w	r2, r3, #1
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4013      	ands	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0xea>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b12      	cmp	r3, #18
 8003fd4:	d123      	bne.n	800401e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 809a 	beq.w	8004194 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004078:	4a50      	ldr	r2, [pc, #320]	; (80041bc <HAL_GPIO_Init+0x2d0>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040a2:	d013      	beq.n	80040cc <HAL_GPIO_Init+0x1e0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a46      	ldr	r2, [pc, #280]	; (80041c0 <HAL_GPIO_Init+0x2d4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00d      	beq.n	80040c8 <HAL_GPIO_Init+0x1dc>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <HAL_GPIO_Init+0x2d8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <HAL_GPIO_Init+0x1d8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a44      	ldr	r2, [pc, #272]	; (80041c8 <HAL_GPIO_Init+0x2dc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_GPIO_Init+0x1d4>
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c0:	2305      	movs	r3, #5
 80040c2:	e004      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e002      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040cc:	2300      	movs	r3, #0
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	f002 0203 	and.w	r2, r2, #3
 80040d4:	0092      	lsls	r2, r2, #2
 80040d6:	4093      	lsls	r3, r2
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040de:	4937      	ldr	r1, [pc, #220]	; (80041bc <HAL_GPIO_Init+0x2d0>)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	3302      	adds	r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ec:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004110:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004140:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800418e:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f47f aea9 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40010000 	.word	0x40010000
 80041c0:	48000400 	.word	0x48000400
 80041c4:	48000800 	.word	0x48000800
 80041c8:	48000c00 	.word	0x48000c00
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
 80041dc:	4613      	mov	r3, r2
 80041de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e0:	787b      	ldrb	r3, [r7, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43d9      	mvns	r1, r3
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	400b      	ands	r3, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e081      	b.n	800434a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc ff98 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004284:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004294:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	e006      	b.n	80042bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d104      	bne.n	80042ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	ea42 0103 	orr.w	r1, r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69d9      	ldr	r1, [r3, #28]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	461a      	mov	r2, r3
 8004362:	4603      	mov	r3, r0
 8004364:	817b      	strh	r3, [r7, #10]
 8004366:	460b      	mov	r3, r1
 8004368:	813b      	strh	r3, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	f040 80f9 	bne.w	800456e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_I2C_Mem_Write+0x34>
 8004382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0ed      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Mem_Write+0x4e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e0e6      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe fb03 	bl	80029b4 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fac3 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d1      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2221      	movs	r2, #33	; 0x21
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f4:	88f8      	ldrh	r0, [r7, #6]
 80043f6:	893a      	ldrh	r2, [r7, #8]
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f9d3 	bl	80047b0 <I2C_RequestMemoryWrite>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0a9      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2bff      	cmp	r3, #255	; 0xff
 8004424:	d90e      	bls.n	8004444 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	b2da      	uxtb	r2, r3
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fba5 	bl	8004b8c <I2C_TransferConfig>
 8004442:	e00f      	b.n	8004464 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	b2da      	uxtb	r2, r3
 8004454:	8979      	ldrh	r1, [r7, #10]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fb94 	bl	8004b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 faad 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e07b      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d034      	beq.n	800451c <HAL_I2C_Mem_Write+0x1c8>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d130      	bne.n	800451c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fa3f 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e04d      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2bff      	cmp	r3, #255	; 0xff
 80044dc:	d90e      	bls.n	80044fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	22ff      	movs	r2, #255	; 0xff
 80044e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb49 	bl	8004b8c <I2C_TransferConfig>
 80044fa:	e00f      	b.n	800451c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	b2da      	uxtb	r2, r3
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	2300      	movs	r3, #0
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fb38 	bl	8004b8c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d19e      	bne.n	8004464 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa8c 	bl	8004a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e01a      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2220      	movs	r2, #32
 8004540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_I2C_Mem_Write+0x224>)
 800454e:	400b      	ands	r3, r1
 8004550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	fe00e800 	.word	0xfe00e800

0800457c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	817b      	strh	r3, [r7, #10]
 800458e:	460b      	mov	r3, r1
 8004590:	813b      	strh	r3, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	f040 80fd 	bne.w	800479e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x34>
 80045aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0f1      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Read+0x4e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0ea      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045d2:	f7fe f9ef 	bl	80029b4 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f9af 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0d5      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2222      	movs	r2, #34	; 0x22
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800461c:	88f8      	ldrh	r0, [r7, #6]
 800461e:	893a      	ldrh	r2, [r7, #8]
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4603      	mov	r3, r0
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f913 	bl	8004858 <I2C_RequestMemoryRead>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0ad      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2bff      	cmp	r3, #255	; 0xff
 800464c:	d90e      	bls.n	800466c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <HAL_I2C_Mem_Read+0x22c>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa91 	bl	8004b8c <I2C_TransferConfig>
 800466a:	e00f      	b.n	800468c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	8979      	ldrh	r1, [r7, #10]
 800467e:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <HAL_I2C_Mem_Read+0x22c>)
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa80 	bl	8004b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	2200      	movs	r2, #0
 8004694:	2104      	movs	r1, #4
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f956 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07c      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d034      	beq.n	800474c <HAL_I2C_Mem_Read+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d130      	bne.n	800474c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	2200      	movs	r2, #0
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f927 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04d      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2bff      	cmp	r3, #255	; 0xff
 800470c:	d90e      	bls.n	800472c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	b2da      	uxtb	r2, r3
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fa31 	bl	8004b8c <I2C_TransferConfig>
 800472a:	e00f      	b.n	800474c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8979      	ldrh	r1, [r7, #10]
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fa20 	bl	8004b8c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d19a      	bne.n	800468c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f974 	bl	8004a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e01a      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2220      	movs	r2, #32
 8004770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_I2C_Mem_Read+0x230>)
 800477e:	400b      	ands	r3, r1
 8004780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	80002400 	.word	0x80002400
 80047ac:	fe00e800 	.word	0xfe00e800

080047b0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	4b20      	ldr	r3, [pc, #128]	; (8004854 <I2C_RequestMemoryWrite+0xa4>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f9d7 	bl	8004b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8f0 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02c      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
 8004802:	e015      	b.n	8004830 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	b29b      	uxth	r3, r3
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f8d6 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e012      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2200      	movs	r2, #0
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f884 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	80002000 	.word	0x80002000

08004858 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	8979      	ldrh	r1, [r7, #10]
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <I2C_RequestMemoryRead+0xa4>)
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2300      	movs	r3, #0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f984 	bl	8004b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f89d 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e02c      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
 80048a8:	e015      	b.n	80048d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048aa:	893b      	ldrh	r3, [r7, #8]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f883 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e012      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2200      	movs	r2, #0
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f831 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	80002000 	.word	0x80002000

08004900 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d103      	bne.n	800491e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d007      	beq.n	800493c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	619a      	str	r2, [r3, #24]
  }
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004958:	e022      	b.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004960:	d01e      	beq.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fe f827 	bl	80029b4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d113      	bne.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	f043 0220 	orr.w	r2, r3, #32
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e00f      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d0cd      	beq.n	800495a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d4:	e02c      	b.n	8004a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f870 	bl	8004ac0 <I2C_IsAcknowledgeFailed>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e02a      	b.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f0:	d01e      	beq.n	8004a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fd ffdf 	bl	80029b4 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d113      	bne.n	8004a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d1cb      	bne.n	80049d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a54:	e028      	b.n	8004aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f830 	bl	8004ac0 <I2C_IsAcknowledgeFailed>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e026      	b.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fd ffa3 	bl	80029b4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d113      	bne.n	8004aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e007      	b.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d1cf      	bne.n	8004a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d151      	bne.n	8004b7e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ada:	e022      	b.n	8004b22 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae2:	d01e      	beq.n	8004b22 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae4:	f7fd ff66 	bl	80029b4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <I2C_IsAcknowledgeFailed+0x3a>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d113      	bne.n	8004b22 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e02e      	b.n	8004b80 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d1d5      	bne.n	8004adc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2210      	movs	r2, #16
 8004b36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fedd 	bl	8004900 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <I2C_IsAcknowledgeFailed+0xc8>)
 8004b52:	400b      	ands	r3, r1
 8004b54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f043 0204 	orr.w	r2, r3, #4
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	fe00e800 	.word	0xfe00e800

08004b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	0d5b      	lsrs	r3, r3, #21
 8004ba8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <I2C_TransferConfig+0x58>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	ea02 0103 	and.w	r1, r2, r3
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bbc:	7a7b      	ldrb	r3, [r7, #9]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	03ff63ff 	.word	0x03ff63ff

08004be8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d138      	bne.n	8004c70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e032      	b.n	8004c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d139      	bne.n	8004d08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e033      	b.n	8004d0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2224      	movs	r2, #36	; 0x24
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f000 bef4 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 816a 	beq.w	8005016 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d42:	4bb3      	ldr	r3, [pc, #716]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d00c      	beq.n	8004d68 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d4e:	4bb0      	ldr	r3, [pc, #704]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d159      	bne.n	8004e0e <HAL_RCC_OscConfig+0xf6>
 8004d5a:	4bad      	ldr	r3, [pc, #692]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d66:	d152      	bne.n	8004e0e <HAL_RCC_OscConfig+0xf6>
 8004d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d6c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <HAL_RCC_OscConfig+0x82>
 8004d94:	4b9e      	ldr	r3, [pc, #632]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0xae>
 8004d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d9e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004db6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004dc2:	4b93      	ldr	r3, [pc, #588]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004dce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004dd2:	fa92 f2a2 	rbit	r2, r2
 8004dd6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004dda:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004dde:	fab2 f282 	clz	r2, r2
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	f042 0220 	orr.w	r2, r2, #32
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f002 021f 	and.w	r2, r2, #31
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 810c 	beq.w	8005014 <HAL_RCC_OscConfig+0x2fc>
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 8106 	bne.w	8005014 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f000 be86 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x110>
 8004e1a:	4b7d      	ldr	r3, [pc, #500]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e030      	b.n	8004e8a <HAL_RCC_OscConfig+0x172>
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x134>
 8004e32:	4b77      	ldr	r3, [pc, #476]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a76      	ldr	r2, [pc, #472]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b74      	ldr	r3, [pc, #464]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a73      	ldr	r2, [pc, #460]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01e      	b.n	8004e8a <HAL_RCC_OscConfig+0x172>
 8004e4c:	1d3b      	adds	r3, r7, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x15a>
 8004e58:	4b6d      	ldr	r3, [pc, #436]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6c      	ldr	r2, [pc, #432]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a69      	ldr	r2, [pc, #420]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e00b      	b.n	8004e8a <HAL_RCC_OscConfig+0x172>
 8004e72:	4b67      	ldr	r3, [pc, #412]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a66      	ldr	r2, [pc, #408]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b64      	ldr	r3, [pc, #400]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a63      	ldr	r2, [pc, #396]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e88:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e8a:	4b61      	ldr	r3, [pc, #388]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	f023 020f 	bic.w	r2, r3, #15
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	495d      	ldr	r1, [pc, #372]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d059      	beq.n	8004f5c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fd84 	bl	80029b4 <HAL_GetTick>
 8004eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb2:	f7fd fd7f 	bl	80029b4 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	f000 be29 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
 8004ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ecc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004edc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee0:	fab3 f383 	clz	r3, r3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_OscConfig+0x1e2>
 8004ef4:	4b46      	ldr	r3, [pc, #280]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	e015      	b.n	8004f26 <HAL_RCC_OscConfig+0x20e>
 8004efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004efe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004f16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004f22:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004f2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004f3a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004f3e:	fab2 f282 	clz	r2, r2
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	f042 0220 	orr.w	r2, r2, #32
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	f002 021f 	and.w	r2, r2, #31
 8004f4e:	2101      	movs	r1, #1
 8004f50:	fa01 f202 	lsl.w	r2, r1, r2
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ab      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x19a>
 8004f5a:	e05c      	b.n	8005016 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fd fd2a 	bl	80029b4 <HAL_GetTick>
 8004f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f66:	f7fd fd25 	bl	80029b4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d902      	bls.n	8004f7c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	f000 bdcf 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
 8004f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004f90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d102      	bne.n	8004fae <HAL_RCC_OscConfig+0x296>
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	e015      	b.n	8004fda <HAL_RCC_OscConfig+0x2c2>
 8004fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004fca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_RCC_OscConfig+0x2f8>)
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004fe2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004fe6:	fa92 f2a2 	rbit	r2, r2
 8004fea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004fee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ff2:	fab2 f282 	clz	r2, r2
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	f042 0220 	orr.w	r2, r2, #32
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	f002 021f 	and.w	r2, r2, #31
 8005002:	2101      	movs	r1, #1
 8005004:	fa01 f202 	lsl.w	r2, r1, r2
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ab      	bne.n	8004f66 <HAL_RCC_OscConfig+0x24e>
 800500e:	e002      	b.n	8005016 <HAL_RCC_OscConfig+0x2fe>
 8005010:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 816f 	beq.w	8005304 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005026:	4bd0      	ldr	r3, [pc, #832]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005032:	4bcd      	ldr	r3, [pc, #820]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b08      	cmp	r3, #8
 800503c:	d16c      	bne.n	8005118 <HAL_RCC_OscConfig+0x400>
 800503e:	4bca      	ldr	r3, [pc, #808]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d166      	bne.n	8005118 <HAL_RCC_OscConfig+0x400>
 800504a:	2302      	movs	r3, #2
 800504c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800505c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005060:	fab3 f383 	clz	r3, r3
 8005064:	b2db      	uxtb	r3, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d102      	bne.n	800507a <HAL_RCC_OscConfig+0x362>
 8005074:	4bbc      	ldr	r3, [pc, #752]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	e013      	b.n	80050a2 <HAL_RCC_OscConfig+0x38a>
 800507a:	2302      	movs	r3, #2
 800507c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800508c:	2302      	movs	r3, #2
 800508e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005092:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800509e:	4bb2      	ldr	r3, [pc, #712]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2202      	movs	r2, #2
 80050a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80050a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80050ac:	fa92 f2a2 	rbit	r2, r2
 80050b0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80050b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80050b8:	fab2 f282 	clz	r2, r2
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	f042 0220 	orr.w	r2, r2, #32
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	f002 021f 	and.w	r2, r2, #31
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f202 	lsl.w	r2, r1, r2
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_RCC_OscConfig+0x3cc>
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d002      	beq.n	80050e4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f000 bd1b 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e4:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	21f8      	movs	r1, #248	; 0xf8
 80050f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80050fc:	fa91 f1a1 	rbit	r1, r1
 8005100:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005104:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005108:	fab1 f181 	clz	r1, r1
 800510c:	b2c9      	uxtb	r1, r1
 800510e:	408b      	lsls	r3, r1
 8005110:	4995      	ldr	r1, [pc, #596]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005116:	e0f5      	b.n	8005304 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8085 	beq.w	800522e <HAL_RCC_OscConfig+0x516>
 8005124:	2301      	movs	r3, #1
 8005126:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005136:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fd fc30 	bl	80029b4 <HAL_GetTick>
 8005154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005158:	e00a      	b.n	8005170 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515a:	f7fd fc2b 	bl	80029b4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d902      	bls.n	8005170 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	f000 bcd5 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005170:	2302      	movs	r3, #2
 8005172:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005182:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_RCC_OscConfig+0x488>
 800519a:	4b73      	ldr	r3, [pc, #460]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	e013      	b.n	80051c8 <HAL_RCC_OscConfig+0x4b0>
 80051a0:	2302      	movs	r3, #2
 80051a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80051aa:	fa93 f3a3 	rbit	r3, r3
 80051ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80051b2:	2302      	movs	r3, #2
 80051b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80051b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80051bc:	fa93 f3a3 	rbit	r3, r3
 80051c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80051c4:	4b68      	ldr	r3, [pc, #416]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2202      	movs	r2, #2
 80051ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80051ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80051d2:	fa92 f2a2 	rbit	r2, r2
 80051d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80051da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80051de:	fab2 f282 	clz	r2, r2
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	f042 0220 	orr.w	r2, r2, #32
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f002 021f 	and.w	r2, r2, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f202 	lsl.w	r2, r1, r2
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0af      	beq.n	800515a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fa:	4b5b      	ldr	r3, [pc, #364]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	21f8      	movs	r1, #248	; 0xf8
 800520a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005212:	fa91 f1a1 	rbit	r1, r1
 8005216:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800521a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800521e:	fab1 f181 	clz	r1, r1
 8005222:	b2c9      	uxtb	r1, r1
 8005224:	408b      	lsls	r3, r1
 8005226:	4950      	ldr	r1, [pc, #320]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]
 800522c:	e06a      	b.n	8005304 <HAL_RCC_OscConfig+0x5ec>
 800522e:	2301      	movs	r3, #1
 8005230:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800524e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fd fbab 	bl	80029b4 <HAL_GetTick>
 800525e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005262:	e00a      	b.n	800527a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005264:	f7fd fba6 	bl	80029b4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	f000 bc50 	b.w	8005b1a <HAL_RCC_OscConfig+0xe02>
 800527a:	2302      	movs	r3, #2
 800527c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800528c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d102      	bne.n	80052aa <HAL_RCC_OscConfig+0x592>
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e013      	b.n	80052d2 <HAL_RCC_OscConfig+0x5ba>
 80052aa:	2302      	movs	r3, #2
 80052ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052bc:	2302      	movs	r3, #2
 80052be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_RCC_OscConfig+0x650>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2202      	movs	r2, #2
 80052d4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80052d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80052dc:	fa92 f2a2 	rbit	r2, r2
 80052e0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80052e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80052e8:	fab2 f282 	clz	r2, r2
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	f042 0220 	orr.w	r2, r2, #32
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f002 021f 	and.w	r2, r2, #31
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f202 	lsl.w	r2, r1, r2
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1af      	bne.n	8005264 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80da 	beq.w	80054c8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d069      	beq.n	80053f2 <HAL_RCC_OscConfig+0x6da>
 800531e:	2301      	movs	r3, #1
 8005320:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005324:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005328:	fa93 f3a3 	rbit	r3, r3
 800532c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_OscConfig+0x654>)
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	461a      	mov	r2, r3
 8005344:	2301      	movs	r3, #1
 8005346:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fd fb34 	bl	80029b4 <HAL_GetTick>
 800534c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005350:	e00e      	b.n	8005370 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005352:	f7fd fb2f 	bl	80029b4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d906      	bls.n	8005370 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e3d9      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	10908120 	.word	0x10908120
 8005370:	2302      	movs	r3, #2
 8005372:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800537a:	fa93 f3a3 	rbit	r3, r3
 800537e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005382:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005386:	2202      	movs	r2, #2
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	fa93 f2a3 	rbit	r2, r3
 8005394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800539e:	2202      	movs	r2, #2
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	fa93 f2a3 	rbit	r2, r3
 80053ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80053b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b2:	4ba5      	ldr	r3, [pc, #660]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80053b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80053ba:	2102      	movs	r1, #2
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	fa93 f1a3 	rbit	r1, r3
 80053c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80053cc:	6019      	str	r1, [r3, #0]
  return result;
 80053ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0b0      	beq.n	8005352 <HAL_RCC_OscConfig+0x63a>
 80053f0:	e06a      	b.n	80054c8 <HAL_RCC_OscConfig+0x7b0>
 80053f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	fa93 f2a3 	rbit	r2, r3
 8005404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005408:	601a      	str	r2, [r3, #0]
  return result;
 800540a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800540e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	4b8c      	ldr	r3, [pc, #560]	; (800564c <HAL_RCC_OscConfig+0x934>)
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005424:	f7fd fac6 	bl	80029b4 <HAL_GetTick>
 8005428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	e009      	b.n	8005442 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542e:	f7fd fac1 	bl	80029b4 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e36b      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005442:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005446:	2202      	movs	r2, #2
 8005448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	fa93 f2a3 	rbit	r2, r3
 8005454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800545e:	2202      	movs	r2, #2
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	fa93 f2a3 	rbit	r2, r3
 800546c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005476:	2202      	movs	r2, #2
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	fa93 f2a3 	rbit	r2, r3
 8005484:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005488:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548a:	4b6f      	ldr	r3, [pc, #444]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 800548c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005492:	2102      	movs	r1, #2
 8005494:	6019      	str	r1, [r3, #0]
 8005496:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	fa93 f1a3 	rbit	r1, r3
 80054a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80054a4:	6019      	str	r1, [r3, #0]
  return result;
 80054a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1b2      	bne.n	800542e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8158 	beq.w	8005788 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d112      	bne.n	8005510 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b57      	ldr	r3, [pc, #348]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4a56      	ldr	r2, [pc, #344]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	61d3      	str	r3, [r2, #28]
 80054f6:	4b54      	ldr	r3, [pc, #336]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCC_OscConfig+0x938>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11a      	bne.n	8005552 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551c:	4b4c      	ldr	r3, [pc, #304]	; (8005650 <HAL_RCC_OscConfig+0x938>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a4b      	ldr	r2, [pc, #300]	; (8005650 <HAL_RCC_OscConfig+0x938>)
 8005522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005526:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005528:	f7fd fa44 	bl	80029b4 <HAL_GetTick>
 800552c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	e009      	b.n	8005546 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fd fa3f 	bl	80029b4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e2e9      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b42      	ldr	r3, [pc, #264]	; (8005650 <HAL_RCC_OscConfig+0x938>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0ef      	beq.n	8005532 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x852>
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4a39      	ldr	r2, [pc, #228]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6213      	str	r3, [r2, #32]
 8005568:	e02f      	b.n	80055ca <HAL_RCC_OscConfig+0x8b2>
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10c      	bne.n	800558e <HAL_RCC_OscConfig+0x876>
 8005574:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4a33      	ldr	r2, [pc, #204]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6213      	str	r3, [r2, #32]
 8005580:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4a30      	ldr	r2, [pc, #192]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6213      	str	r3, [r2, #32]
 800558c:	e01d      	b.n	80055ca <HAL_RCC_OscConfig+0x8b2>
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b05      	cmp	r3, #5
 8005596:	d10c      	bne.n	80055b2 <HAL_RCC_OscConfig+0x89a>
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	6213      	str	r3, [r2, #32]
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6213      	str	r3, [r2, #32]
 80055b0:	e00b      	b.n	80055ca <HAL_RCC_OscConfig+0x8b2>
 80055b2:	4b25      	ldr	r3, [pc, #148]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4a24      	ldr	r2, [pc, #144]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	6213      	str	r3, [r2, #32]
 80055be:	4b22      	ldr	r3, [pc, #136]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4a21      	ldr	r2, [pc, #132]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 80055c4:	f023 0304 	bic.w	r3, r3, #4
 80055c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d06b      	beq.n	80056ac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d4:	f7fd f9ee 	bl	80029b4 <HAL_GetTick>
 80055d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	e00b      	b.n	80055f6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fd f9e9 	bl	80029b4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e291      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 80055f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055fa:	2202      	movs	r2, #2
 80055fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	fa93 f2a3 	rbit	r2, r3
 8005608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005612:	2202      	movs	r2, #2
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fa93 f2a3 	rbit	r2, r3
 8005620:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005624:	601a      	str	r2, [r3, #0]
  return result;
 8005626:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800562a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	b2db      	uxtb	r3, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f043 0302 	orr.w	r3, r3, #2
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d109      	bne.n	8005654 <HAL_RCC_OscConfig+0x93c>
 8005640:	4b01      	ldr	r3, [pc, #4]	; (8005648 <HAL_RCC_OscConfig+0x930>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	e014      	b.n	8005670 <HAL_RCC_OscConfig+0x958>
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
 800564c:	10908120 	.word	0x10908120
 8005650:	40007000 	.word	0x40007000
 8005654:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005658:	2202      	movs	r2, #2
 800565a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	fa93 f2a3 	rbit	r2, r3
 8005666:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	4bbb      	ldr	r3, [pc, #748]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005674:	2102      	movs	r1, #2
 8005676:	6011      	str	r1, [r2, #0]
 8005678:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	fa92 f1a2 	rbit	r1, r2
 8005682:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005686:	6011      	str	r1, [r2, #0]
  return result;
 8005688:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	fab2 f282 	clz	r2, r2
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	f002 021f 	and.w	r2, r2, #31
 800569e:	2101      	movs	r1, #1
 80056a0:	fa01 f202 	lsl.w	r2, r1, r2
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d099      	beq.n	80055de <HAL_RCC_OscConfig+0x8c6>
 80056aa:	e063      	b.n	8005774 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fd f982 	bl	80029b4 <HAL_GetTick>
 80056b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b4:	e00b      	b.n	80056ce <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fd f97d 	bl	80029b4 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e225      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 80056ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80056d2:	2202      	movs	r2, #2
 80056d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	fa93 f2a3 	rbit	r2, r3
 80056e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056ea:	2202      	movs	r2, #2
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	fa93 f2a3 	rbit	r2, r3
 80056f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056fc:	601a      	str	r2, [r3, #0]
  return result;
 80056fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005702:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005704:	fab3 f383 	clz	r3, r3
 8005708:	b2db      	uxtb	r3, r3
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d102      	bne.n	800571e <HAL_RCC_OscConfig+0xa06>
 8005718:	4b90      	ldr	r3, [pc, #576]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	e00d      	b.n	800573a <HAL_RCC_OscConfig+0xa22>
 800571e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005722:	2202      	movs	r2, #2
 8005724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f2a3 	rbit	r2, r3
 8005730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	4b89      	ldr	r3, [pc, #548]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800573e:	2102      	movs	r1, #2
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	fa92 f1a2 	rbit	r1, r2
 800574c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005750:	6011      	str	r1, [r2, #0]
  return result;
 8005752:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	fab2 f282 	clz	r2, r2
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	f002 021f 	and.w	r2, r2, #31
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f202 	lsl.w	r2, r1, r2
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1a0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005774:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577c:	4b77      	ldr	r3, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	4a76      	ldr	r2, [pc, #472]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005786:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 81c2 	beq.w	8005b18 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005794:	4b71      	ldr	r3, [pc, #452]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b08      	cmp	r3, #8
 800579e:	f000 819c 	beq.w	8005ada <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	f040 8114 	bne.w	80059d6 <HAL_RCC_OscConfig+0xcbe>
 80057ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80057b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	fa93 f2a3 	rbit	r2, r3
 80057c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80057c6:	601a      	str	r2, [r3, #0]
  return result;
 80057c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80057cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd f8e6 	bl	80029b4 <HAL_GetTick>
 80057e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ec:	e009      	b.n	8005802 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ee:	f7fd f8e1 	bl	80029b4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e18b      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005802:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800580a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	fa93 f2a3 	rbit	r2, r3
 8005816:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800581a:	601a      	str	r2, [r3, #0]
  return result;
 800581c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005820:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b2db      	uxtb	r3, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <HAL_RCC_OscConfig+0xb24>
 8005836:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	e01b      	b.n	8005874 <HAL_RCC_OscConfig+0xb5c>
 800583c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fa93 f2a3 	rbit	r2, r3
 8005850:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800585a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	fa93 f2a3 	rbit	r2, r3
 800586a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	4b3a      	ldr	r3, [pc, #232]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005878:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	fa92 f1a2 	rbit	r1, r2
 8005888:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800588c:	6011      	str	r1, [r2, #0]
  return result;
 800588e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	fab2 f282 	clz	r2, r2
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	f042 0220 	orr.w	r2, r2, #32
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	f002 021f 	and.w	r2, r2, #31
 80058a4:	2101      	movs	r1, #1
 80058a6:	fa01 f202 	lsl.w	r2, r1, r2
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d19e      	bne.n	80057ee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b0:	4b2a      	ldr	r3, [pc, #168]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	4925      	ldr	r1, [pc, #148]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]
 80058cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	fa93 f2a3 	rbit	r2, r3
 80058e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058e4:	601a      	str	r2, [r3, #0]
  return result;
 80058e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	461a      	mov	r2, r3
 80058fe:	2301      	movs	r3, #1
 8005900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fd f857 	bl	80029b4 <HAL_GetTick>
 8005906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800590a:	e009      	b.n	8005920 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590c:	f7fd f852 	bl	80029b4 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e0fc      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005938:	601a      	str	r2, [r3, #0]
  return result;
 800593a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800593e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0xc48>
 8005954:	4b01      	ldr	r3, [pc, #4]	; (800595c <HAL_RCC_OscConfig+0xc44>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	e01e      	b.n	8005998 <HAL_RCC_OscConfig+0xc80>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	fa93 f2a3 	rbit	r2, r3
 8005974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800597e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	fa93 f2a3 	rbit	r2, r3
 800598e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCC_OscConfig+0xe0c>)
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800599c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	fa92 f1a2 	rbit	r1, r2
 80059ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80059b0:	6011      	str	r1, [r2, #0]
  return result;
 80059b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	fab2 f282 	clz	r2, r2
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	f042 0220 	orr.w	r2, r2, #32
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	f002 021f 	and.w	r2, r2, #31
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f202 	lsl.w	r2, r1, r2
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d09b      	beq.n	800590c <HAL_RCC_OscConfig+0xbf4>
 80059d4:	e0a0      	b.n	8005b18 <HAL_RCC_OscConfig+0xe00>
 80059d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	fa93 f2a3 	rbit	r2, r3
 80059ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ee:	601a      	str	r2, [r3, #0]
  return result;
 80059f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fc ffd2 	bl	80029b4 <HAL_GetTick>
 8005a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a14:	e009      	b.n	8005a2a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fc ffcd 	bl	80029b4 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e077      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
 8005a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	fa93 f2a3 	rbit	r2, r3
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	601a      	str	r2, [r3, #0]
  return result;
 8005a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a4a:	fab3 f383 	clz	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCC_OscConfig+0xd4c>
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <HAL_RCC_OscConfig+0xe0c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	e01b      	b.n	8005a9c <HAL_RCC_OscConfig+0xd84>
 8005a64:	f107 0320 	add.w	r3, r7, #32
 8005a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6e:	f107 0320 	add.w	r3, r7, #32
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fa93 f2a3 	rbit	r2, r3
 8005a78:	f107 031c 	add.w	r3, r7, #28
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f107 0318 	add.w	r3, r7, #24
 8005a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f107 0318 	add.w	r3, r7, #24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	fa93 f2a3 	rbit	r2, r3
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <HAL_RCC_OscConfig+0xe0c>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f107 0210 	add.w	r2, r7, #16
 8005aa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	f107 0210 	add.w	r2, r7, #16
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	fa92 f1a2 	rbit	r1, r2
 8005ab0:	f107 020c 	add.w	r2, r7, #12
 8005ab4:	6011      	str	r1, [r2, #0]
  return result;
 8005ab6:	f107 020c 	add.w	r2, r7, #12
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	fab2 f282 	clz	r2, r2
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	f042 0220 	orr.w	r2, r2, #32
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	f002 021f 	and.w	r2, r2, #31
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d19e      	bne.n	8005a16 <HAL_RCC_OscConfig+0xcfe>
 8005ad8:	e01e      	b.n	8005b18 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e018      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <HAL_RCC_OscConfig+0xe0c>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005af0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d108      	bne.n	8005b14 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005b02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000

08005b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b09e      	sub	sp, #120	; 0x78
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e162      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b90      	ldr	r3, [pc, #576]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d910      	bls.n	8005b70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 0207 	bic.w	r2, r3, #7
 8005b56:	498b      	ldr	r1, [pc, #556]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	4b89      	ldr	r3, [pc, #548]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e14a      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7c:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	497f      	ldr	r1, [pc, #508]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80dc 	beq.w	8005d54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d13c      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xf6>
 8005ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <HAL_RCC_ClockConfig+0xa6>
 8005bc8:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	e00f      	b.n	8005bee <HAL_RCC_ClockConfig+0xc6>
 8005bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd6:	fa93 f3a3 	rbit	r3, r3
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
 8005bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005be0:	663b      	str	r3, [r7, #96]	; 0x60
 8005be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bea:	4b67      	ldr	r3, [pc, #412]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf6:	fa92 f2a2 	rbit	r2, r2
 8005bfa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bfe:	fab2 f282 	clz	r2, r2
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	f042 0220 	orr.w	r2, r2, #32
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	f002 021f 	and.w	r2, r2, #31
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f202 	lsl.w	r2, r1, r2
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d17b      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0f3      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d13c      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x178>
 8005c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x128>
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCC_ClockConfig+0x148>
 8005c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	fa93 f3a3 	rbit	r3, r3
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c62:	643b      	str	r3, [r7, #64]	; 0x40
 8005c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c66:	fa93 f3a3 	rbit	r3, r3
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6c:	4b46      	ldr	r3, [pc, #280]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c74:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c78:	fa92 f2a2 	rbit	r2, r2
 8005c7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c80:	fab2 f282 	clz	r2, r2
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	f042 0220 	orr.w	r2, r2, #32
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	f002 021f 	and.w	r2, r2, #31
 8005c90:	2101      	movs	r1, #1
 8005c92:	fa01 f202 	lsl.w	r2, r1, r2
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d13a      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0b2      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	fa93 f3a3 	rbit	r3, r3
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cae:	fab3 f383 	clz	r3, r3
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d102      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	e00d      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1bc>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	fa93 f3a3 	rbit	r3, r3
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	61ba      	str	r2, [r7, #24]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	fa92 f2a2 	rbit	r2, r2
 8005cee:	617a      	str	r2, [r7, #20]
  return result;
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	fab2 f282 	clz	r2, r2
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	f042 0220 	orr.w	r2, r2, #32
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	f002 021f 	and.w	r2, r2, #31
 8005d02:	2101      	movs	r1, #1
 8005d04:	fa01 f202 	lsl.w	r2, r1, r2
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e079      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d12:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f023 0203 	bic.w	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	491a      	ldr	r1, [pc, #104]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fc fe46 	bl	80029b4 <HAL_GetTick>
 8005d28:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fc fe42 	bl	80029b4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e061      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 020c 	and.w	r2, r3, #12
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1eb      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d214      	bcs.n	8005d8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 0207 	bic.w	r2, r3, #7
 8005d6a:	4906      	ldr	r1, [pc, #24]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_ClockConfig+0x25c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e040      	b.n	8005e06 <HAL_RCC_ClockConfig+0x2de>
 8005d84:	40022000 	.word	0x40022000
 8005d88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <HAL_RCC_ClockConfig+0x2e8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	491a      	ldr	r1, [pc, #104]	; (8005e10 <HAL_RCC_ClockConfig+0x2e8>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005db6:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <HAL_RCC_ClockConfig+0x2e8>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4912      	ldr	r1, [pc, #72]	; (8005e10 <HAL_RCC_ClockConfig+0x2e8>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005dca:	f000 f829 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8005dce:	4601      	mov	r1, r0
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <HAL_RCC_ClockConfig+0x2e8>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd8:	22f0      	movs	r2, #240	; 0xf0
 8005dda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	fa92 f2a2 	rbit	r2, r2
 8005de2:	60fa      	str	r2, [r7, #12]
  return result;
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	fab2 f282 	clz	r2, r2
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	40d3      	lsrs	r3, r2
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <HAL_RCC_ClockConfig+0x2ec>)
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
 8005df2:	fa21 f303 	lsr.w	r3, r1, r3
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <HAL_RCC_ClockConfig+0x2f0>)
 8005df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005dfa:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_RCC_ClockConfig+0x2f4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fc fd94 	bl	800292c <HAL_InitTick>
  
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3778      	adds	r7, #120	; 0x78
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	0800e248 	.word	0x0800e248
 8005e18:	20000018 	.word	0x20000018
 8005e1c:	2000001c 	.word	0x2000001c

08005e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b08b      	sub	sp, #44	; 0x2c
 8005e24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005e3a:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d002      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x30>
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCC_GetSysClockFreq+0x36>
 8005e4e:	e03c      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e50:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e52:	623b      	str	r3, [r7, #32]
      break;
 8005e54:	e03c      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005e60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	fa92 f2a2 	rbit	r2, r2
 8005e68:	607a      	str	r2, [r7, #4]
  return result;
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	fab2 f282 	clz	r2, r2
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	40d3      	lsrs	r3, r2
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e76:	5cd3      	ldrb	r3, [r2, r3]
 8005e78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005e7a:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	220f      	movs	r2, #15
 8005e84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	fa92 f2a2 	rbit	r2, r2
 8005e8c:	60fa      	str	r2, [r7, #12]
  return result;
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	fab2 f282 	clz	r2, r2
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	40d3      	lsrs	r3, r2
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e9a:	5cd3      	ldrb	r3, [r2, r3]
 8005e9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	623b      	str	r3, [r7, #32]
      break;
 8005ec8:	e002      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ecc:	623b      	str	r3, [r7, #32]
      break;
 8005ece:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	372c      	adds	r7, #44	; 0x2c
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	007a1200 	.word	0x007a1200
 8005ee8:	0800e260 	.word	0x0800e260
 8005eec:	0800e270 	.word	0x0800e270
 8005ef0:	003d0900 	.word	0x003d0900

08005ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000018 	.word	0x20000018

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005f12:	f7ff ffef 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f16:	4601      	mov	r1, r0
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005f24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	fa92 f2a2 	rbit	r2, r2
 8005f2c:	603a      	str	r2, [r7, #0]
  return result;
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	fab2 f282 	clz	r2, r2
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	40d3      	lsrs	r3, r2
 8005f38:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8005f3a:	5cd3      	ldrb	r3, [r2, r3]
 8005f3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	0800e258 	.word	0x0800e258

08005f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005f56:	f7ff ffcd 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005f64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005f68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	fa92 f2a2 	rbit	r2, r2
 8005f70:	603a      	str	r2, [r7, #0]
  return result;
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	fab2 f282 	clz	r2, r2
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	40d3      	lsrs	r3, r2
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800e258 	.word	0x0800e258

08005f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b092      	sub	sp, #72	; 0x48
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80cd 	beq.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb8:	4b86      	ldr	r3, [pc, #536]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10e      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc4:	4b83      	ldr	r3, [pc, #524]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	4a82      	ldr	r2, [pc, #520]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fce:	61d3      	str	r3, [r2, #28]
 8005fd0:	4b80      	ldr	r3, [pc, #512]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d118      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fee:	4b7a      	ldr	r3, [pc, #488]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a79      	ldr	r2, [pc, #484]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffa:	f7fc fcdb 	bl	80029b4 <HAL_GetTick>
 8005ffe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006002:	f7fc fcd7 	bl	80029b4 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b64      	cmp	r3, #100	; 0x64
 800600e:	d901      	bls.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0db      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006014:	4b70      	ldr	r3, [pc, #448]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006020:	4b6c      	ldr	r3, [pc, #432]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d07d      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800603a:	429a      	cmp	r2, r3
 800603c:	d076      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800603e:	4b65      	ldr	r3, [pc, #404]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	fa93 f3a3 	rbit	r3, r3
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006058:	fab3 f383 	clz	r3, r3
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	4b5e      	ldr	r3, [pc, #376]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	461a      	mov	r2, r3
 8006068:	2301      	movs	r3, #1
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	fa93 f3a3 	rbit	r3, r3
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800607c:	fab3 f383 	clz	r3, r3
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	4b55      	ldr	r3, [pc, #340]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	461a      	mov	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006090:	4a50      	ldr	r2, [pc, #320]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006094:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d045      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fc fc88 	bl	80029b4 <HAL_GetTick>
 80060a4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	e00a      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fc fc84 	bl	80029b4 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e086      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80060be:	2302      	movs	r3, #2
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ca:	2302      	movs	r3, #2
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	fa93 f3a3 	rbit	r3, r3
 80060d4:	61fb      	str	r3, [r7, #28]
  return result;
 80060d6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f043 0302 	orr.w	r3, r3, #2
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d102      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80060ec:	4b39      	ldr	r3, [pc, #228]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	e007      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	fa93 f3a3 	rbit	r3, r3
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	4b35      	ldr	r3, [pc, #212]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2202      	movs	r2, #2
 8006104:	613a      	str	r2, [r7, #16]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	fa92 f2a2 	rbit	r2, r2
 800610c:	60fa      	str	r2, [r7, #12]
  return result;
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	fab2 f282 	clz	r2, r2
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	f002 021f 	and.w	r2, r2, #31
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f202 	lsl.w	r2, r1, r2
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0bd      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800612c:	4b29      	ldr	r3, [pc, #164]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4926      	ldr	r1, [pc, #152]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800613a:	4313      	orrs	r3, r2
 800613c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800613e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006142:	2b01      	cmp	r3, #1
 8006144:	d105      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800614c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006150:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	491a      	ldr	r1, [pc, #104]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800616c:	4313      	orrs	r3, r2
 800616e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800617c:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f023 0210 	bic.w	r2, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4912      	ldr	r1, [pc, #72]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800618a:	4313      	orrs	r3, r2
 800618c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	490b      	ldr	r1, [pc, #44]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3748      	adds	r7, #72	; 0x48
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40007000 	.word	0x40007000
 80061dc:	10908100 	.word	0x10908100

080061e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e049      	b.n	8006286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fc f9d4 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f000 fcf2 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e040      	b.n	800632a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1c      	ldr	r2, [pc, #112]	; (8006338 <HAL_TIM_Base_Start_IT+0xa8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x58>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d2:	d009      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x58>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a18      	ldr	r2, [pc, #96]	; (800633c <HAL_TIM_Base_Start_IT+0xac>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x58>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a17      	ldr	r2, [pc, #92]	; (8006340 <HAL_TIM_Base_Start_IT+0xb0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d115      	bne.n	8006314 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <HAL_TIM_Base_Start_IT+0xb4>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d015      	beq.n	8006326 <HAL_TIM_Base_Start_IT+0x96>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006300:	d011      	beq.n	8006326 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006312:	e008      	b.n	8006326 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e000      	b.n	8006328 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40000400 	.word	0x40000400
 8006340:	40014000 	.word	0x40014000
 8006344:	00010007 	.word	0x00010007

08006348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e049      	b.n	80063ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f841 	bl	80063f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 fc3e 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_TIM_PWM_Start+0x24>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e03c      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b04      	cmp	r3, #4
 8006434:	d109      	bne.n	800644a <HAL_TIM_PWM_Start+0x3e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	e02f      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d109      	bne.n	8006464 <HAL_TIM_PWM_Start+0x58>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	bf14      	ite	ne
 800645c:	2301      	movne	r3, #1
 800645e:	2300      	moveq	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	e022      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d109      	bne.n	800647e <HAL_TIM_PWM_Start+0x72>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	bf14      	ite	ne
 8006476:	2301      	movne	r3, #1
 8006478:	2300      	moveq	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e015      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b10      	cmp	r3, #16
 8006482:	d109      	bne.n	8006498 <HAL_TIM_PWM_Start+0x8c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e008      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e088      	b.n	80065c4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0xb6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c0:	e023      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start+0xc6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d0:	e01b      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_PWM_Start+0xd6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e0:	e013      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_PWM_Start+0xe6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f0:	e00b      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_PWM_Start+0xf6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	e003      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2201      	movs	r2, #1
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 ff30 	bl	8007378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2b      	ldr	r2, [pc, #172]	; (80065cc <HAL_TIM_PWM_Start+0x1c0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_TIM_PWM_Start+0x134>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <HAL_TIM_PWM_Start+0x1c4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIM_PWM_Start+0x134>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <HAL_TIM_PWM_Start+0x1c8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIM_PWM_Start+0x134>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a27      	ldr	r2, [pc, #156]	; (80065d8 <HAL_TIM_PWM_Start+0x1cc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d101      	bne.n	8006544 <HAL_TIM_PWM_Start+0x138>
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <HAL_TIM_PWM_Start+0x13a>
 8006544:	2300      	movs	r3, #0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <HAL_TIM_PWM_Start+0x1c0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIM_PWM_Start+0x176>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656c:	d009      	beq.n	8006582 <HAL_TIM_PWM_Start+0x176>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_TIM_PWM_Start+0x1d0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIM_PWM_Start+0x176>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <HAL_TIM_PWM_Start+0x1c4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d115      	bne.n	80065ae <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <HAL_TIM_PWM_Start+0x1d4>)
 800658a:	4013      	ands	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b06      	cmp	r3, #6
 8006592:	d015      	beq.n	80065c0 <HAL_TIM_PWM_Start+0x1b4>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d011      	beq.n	80065c0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ac:	e008      	b.n	80065c0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0201 	orr.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e000      	b.n	80065c2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800
 80065dc:	40000400 	.word	0x40000400
 80065e0:	00010007 	.word	0x00010007

080065e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d122      	bne.n	8006640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b02      	cmp	r3, #2
 8006606:	d11b      	bne.n	8006640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0202 	mvn.w	r2, #2
 8006610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 facf 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 800662c:	e005      	b.n	800663a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fac1 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fad2 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b04      	cmp	r3, #4
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0204 	mvn.w	r2, #4
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 faa5 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa97 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 faa8 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d122      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0208 	mvn.w	r2, #8
 80066b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2204      	movs	r2, #4
 80066be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa7b 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 80066d4:	e005      	b.n	80066e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa6d 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa7e 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b10      	cmp	r3, #16
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0210 	mvn.w	r2, #16
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2208      	movs	r2, #8
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa51 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa43 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa54 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b01      	cmp	r3, #1
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0201 	mvn.w	r2, #1
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fb fb88 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d10e      	bne.n	8006794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	2b80      	cmp	r3, #128	; 0x80
 8006782:	d107      	bne.n	8006794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ff08 	bl	80075a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a2:	d10e      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d107      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fefb 	bl	80075b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d10e      	bne.n	80067ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d107      	bne.n	80067ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa02 	bl	8006bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d10e      	bne.n	800681a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b20      	cmp	r3, #32
 8006808:	d107      	bne.n	800681a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f06f 0220 	mvn.w	r2, #32
 8006812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 febb 	bl	8007590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800683a:	2302      	movs	r3, #2
 800683c:	e0fd      	b.n	8006a3a <HAL_TIM_PWM_ConfigChannel+0x216>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b14      	cmp	r3, #20
 800684a:	f200 80f0 	bhi.w	8006a2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	080068a9 	.word	0x080068a9
 8006858:	08006a2f 	.word	0x08006a2f
 800685c:	08006a2f 	.word	0x08006a2f
 8006860:	08006a2f 	.word	0x08006a2f
 8006864:	080068e9 	.word	0x080068e9
 8006868:	08006a2f 	.word	0x08006a2f
 800686c:	08006a2f 	.word	0x08006a2f
 8006870:	08006a2f 	.word	0x08006a2f
 8006874:	0800692b 	.word	0x0800692b
 8006878:	08006a2f 	.word	0x08006a2f
 800687c:	08006a2f 	.word	0x08006a2f
 8006880:	08006a2f 	.word	0x08006a2f
 8006884:	0800696b 	.word	0x0800696b
 8006888:	08006a2f 	.word	0x08006a2f
 800688c:	08006a2f 	.word	0x08006a2f
 8006890:	08006a2f 	.word	0x08006a2f
 8006894:	080069ad 	.word	0x080069ad
 8006898:	08006a2f 	.word	0x08006a2f
 800689c:	08006a2f 	.word	0x08006a2f
 80068a0:	08006a2f 	.word	0x08006a2f
 80068a4:	080069ed 	.word	0x080069ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fa22 	bl	8006cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0208 	orr.w	r2, r2, #8
 80068c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6999      	ldr	r1, [r3, #24]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	619a      	str	r2, [r3, #24]
      break;
 80068e6:	e0a3      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fa88 	bl	8006e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6999      	ldr	r1, [r3, #24]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	021a      	lsls	r2, r3, #8
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	619a      	str	r2, [r3, #24]
      break;
 8006928:	e082      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fae7 	bl	8006f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0208 	orr.w	r2, r2, #8
 8006944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0204 	bic.w	r2, r2, #4
 8006954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69d9      	ldr	r1, [r3, #28]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	61da      	str	r2, [r3, #28]
      break;
 8006968:	e062      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fb45 	bl	8007000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69d9      	ldr	r1, [r3, #28]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	021a      	lsls	r2, r3, #8
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	61da      	str	r2, [r3, #28]
      break;
 80069aa:	e041      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb88 	bl	80070c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0204 	bic.w	r2, r2, #4
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069ea:	e021      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fbc6 	bl	8007184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a2c:	e000      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_ConfigClockSource+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e0a8      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x16a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d067      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x124>
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d80b      	bhi.n	8006ab4 <HAL_TIM_ConfigClockSource+0x70>
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d073      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x144>
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d802      	bhi.n	8006aaa <HAL_TIM_ConfigClockSource+0x66>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d06f      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006aa8:	e078      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d06c      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x144>
 8006aae:	2b30      	cmp	r3, #48	; 0x30
 8006ab0:	d06a      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006ab2:	e073      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006ab4:	2b70      	cmp	r3, #112	; 0x70
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0x90>
 8006ab8:	2b70      	cmp	r3, #112	; 0x70
 8006aba:	d804      	bhi.n	8006ac6 <HAL_TIM_ConfigClockSource+0x82>
 8006abc:	2b50      	cmp	r3, #80	; 0x50
 8006abe:	d033      	beq.n	8006b28 <HAL_TIM_ConfigClockSource+0xe4>
 8006ac0:	2b60      	cmp	r3, #96	; 0x60
 8006ac2:	d041      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006ac4:	e06a      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aca:	d066      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0x156>
 8006acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad0:	d017      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006ad2:	e063      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fc28 	bl	8007338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006af6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
      break;
 8006b00:	e04c      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6899      	ldr	r1, [r3, #8]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f000 fc11 	bl	8007338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b24:	609a      	str	r2, [r3, #8]
      break;
 8006b26:	e039      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6859      	ldr	r1, [r3, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	461a      	mov	r2, r3
 8006b36:	f000 fb85 	bl	8007244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2150      	movs	r1, #80	; 0x50
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fbde 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 8006b46:	e029      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	461a      	mov	r2, r3
 8006b56:	f000 fba4 	bl	80072a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2160      	movs	r1, #96	; 0x60
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fbce 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 8006b66:	e019      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	461a      	mov	r2, r3
 8006b76:	f000 fb65 	bl	8007244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2140      	movs	r1, #64	; 0x40
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fbbe 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 8006b86:	e009      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f000 fbb5 	bl	8007302 <TIM_ITRx_SetConfig>
        break;
 8006b98:	e000      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a32      	ldr	r2, [pc, #200]	; (8006ce4 <TIM_Base_SetConfig+0xdc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d007      	beq.n	8006c30 <TIM_Base_SetConfig+0x28>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0x28>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ce8 <TIM_Base_SetConfig+0xe0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d108      	bne.n	8006c42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a27      	ldr	r2, [pc, #156]	; (8006ce4 <TIM_Base_SetConfig+0xdc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <TIM_Base_SetConfig+0x6a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d00f      	beq.n	8006c72 <TIM_Base_SetConfig+0x6a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <TIM_Base_SetConfig+0xe0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00b      	beq.n	8006c72 <TIM_Base_SetConfig+0x6a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <TIM_Base_SetConfig+0xe4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_Base_SetConfig+0x6a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <TIM_Base_SetConfig+0xe8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_Base_SetConfig+0x6a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a21      	ldr	r2, [pc, #132]	; (8006cf4 <TIM_Base_SetConfig+0xec>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d108      	bne.n	8006c84 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a0e      	ldr	r2, [pc, #56]	; (8006ce4 <TIM_Base_SetConfig+0xdc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0xc0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a0e      	ldr	r2, [pc, #56]	; (8006cec <TIM_Base_SetConfig+0xe4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0xc0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a0d      	ldr	r2, [pc, #52]	; (8006cf0 <TIM_Base_SetConfig+0xe8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0xc0>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <TIM_Base_SetConfig+0xec>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	615a      	str	r2, [r3, #20]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 0302 	bic.w	r3, r3, #2
 8006d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <TIM_OC1_SetConfig+0xfc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <TIM_OC1_SetConfig+0x78>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a27      	ldr	r2, [pc, #156]	; (8006df8 <TIM_OC1_SetConfig+0x100>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <TIM_OC1_SetConfig+0x78>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <TIM_OC1_SetConfig+0x104>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC1_SetConfig+0x78>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a25      	ldr	r2, [pc, #148]	; (8006e00 <TIM_OC1_SetConfig+0x108>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10c      	bne.n	8006d8a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0308 	bic.w	r3, r3, #8
 8006d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 0304 	bic.w	r3, r3, #4
 8006d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <TIM_OC1_SetConfig+0xfc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_OC1_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <TIM_OC1_SetConfig+0x100>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <TIM_OC1_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <TIM_OC1_SetConfig+0x104>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_OC1_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <TIM_OC1_SetConfig+0x108>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d111      	bne.n	8006dce <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800

08006e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0210 	bic.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0320 	bic.w	r3, r3, #32
 8006e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a24      	ldr	r2, [pc, #144]	; (8006ef4 <TIM_OC2_SetConfig+0xf0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10d      	bne.n	8006e84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <TIM_OC2_SetConfig+0xf0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xa0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <TIM_OC2_SetConfig+0xf4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xa0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a19      	ldr	r2, [pc, #100]	; (8006efc <TIM_OC2_SetConfig+0xf8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xa0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <TIM_OC2_SetConfig+0xfc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d113      	bne.n	8006ecc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40014400 	.word	0x40014400
 8006f00:	40014800 	.word	0x40014800

08006f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <TIM_OC3_SetConfig+0xec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10d      	bne.n	8006f82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <TIM_OC3_SetConfig+0xec>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x9e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <TIM_OC3_SetConfig+0xf0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x9e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <TIM_OC3_SetConfig+0xf4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x9e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <TIM_OC3_SetConfig+0xf8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d113      	bne.n	8006fca <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400
 8006ffc:	40014800 	.word	0x40014800

08007000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800704e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	031b      	lsls	r3, r3, #12
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC4_SetConfig+0xb8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00b      	beq.n	800707c <TIM_OC4_SetConfig+0x7c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <TIM_OC4_SetConfig+0xbc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <TIM_OC4_SetConfig+0x7c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_OC4_SetConfig+0xc0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC4_SetConfig+0x7c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <TIM_OC4_SetConfig+0xc4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d109      	bne.n	8007090 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	019b      	lsls	r3, r3, #6
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800710c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a15      	ldr	r2, [pc, #84]	; (8007174 <TIM_OC5_SetConfig+0xac>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_OC5_SetConfig+0x72>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a14      	ldr	r2, [pc, #80]	; (8007178 <TIM_OC5_SetConfig+0xb0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_OC5_SetConfig+0x72>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a13      	ldr	r2, [pc, #76]	; (800717c <TIM_OC5_SetConfig+0xb4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC5_SetConfig+0x72>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a12      	ldr	r2, [pc, #72]	; (8007180 <TIM_OC5_SetConfig+0xb8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d109      	bne.n	800714e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40014000 	.word	0x40014000
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800

08007184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <TIM_OC6_SetConfig+0xb0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC6_SetConfig+0x74>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a15      	ldr	r2, [pc, #84]	; (8007238 <TIM_OC6_SetConfig+0xb4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC6_SetConfig+0x74>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a14      	ldr	r2, [pc, #80]	; (800723c <TIM_OC6_SetConfig+0xb8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC6_SetConfig+0x74>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <TIM_OC6_SetConfig+0xbc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d109      	bne.n	800720c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	029b      	lsls	r3, r3, #10
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40014000 	.word	0x40014000
 800723c:	40014400 	.word	0x40014400
 8007240:	40014800 	.word	0x40014800

08007244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0201 	bic.w	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800726e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f023 030a 	bic.w	r3, r3, #10
 8007280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b087      	sub	sp, #28
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	f023 0210 	bic.w	r2, r3, #16
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	031b      	lsls	r3, r3, #12
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	f043 0307 	orr.w	r3, r3, #7
 8007324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	609a      	str	r2, [r3, #8]
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	021a      	lsls	r2, r3, #8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	431a      	orrs	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4313      	orrs	r3, r2
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	609a      	str	r2, [r3, #8]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2201      	movs	r2, #1
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	43db      	mvns	r3, r3
 800739a:	401a      	ands	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	431a      	orrs	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d8:	2302      	movs	r3, #2
 80073da:	e054      	b.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a24      	ldr	r2, [pc, #144]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d108      	bne.n	8007418 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800740c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a17      	ldr	r2, [pc, #92]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d009      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a13      	ldr	r2, [pc, #76]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a11      	ldr	r2, [pc, #68]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10c      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40000400 	.word	0x40000400
 800749c:	40014000 	.word	0x40014000

080074a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e060      	b.n	800757e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a14      	ldr	r2, [pc, #80]	; (800758c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d115      	bne.n	800756c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	051b      	lsls	r3, r3, #20
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40012c00 	.word	0x40012c00

08007590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e040      	b.n	8007660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb f8e0 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2224      	movs	r2, #36	; 0x24
 80075f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0201 	bic.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fbb2 	bl	8007d74 <UART_SetConfig>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e022      	b.n	8007660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fcde 	bl	8007fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fd65 	bl	8008128 <UART_CheckIdleState>
 800765e:	4603      	mov	r3, r0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800767c:	2b20      	cmp	r3, #32
 800767e:	f040 8082 	bne.w	8007786 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_UART_Transmit+0x26>
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e07a      	b.n	8007788 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Transmit+0x38>
 800769c:	2302      	movs	r3, #2
 800769e:	e073      	b.n	8007788 <HAL_UART_Transmit+0x120>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2221      	movs	r2, #33	; 0x21
 80076b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b6:	f7fb f97d 	bl	80029b4 <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d4:	d108      	bne.n	80076e8 <HAL_UART_Transmit+0x80>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	e003      	b.n	80076f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80076f8:	e02d      	b.n	8007756 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	2180      	movs	r1, #128	; 0x80
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fd58 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e039      	b.n	8007788 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	881a      	ldrh	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007726:	b292      	uxth	r2, r2
 8007728:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	3302      	adds	r3, #2
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	e008      	b.n	8007744 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	b292      	uxth	r2, r2
 800773c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	3301      	adds	r3, #1
 8007742:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1cb      	bne.n	80076fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2200      	movs	r2, #0
 800776a:	2140      	movs	r1, #64	; 0x40
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fd24 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e005      	b.n	8007788 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2220      	movs	r2, #32
 8007780:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	f040 80bf 	bne.w	8007928 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_UART_Receive+0x26>
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e0b7      	b.n	800792a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Receive+0x38>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e0b0      	b.n	800792a <HAL_UART_Receive+0x19a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2222      	movs	r2, #34	; 0x22
 80077dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e4:	f7fb f8e6 	bl	80029b4 <HAL_GetTick>
 80077e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	d10e      	bne.n	8007822 <HAL_UART_Receive+0x92>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_UART_Receive+0x88>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007816:	e02d      	b.n	8007874 <HAL_UART_Receive+0xe4>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007820:	e028      	b.n	8007874 <HAL_UART_Receive+0xe4>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <HAL_UART_Receive+0xb6>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <HAL_UART_Receive+0xac>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800783a:	e01b      	b.n	8007874 <HAL_UART_Receive+0xe4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	227f      	movs	r2, #127	; 0x7f
 8007840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007844:	e016      	b.n	8007874 <HAL_UART_Receive+0xe4>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784e:	d10d      	bne.n	800786c <HAL_UART_Receive+0xdc>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <HAL_UART_Receive+0xd2>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	227f      	movs	r2, #127	; 0x7f
 800785c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007860:	e008      	b.n	8007874 <HAL_UART_Receive+0xe4>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	223f      	movs	r2, #63	; 0x3f
 8007866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800786a:	e003      	b.n	8007874 <HAL_UART_Receive+0xe4>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800787a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d108      	bne.n	8007898 <HAL_UART_Receive+0x108>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	e003      	b.n	80078a0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800789c:	2300      	movs	r3, #0
 800789e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078a8:	e033      	b.n	8007912 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	2120      	movs	r1, #32
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 fc80 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e032      	b.n	800792a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10c      	bne.n	80078e4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	8a7b      	ldrh	r3, [r7, #18]
 80078d4:	4013      	ands	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3302      	adds	r3, #2
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e00d      	b.n	8007900 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	8a7b      	ldrh	r3, [r7, #18]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4013      	ands	r3, r2
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3301      	adds	r3, #1
 80078fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1c5      	bne.n	80078aa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e000      	b.n	800792a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f640 030f 	movw	r3, #2063	; 0x80f
 800795a:	4013      	ands	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d113      	bne.n	800798c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00e      	beq.n	800798c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 81cd 	beq.w	8007d1c <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
      }
      return;
 800798a:	e1c7      	b.n	8007d1c <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80e3 	beq.w	8007b5a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	4ba5      	ldr	r3, [pc, #660]	; (8007c38 <HAL_UART_IRQHandler+0x304>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80d8 	beq.w	8007b5a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <HAL_UART_IRQHandler+0xa2>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2201      	movs	r2, #1
 80079c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079cc:	f043 0201 	orr.w	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <HAL_UART_IRQHandler+0xce>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2202      	movs	r2, #2
 80079f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	f043 0204 	orr.w	r2, r3, #4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d010      	beq.n	8007a2e <HAL_UART_IRQHandler+0xfa>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2204      	movs	r2, #4
 8007a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a24:	f043 0202 	orr.w	r2, r3, #2
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d015      	beq.n	8007a64 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d104      	bne.n	8007a4c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2208      	movs	r2, #8
 8007a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	f043 0208 	orr.w	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <HAL_UART_IRQHandler+0x15e>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8141 	beq.w	8007d20 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b40      	cmp	r3, #64	; 0x40
 8007ad6:	d004      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d031      	beq.n	8007b46 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fbe5 	bl	80082b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d123      	bne.n	8007b3e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d013      	beq.n	8007b36 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	4a4a      	ldr	r2, [pc, #296]	; (8007c3c <HAL_UART_IRQHandler+0x308>)
 8007b14:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fc f8b6 	bl	8003c8c <HAL_DMA_Abort_IT>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d017      	beq.n	8007b56 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	e00f      	b.n	8007b56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f906 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	e00b      	b.n	8007b56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f902 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e007      	b.n	8007b56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8fe 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b54:	e0e4      	b.n	8007d20 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b56:	bf00      	nop
    return;
 8007b58:	e0e2      	b.n	8007d20 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	f040 80a7 	bne.w	8007cb2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80a1 	beq.w	8007cb2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0310 	and.w	r3, r3, #16
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 809b 	beq.w	8007cb2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2210      	movs	r2, #16
 8007b82:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d156      	bne.n	8007c40 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007b9c:	893b      	ldrh	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80c0 	beq.w	8007d24 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007baa:	893a      	ldrh	r2, [r7, #8]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	f080 80b9 	bcs.w	8007d24 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	893a      	ldrh	r2, [r7, #8]
 8007bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d02a      	beq.n	8007c1a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bd2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0201 	bic.w	r2, r2, #1
 8007be2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0210 	bic.w	r2, r2, #16
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc f800 	bl	8003c1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f894 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c34:	e076      	b.n	8007d24 <HAL_UART_IRQHandler+0x3f0>
 8007c36:	bf00      	nop
 8007c38:	04000120 	.word	0x04000120
 8007c3c:	08008311 	.word	0x08008311
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d064      	beq.n	8007d28 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8007c5e:	897b      	ldrh	r3, [r7, #10]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d061      	beq.n	8007d28 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c72:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0210 	bic.w	r2, r2, #16
 8007ca4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ca6:	897b      	ldrh	r3, [r7, #10]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f856 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cb0:	e03a      	b.n	8007d28 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00d      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x3a4>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb4c 	bl	800836e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cd6:	e02a      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00d      	beq.n	8007cfe <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01b      	beq.n	8007d2c <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
    }
    return;
 8007cfc:	e016      	b.n	8007d2c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d012      	beq.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fb12 	bl	800833c <UART_EndTransmit_IT>
    return;
 8007d18:	bf00      	nop
 8007d1a:	e008      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007d1c:	bf00      	nop
 8007d1e:	e006      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
    return;
 8007d20:	bf00      	nop
 8007d22:	e004      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007d24:	bf00      	nop
 8007d26:	e002      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
      return;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_IRQHandler+0x3fa>
    return;
 8007d2c:	bf00      	nop
  }

}
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b8b      	ldr	r3, [pc, #556]	; (8007fcc <UART_SetConfig+0x258>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	6979      	ldr	r1, [r7, #20]
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a79      	ldr	r2, [pc, #484]	; (8007fd0 <UART_SetConfig+0x25c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d121      	bne.n	8007e34 <UART_SetConfig+0xc0>
 8007df0:	4b78      	ldr	r3, [pc, #480]	; (8007fd4 <UART_SetConfig+0x260>)
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d817      	bhi.n	8007e2c <UART_SetConfig+0xb8>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0x90>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e15 	.word	0x08007e15
 8007e08:	08007e21 	.word	0x08007e21
 8007e0c:	08007e27 	.word	0x08007e27
 8007e10:	08007e1b 	.word	0x08007e1b
 8007e14:	2300      	movs	r3, #0
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	e01e      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	77fb      	strb	r3, [r7, #31]
 8007e1e:	e01b      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e20:	2304      	movs	r3, #4
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e018      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e26:	2308      	movs	r3, #8
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e015      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	bf00      	nop
 8007e32:	e011      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a67      	ldr	r2, [pc, #412]	; (8007fd8 <UART_SetConfig+0x264>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d102      	bne.n	8007e44 <UART_SetConfig+0xd0>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e009      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a64      	ldr	r2, [pc, #400]	; (8007fdc <UART_SetConfig+0x268>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d102      	bne.n	8007e54 <UART_SetConfig+0xe0>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e001      	b.n	8007e58 <UART_SetConfig+0xe4>
 8007e54:	2310      	movs	r3, #16
 8007e56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e60:	d15c      	bne.n	8007f1c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8007e62:	7ffb      	ldrb	r3, [r7, #31]
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d828      	bhi.n	8007eba <UART_SetConfig+0x146>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0xfc>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007e9d 	.word	0x08007e9d
 8007e78:	08007ea5 	.word	0x08007ea5
 8007e7c:	08007ebb 	.word	0x08007ebb
 8007e80:	08007eab 	.word	0x08007eab
 8007e84:	08007ebb 	.word	0x08007ebb
 8007e88:	08007ebb 	.word	0x08007ebb
 8007e8c:	08007ebb 	.word	0x08007ebb
 8007e90:	08007eb3 	.word	0x08007eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e94:	f7fe f83a 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007e98:	61b8      	str	r0, [r7, #24]
        break;
 8007e9a:	e013      	b.n	8007ec4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9c:	f7fe f858 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 8007ea0:	61b8      	str	r0, [r7, #24]
        break;
 8007ea2:	e00f      	b.n	8007ec4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea4:	4b4e      	ldr	r3, [pc, #312]	; (8007fe0 <UART_SetConfig+0x26c>)
 8007ea6:	61bb      	str	r3, [r7, #24]
        break;
 8007ea8:	e00c      	b.n	8007ec4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eaa:	f7fd ffb9 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8007eae:	61b8      	str	r0, [r7, #24]
        break;
 8007eb0:	e008      	b.n	8007ec4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb6:	61bb      	str	r3, [r7, #24]
        break;
 8007eb8:	e004      	b.n	8007ec4 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d074      	beq.n	8007fb4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	005a      	lsls	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b0f      	cmp	r3, #15
 8007ee6:	d916      	bls.n	8007f16 <UART_SetConfig+0x1a2>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eee:	d212      	bcs.n	8007f16 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f023 030f 	bic.w	r3, r3, #15
 8007ef8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	89fb      	ldrh	r3, [r7, #14]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	89fa      	ldrh	r2, [r7, #14]
 8007f12:	60da      	str	r2, [r3, #12]
 8007f14:	e04e      	b.n	8007fb4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	77bb      	strb	r3, [r7, #30]
 8007f1a:	e04b      	b.n	8007fb4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f1c:	7ffb      	ldrb	r3, [r7, #31]
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d827      	bhi.n	8007f72 <UART_SetConfig+0x1fe>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0x1b4>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	08007f73 	.word	0x08007f73
 8007f38:	08007f63 	.word	0x08007f63
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007f73 	.word	0x08007f73
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f6b 	.word	0x08007f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4c:	f7fd ffde 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007f50:	61b8      	str	r0, [r7, #24]
        break;
 8007f52:	e013      	b.n	8007f7c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f54:	f7fd fffc 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 8007f58:	61b8      	str	r0, [r7, #24]
        break;
 8007f5a:	e00f      	b.n	8007f7c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f5c:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <UART_SetConfig+0x26c>)
 8007f5e:	61bb      	str	r3, [r7, #24]
        break;
 8007f60:	e00c      	b.n	8007f7c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f62:	f7fd ff5d 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8007f66:	61b8      	str	r0, [r7, #24]
        break;
 8007f68:	e008      	b.n	8007f7c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f6e:	61bb      	str	r3, [r7, #24]
        break;
 8007f70:	e004      	b.n	8007f7c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	77bb      	strb	r3, [r7, #30]
        break;
 8007f7a:	bf00      	nop
    }

    if (pclk != 0U)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d018      	beq.n	8007fb4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	085a      	lsrs	r2, r3, #1
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b0f      	cmp	r3, #15
 8007f9c:	d908      	bls.n	8007fb0 <UART_SetConfig+0x23c>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa4:	d204      	bcs.n	8007fb0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	e001      	b.n	8007fb4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	efff69f3 	.word	0xefff69f3
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	40004400 	.word	0x40004400
 8007fdc:	40004800 	.word	0x40004800
 8007fe0:	007a1200 	.word	0x007a1200

08007fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01a      	beq.n	80080fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e2:	d10a      	bne.n	80080fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af02      	add	r7, sp, #8
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008138:	f7fa fc3c 	bl	80029b4 <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b08      	cmp	r3, #8
 800814a:	d10e      	bne.n	800816a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800814c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f82d 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e023      	b.n	80081b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b04      	cmp	r3, #4
 8008176:	d10e      	bne.n	8008196 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f817 	bl	80081ba <UART_WaitOnFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e00d      	b.n	80081b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ca:	e05e      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d2:	d05a      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d4:	f7fa fbee 	bl	80029b4 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <UART_WaitOnFlagUntilTimeout+0x30>
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d11b      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2220      	movs	r2, #32
 8008214:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e043      	b.n	80082aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	d02c      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800823e:	d124      	bne.n	800828a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e00f      	b.n	80082aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69da      	ldr	r2, [r3, #28]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4013      	ands	r3, r2
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	429a      	cmp	r2, r3
 8008298:	bf0c      	ite	eq
 800829a:	2301      	moveq	r3, #1
 800829c:	2300      	movne	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d091      	beq.n	80081cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d107      	bne.n	80082f2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0210 	bic.w	r2, r2, #16
 80082f0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fd0a 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008352:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fce7 	bl	8007d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
	...

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	; (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000024 	.word	0x20000024

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4e0d      	ldr	r6, [pc, #52]	; (80083c8 <__libc_init_array+0x38>)
 8008394:	4c0d      	ldr	r4, [pc, #52]	; (80083cc <__libc_init_array+0x3c>)
 8008396:	1ba4      	subs	r4, r4, r6
 8008398:	10a4      	asrs	r4, r4, #2
 800839a:	2500      	movs	r5, #0
 800839c:	42a5      	cmp	r5, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	4e0b      	ldr	r6, [pc, #44]	; (80083d0 <__libc_init_array+0x40>)
 80083a2:	4c0c      	ldr	r4, [pc, #48]	; (80083d4 <__libc_init_array+0x44>)
 80083a4:	f005 fede 	bl	800e164 <_init>
 80083a8:	1ba4      	subs	r4, r4, r6
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	2500      	movs	r5, #0
 80083ae:	42a5      	cmp	r5, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083b8:	4798      	blx	r3
 80083ba:	3501      	adds	r5, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083c2:	4798      	blx	r3
 80083c4:	3501      	adds	r5, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	0800e780 	.word	0x0800e780
 80083cc:	0800e780 	.word	0x0800e780
 80083d0:	0800e780 	.word	0x0800e780
 80083d4:	0800e784 	.word	0x0800e784

080083d8 <memcpy>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	1e43      	subs	r3, r0, #1
 80083dc:	440a      	add	r2, r1
 80083de:	4291      	cmp	r1, r2
 80083e0:	d100      	bne.n	80083e4 <memcpy+0xc>
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ec:	e7f7      	b.n	80083de <memcpy+0x6>

080083ee <memset>:
 80083ee:	4402      	add	r2, r0
 80083f0:	4603      	mov	r3, r0
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d100      	bne.n	80083f8 <memset+0xa>
 80083f6:	4770      	bx	lr
 80083f8:	f803 1b01 	strb.w	r1, [r3], #1
 80083fc:	e7f9      	b.n	80083f2 <memset+0x4>

080083fe <__cvt>:
 80083fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008402:	ec55 4b10 	vmov	r4, r5, d0
 8008406:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008408:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800840c:	2d00      	cmp	r5, #0
 800840e:	460e      	mov	r6, r1
 8008410:	4691      	mov	r9, r2
 8008412:	4619      	mov	r1, r3
 8008414:	bfb8      	it	lt
 8008416:	4622      	movlt	r2, r4
 8008418:	462b      	mov	r3, r5
 800841a:	f027 0720 	bic.w	r7, r7, #32
 800841e:	bfbb      	ittet	lt
 8008420:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008424:	461d      	movlt	r5, r3
 8008426:	2300      	movge	r3, #0
 8008428:	232d      	movlt	r3, #45	; 0x2d
 800842a:	bfb8      	it	lt
 800842c:	4614      	movlt	r4, r2
 800842e:	2f46      	cmp	r7, #70	; 0x46
 8008430:	700b      	strb	r3, [r1, #0]
 8008432:	d004      	beq.n	800843e <__cvt+0x40>
 8008434:	2f45      	cmp	r7, #69	; 0x45
 8008436:	d100      	bne.n	800843a <__cvt+0x3c>
 8008438:	3601      	adds	r6, #1
 800843a:	2102      	movs	r1, #2
 800843c:	e000      	b.n	8008440 <__cvt+0x42>
 800843e:	2103      	movs	r1, #3
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	ab02      	add	r3, sp, #8
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4632      	mov	r2, r6
 800844a:	4653      	mov	r3, sl
 800844c:	ec45 4b10 	vmov	d0, r4, r5
 8008450:	f001 ff6a 	bl	800a328 <_dtoa_r>
 8008454:	2f47      	cmp	r7, #71	; 0x47
 8008456:	4680      	mov	r8, r0
 8008458:	d102      	bne.n	8008460 <__cvt+0x62>
 800845a:	f019 0f01 	tst.w	r9, #1
 800845e:	d026      	beq.n	80084ae <__cvt+0xb0>
 8008460:	2f46      	cmp	r7, #70	; 0x46
 8008462:	eb08 0906 	add.w	r9, r8, r6
 8008466:	d111      	bne.n	800848c <__cvt+0x8e>
 8008468:	f898 3000 	ldrb.w	r3, [r8]
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d10a      	bne.n	8008486 <__cvt+0x88>
 8008470:	2200      	movs	r2, #0
 8008472:	2300      	movs	r3, #0
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800847c:	b918      	cbnz	r0, 8008486 <__cvt+0x88>
 800847e:	f1c6 0601 	rsb	r6, r6, #1
 8008482:	f8ca 6000 	str.w	r6, [sl]
 8008486:	f8da 3000 	ldr.w	r3, [sl]
 800848a:	4499      	add	r9, r3
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	4620      	mov	r0, r4
 8008492:	4629      	mov	r1, r5
 8008494:	f7f8 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008498:	b938      	cbnz	r0, 80084aa <__cvt+0xac>
 800849a:	2230      	movs	r2, #48	; 0x30
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	454b      	cmp	r3, r9
 80084a0:	d205      	bcs.n	80084ae <__cvt+0xb0>
 80084a2:	1c59      	adds	r1, r3, #1
 80084a4:	9103      	str	r1, [sp, #12]
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	e7f8      	b.n	800849c <__cvt+0x9e>
 80084aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084b2:	eba3 0308 	sub.w	r3, r3, r8
 80084b6:	4640      	mov	r0, r8
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	b004      	add	sp, #16
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084c0 <__exponent>:
 80084c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084c2:	2900      	cmp	r1, #0
 80084c4:	4604      	mov	r4, r0
 80084c6:	bfba      	itte	lt
 80084c8:	4249      	neglt	r1, r1
 80084ca:	232d      	movlt	r3, #45	; 0x2d
 80084cc:	232b      	movge	r3, #43	; 0x2b
 80084ce:	2909      	cmp	r1, #9
 80084d0:	f804 2b02 	strb.w	r2, [r4], #2
 80084d4:	7043      	strb	r3, [r0, #1]
 80084d6:	dd20      	ble.n	800851a <__exponent+0x5a>
 80084d8:	f10d 0307 	add.w	r3, sp, #7
 80084dc:	461f      	mov	r7, r3
 80084de:	260a      	movs	r6, #10
 80084e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80084e4:	fb06 1115 	mls	r1, r6, r5, r1
 80084e8:	3130      	adds	r1, #48	; 0x30
 80084ea:	2d09      	cmp	r5, #9
 80084ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084f0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80084f4:	4629      	mov	r1, r5
 80084f6:	dc09      	bgt.n	800850c <__exponent+0x4c>
 80084f8:	3130      	adds	r1, #48	; 0x30
 80084fa:	3b02      	subs	r3, #2
 80084fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008500:	42bb      	cmp	r3, r7
 8008502:	4622      	mov	r2, r4
 8008504:	d304      	bcc.n	8008510 <__exponent+0x50>
 8008506:	1a10      	subs	r0, r2, r0
 8008508:	b003      	add	sp, #12
 800850a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800850c:	4613      	mov	r3, r2
 800850e:	e7e7      	b.n	80084e0 <__exponent+0x20>
 8008510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008514:	f804 2b01 	strb.w	r2, [r4], #1
 8008518:	e7f2      	b.n	8008500 <__exponent+0x40>
 800851a:	2330      	movs	r3, #48	; 0x30
 800851c:	4419      	add	r1, r3
 800851e:	7083      	strb	r3, [r0, #2]
 8008520:	1d02      	adds	r2, r0, #4
 8008522:	70c1      	strb	r1, [r0, #3]
 8008524:	e7ef      	b.n	8008506 <__exponent+0x46>
	...

08008528 <_printf_float>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	b08d      	sub	sp, #52	; 0x34
 800852e:	460c      	mov	r4, r1
 8008530:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008534:	4616      	mov	r6, r2
 8008536:	461f      	mov	r7, r3
 8008538:	4605      	mov	r5, r0
 800853a:	f003 f953 	bl	800b7e4 <_localeconv_r>
 800853e:	6803      	ldr	r3, [r0, #0]
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f7 fe44 	bl	80001d0 <strlen>
 8008548:	2300      	movs	r3, #0
 800854a:	930a      	str	r3, [sp, #40]	; 0x28
 800854c:	f8d8 3000 	ldr.w	r3, [r8]
 8008550:	9005      	str	r0, [sp, #20]
 8008552:	3307      	adds	r3, #7
 8008554:	f023 0307 	bic.w	r3, r3, #7
 8008558:	f103 0208 	add.w	r2, r3, #8
 800855c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008560:	f8d4 b000 	ldr.w	fp, [r4]
 8008564:	f8c8 2000 	str.w	r2, [r8]
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008570:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008574:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008578:	9307      	str	r3, [sp, #28]
 800857a:	f8cd 8018 	str.w	r8, [sp, #24]
 800857e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008582:	4ba7      	ldr	r3, [pc, #668]	; (8008820 <_printf_float+0x2f8>)
 8008584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008588:	f7f8 fad0 	bl	8000b2c <__aeabi_dcmpun>
 800858c:	bb70      	cbnz	r0, 80085ec <_printf_float+0xc4>
 800858e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008592:	4ba3      	ldr	r3, [pc, #652]	; (8008820 <_printf_float+0x2f8>)
 8008594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008598:	f7f8 faaa 	bl	8000af0 <__aeabi_dcmple>
 800859c:	bb30      	cbnz	r0, 80085ec <_printf_float+0xc4>
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f8 fa99 	bl	8000adc <__aeabi_dcmplt>
 80085aa:	b110      	cbz	r0, 80085b2 <_printf_float+0x8a>
 80085ac:	232d      	movs	r3, #45	; 0x2d
 80085ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b2:	4a9c      	ldr	r2, [pc, #624]	; (8008824 <_printf_float+0x2fc>)
 80085b4:	4b9c      	ldr	r3, [pc, #624]	; (8008828 <_printf_float+0x300>)
 80085b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80085ba:	bf8c      	ite	hi
 80085bc:	4690      	movhi	r8, r2
 80085be:	4698      	movls	r8, r3
 80085c0:	2303      	movs	r3, #3
 80085c2:	f02b 0204 	bic.w	r2, fp, #4
 80085c6:	6123      	str	r3, [r4, #16]
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	9700      	str	r7, [sp, #0]
 80085d0:	4633      	mov	r3, r6
 80085d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f9e6 	bl	80089a8 <_printf_common>
 80085dc:	3001      	adds	r0, #1
 80085de:	f040 808d 	bne.w	80086fc <_printf_float+0x1d4>
 80085e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085e6:	b00d      	add	sp, #52	; 0x34
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f8 fa9a 	bl	8000b2c <__aeabi_dcmpun>
 80085f8:	b110      	cbz	r0, 8008600 <_printf_float+0xd8>
 80085fa:	4a8c      	ldr	r2, [pc, #560]	; (800882c <_printf_float+0x304>)
 80085fc:	4b8c      	ldr	r3, [pc, #560]	; (8008830 <_printf_float+0x308>)
 80085fe:	e7da      	b.n	80085b6 <_printf_float+0x8e>
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	1c4b      	adds	r3, r1, #1
 8008604:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008608:	a80a      	add	r0, sp, #40	; 0x28
 800860a:	d13e      	bne.n	800868a <_printf_float+0x162>
 800860c:	2306      	movs	r3, #6
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	2300      	movs	r3, #0
 8008612:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008616:	ab09      	add	r3, sp, #36	; 0x24
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	ec49 8b10 	vmov	d0, r8, r9
 800861e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	f8cd a004 	str.w	sl, [sp, #4]
 8008628:	6861      	ldr	r1, [r4, #4]
 800862a:	4628      	mov	r0, r5
 800862c:	f7ff fee7 	bl	80083fe <__cvt>
 8008630:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008634:	2b47      	cmp	r3, #71	; 0x47
 8008636:	4680      	mov	r8, r0
 8008638:	d109      	bne.n	800864e <_printf_float+0x126>
 800863a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863c:	1cd8      	adds	r0, r3, #3
 800863e:	db02      	blt.n	8008646 <_printf_float+0x11e>
 8008640:	6862      	ldr	r2, [r4, #4]
 8008642:	4293      	cmp	r3, r2
 8008644:	dd47      	ble.n	80086d6 <_printf_float+0x1ae>
 8008646:	f1aa 0a02 	sub.w	sl, sl, #2
 800864a:	fa5f fa8a 	uxtb.w	sl, sl
 800864e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008654:	d824      	bhi.n	80086a0 <_printf_float+0x178>
 8008656:	3901      	subs	r1, #1
 8008658:	4652      	mov	r2, sl
 800865a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800865e:	9109      	str	r1, [sp, #36]	; 0x24
 8008660:	f7ff ff2e 	bl	80084c0 <__exponent>
 8008664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008666:	1813      	adds	r3, r2, r0
 8008668:	2a01      	cmp	r2, #1
 800866a:	4681      	mov	r9, r0
 800866c:	6123      	str	r3, [r4, #16]
 800866e:	dc02      	bgt.n	8008676 <_printf_float+0x14e>
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	07d1      	lsls	r1, r2, #31
 8008674:	d501      	bpl.n	800867a <_printf_float+0x152>
 8008676:	3301      	adds	r3, #1
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0a5      	beq.n	80085ce <_printf_float+0xa6>
 8008682:	232d      	movs	r3, #45	; 0x2d
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	e7a1      	b.n	80085ce <_printf_float+0xa6>
 800868a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800868e:	f000 8177 	beq.w	8008980 <_printf_float+0x458>
 8008692:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008696:	d1bb      	bne.n	8008610 <_printf_float+0xe8>
 8008698:	2900      	cmp	r1, #0
 800869a:	d1b9      	bne.n	8008610 <_printf_float+0xe8>
 800869c:	2301      	movs	r3, #1
 800869e:	e7b6      	b.n	800860e <_printf_float+0xe6>
 80086a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80086a4:	d119      	bne.n	80086da <_printf_float+0x1b2>
 80086a6:	2900      	cmp	r1, #0
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	dd0c      	ble.n	80086c6 <_printf_float+0x19e>
 80086ac:	6121      	str	r1, [r4, #16]
 80086ae:	b913      	cbnz	r3, 80086b6 <_printf_float+0x18e>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	07d2      	lsls	r2, r2, #31
 80086b4:	d502      	bpl.n	80086bc <_printf_float+0x194>
 80086b6:	3301      	adds	r3, #1
 80086b8:	440b      	add	r3, r1
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086be:	65a3      	str	r3, [r4, #88]	; 0x58
 80086c0:	f04f 0900 	mov.w	r9, #0
 80086c4:	e7d9      	b.n	800867a <_printf_float+0x152>
 80086c6:	b913      	cbnz	r3, 80086ce <_printf_float+0x1a6>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	07d0      	lsls	r0, r2, #31
 80086cc:	d501      	bpl.n	80086d2 <_printf_float+0x1aa>
 80086ce:	3302      	adds	r3, #2
 80086d0:	e7f3      	b.n	80086ba <_printf_float+0x192>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7f1      	b.n	80086ba <_printf_float+0x192>
 80086d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80086da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086de:	4293      	cmp	r3, r2
 80086e0:	db05      	blt.n	80086ee <_printf_float+0x1c6>
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	6123      	str	r3, [r4, #16]
 80086e6:	07d1      	lsls	r1, r2, #31
 80086e8:	d5e8      	bpl.n	80086bc <_printf_float+0x194>
 80086ea:	3301      	adds	r3, #1
 80086ec:	e7e5      	b.n	80086ba <_printf_float+0x192>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfd4      	ite	le
 80086f2:	f1c3 0302 	rsble	r3, r3, #2
 80086f6:	2301      	movgt	r3, #1
 80086f8:	4413      	add	r3, r2
 80086fa:	e7de      	b.n	80086ba <_printf_float+0x192>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	055a      	lsls	r2, r3, #21
 8008700:	d407      	bmi.n	8008712 <_printf_float+0x1ea>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	4642      	mov	r2, r8
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	d12b      	bne.n	8008768 <_printf_float+0x240>
 8008710:	e767      	b.n	80085e2 <_printf_float+0xba>
 8008712:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008716:	f240 80dc 	bls.w	80088d2 <_printf_float+0x3aa>
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008722:	f7f8 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008726:	2800      	cmp	r0, #0
 8008728:	d033      	beq.n	8008792 <_printf_float+0x26a>
 800872a:	2301      	movs	r3, #1
 800872c:	4a41      	ldr	r2, [pc, #260]	; (8008834 <_printf_float+0x30c>)
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	f43f af54 	beq.w	80085e2 <_printf_float+0xba>
 800873a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873e:	429a      	cmp	r2, r3
 8008740:	db02      	blt.n	8008748 <_printf_float+0x220>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	07d8      	lsls	r0, r3, #31
 8008746:	d50f      	bpl.n	8008768 <_printf_float+0x240>
 8008748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f af45 	beq.w	80085e2 <_printf_float+0xba>
 8008758:	f04f 0800 	mov.w	r8, #0
 800875c:	f104 091a 	add.w	r9, r4, #26
 8008760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008762:	3b01      	subs	r3, #1
 8008764:	4543      	cmp	r3, r8
 8008766:	dc09      	bgt.n	800877c <_printf_float+0x254>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	079b      	lsls	r3, r3, #30
 800876c:	f100 8103 	bmi.w	8008976 <_printf_float+0x44e>
 8008770:	68e0      	ldr	r0, [r4, #12]
 8008772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008774:	4298      	cmp	r0, r3
 8008776:	bfb8      	it	lt
 8008778:	4618      	movlt	r0, r3
 800877a:	e734      	b.n	80085e6 <_printf_float+0xbe>
 800877c:	2301      	movs	r3, #1
 800877e:	464a      	mov	r2, r9
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	47b8      	blx	r7
 8008786:	3001      	adds	r0, #1
 8008788:	f43f af2b 	beq.w	80085e2 <_printf_float+0xba>
 800878c:	f108 0801 	add.w	r8, r8, #1
 8008790:	e7e6      	b.n	8008760 <_printf_float+0x238>
 8008792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	dc2b      	bgt.n	80087f0 <_printf_float+0x2c8>
 8008798:	2301      	movs	r3, #1
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <_printf_float+0x30c>)
 800879c:	4631      	mov	r1, r6
 800879e:	4628      	mov	r0, r5
 80087a0:	47b8      	blx	r7
 80087a2:	3001      	adds	r0, #1
 80087a4:	f43f af1d 	beq.w	80085e2 <_printf_float+0xba>
 80087a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087aa:	b923      	cbnz	r3, 80087b6 <_printf_float+0x28e>
 80087ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ae:	b913      	cbnz	r3, 80087b6 <_printf_float+0x28e>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d5d8      	bpl.n	8008768 <_printf_float+0x240>
 80087b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	f43f af0e 	beq.w	80085e2 <_printf_float+0xba>
 80087c6:	f04f 0900 	mov.w	r9, #0
 80087ca:	f104 0a1a 	add.w	sl, r4, #26
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	425b      	negs	r3, r3
 80087d2:	454b      	cmp	r3, r9
 80087d4:	dc01      	bgt.n	80087da <_printf_float+0x2b2>
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	e794      	b.n	8008704 <_printf_float+0x1dc>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b8      	blx	r7
 80087e4:	3001      	adds	r0, #1
 80087e6:	f43f aefc 	beq.w	80085e2 <_printf_float+0xba>
 80087ea:	f109 0901 	add.w	r9, r9, #1
 80087ee:	e7ee      	b.n	80087ce <_printf_float+0x2a6>
 80087f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bfa8      	it	ge
 80087f8:	461a      	movge	r2, r3
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	4691      	mov	r9, r2
 80087fe:	dd07      	ble.n	8008810 <_printf_float+0x2e8>
 8008800:	4613      	mov	r3, r2
 8008802:	4631      	mov	r1, r6
 8008804:	4642      	mov	r2, r8
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f aee9 	beq.w	80085e2 <_printf_float+0xba>
 8008810:	f104 031a 	add.w	r3, r4, #26
 8008814:	f04f 0b00 	mov.w	fp, #0
 8008818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800881c:	9306      	str	r3, [sp, #24]
 800881e:	e015      	b.n	800884c <_printf_float+0x324>
 8008820:	7fefffff 	.word	0x7fefffff
 8008824:	0800e288 	.word	0x0800e288
 8008828:	0800e284 	.word	0x0800e284
 800882c:	0800e290 	.word	0x0800e290
 8008830:	0800e28c 	.word	0x0800e28c
 8008834:	0800e294 	.word	0x0800e294
 8008838:	2301      	movs	r3, #1
 800883a:	9a06      	ldr	r2, [sp, #24]
 800883c:	4631      	mov	r1, r6
 800883e:	4628      	mov	r0, r5
 8008840:	47b8      	blx	r7
 8008842:	3001      	adds	r0, #1
 8008844:	f43f aecd 	beq.w	80085e2 <_printf_float+0xba>
 8008848:	f10b 0b01 	add.w	fp, fp, #1
 800884c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008850:	ebaa 0309 	sub.w	r3, sl, r9
 8008854:	455b      	cmp	r3, fp
 8008856:	dcef      	bgt.n	8008838 <_printf_float+0x310>
 8008858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800885c:	429a      	cmp	r2, r3
 800885e:	44d0      	add	r8, sl
 8008860:	db15      	blt.n	800888e <_printf_float+0x366>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	07da      	lsls	r2, r3, #31
 8008866:	d412      	bmi.n	800888e <_printf_float+0x366>
 8008868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886c:	eba3 020a 	sub.w	r2, r3, sl
 8008870:	eba3 0a01 	sub.w	sl, r3, r1
 8008874:	4592      	cmp	sl, r2
 8008876:	bfa8      	it	ge
 8008878:	4692      	movge	sl, r2
 800887a:	f1ba 0f00 	cmp.w	sl, #0
 800887e:	dc0e      	bgt.n	800889e <_printf_float+0x376>
 8008880:	f04f 0800 	mov.w	r8, #0
 8008884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008888:	f104 091a 	add.w	r9, r4, #26
 800888c:	e019      	b.n	80088c2 <_printf_float+0x39a>
 800888e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	d1e5      	bne.n	8008868 <_printf_float+0x340>
 800889c:	e6a1      	b.n	80085e2 <_printf_float+0xba>
 800889e:	4653      	mov	r3, sl
 80088a0:	4642      	mov	r2, r8
 80088a2:	4631      	mov	r1, r6
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	d1e9      	bne.n	8008880 <_printf_float+0x358>
 80088ac:	e699      	b.n	80085e2 <_printf_float+0xba>
 80088ae:	2301      	movs	r3, #1
 80088b0:	464a      	mov	r2, r9
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae92 	beq.w	80085e2 <_printf_float+0xba>
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	eba3 030a 	sub.w	r3, r3, sl
 80088cc:	4543      	cmp	r3, r8
 80088ce:	dcee      	bgt.n	80088ae <_printf_float+0x386>
 80088d0:	e74a      	b.n	8008768 <_printf_float+0x240>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	2a01      	cmp	r2, #1
 80088d6:	dc01      	bgt.n	80088dc <_printf_float+0x3b4>
 80088d8:	07db      	lsls	r3, r3, #31
 80088da:	d53a      	bpl.n	8008952 <_printf_float+0x42a>
 80088dc:	2301      	movs	r3, #1
 80088de:	4642      	mov	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f ae7b 	beq.w	80085e2 <_printf_float+0xba>
 80088ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f108 0801 	add.w	r8, r8, #1
 80088fc:	f43f ae71 	beq.w	80085e2 <_printf_float+0xba>
 8008900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008902:	2200      	movs	r2, #0
 8008904:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800890c:	2300      	movs	r3, #0
 800890e:	f7f8 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8008912:	b9c8      	cbnz	r0, 8008948 <_printf_float+0x420>
 8008914:	4653      	mov	r3, sl
 8008916:	4642      	mov	r2, r8
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	d10e      	bne.n	8008940 <_printf_float+0x418>
 8008922:	e65e      	b.n	80085e2 <_printf_float+0xba>
 8008924:	2301      	movs	r3, #1
 8008926:	4652      	mov	r2, sl
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f ae57 	beq.w	80085e2 <_printf_float+0xba>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	3b01      	subs	r3, #1
 800893c:	4543      	cmp	r3, r8
 800893e:	dcf1      	bgt.n	8008924 <_printf_float+0x3fc>
 8008940:	464b      	mov	r3, r9
 8008942:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008946:	e6de      	b.n	8008706 <_printf_float+0x1de>
 8008948:	f04f 0800 	mov.w	r8, #0
 800894c:	f104 0a1a 	add.w	sl, r4, #26
 8008950:	e7f2      	b.n	8008938 <_printf_float+0x410>
 8008952:	2301      	movs	r3, #1
 8008954:	e7df      	b.n	8008916 <_printf_float+0x3ee>
 8008956:	2301      	movs	r3, #1
 8008958:	464a      	mov	r2, r9
 800895a:	4631      	mov	r1, r6
 800895c:	4628      	mov	r0, r5
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	f43f ae3e 	beq.w	80085e2 <_printf_float+0xba>
 8008966:	f108 0801 	add.w	r8, r8, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	4543      	cmp	r3, r8
 8008972:	dcf0      	bgt.n	8008956 <_printf_float+0x42e>
 8008974:	e6fc      	b.n	8008770 <_printf_float+0x248>
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	f104 0919 	add.w	r9, r4, #25
 800897e:	e7f4      	b.n	800896a <_printf_float+0x442>
 8008980:	2900      	cmp	r1, #0
 8008982:	f43f ae8b 	beq.w	800869c <_printf_float+0x174>
 8008986:	2300      	movs	r3, #0
 8008988:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800898c:	ab09      	add	r3, sp, #36	; 0x24
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	ec49 8b10 	vmov	d0, r8, r9
 8008994:	6022      	str	r2, [r4, #0]
 8008996:	f8cd a004 	str.w	sl, [sp, #4]
 800899a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800899e:	4628      	mov	r0, r5
 80089a0:	f7ff fd2d 	bl	80083fe <__cvt>
 80089a4:	4680      	mov	r8, r0
 80089a6:	e648      	b.n	800863a <_printf_float+0x112>

080089a8 <_printf_common>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4691      	mov	r9, r2
 80089ae:	461f      	mov	r7, r3
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfb8      	it	lt
 80089bc:	4613      	movlt	r3, r2
 80089be:	f8c9 3000 	str.w	r3, [r9]
 80089c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c6:	4606      	mov	r6, r0
 80089c8:	460c      	mov	r4, r1
 80089ca:	b112      	cbz	r2, 80089d2 <_printf_common+0x2a>
 80089cc:	3301      	adds	r3, #1
 80089ce:	f8c9 3000 	str.w	r3, [r9]
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	0699      	lsls	r1, r3, #26
 80089d6:	bf42      	ittt	mi
 80089d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089dc:	3302      	addmi	r3, #2
 80089de:	f8c9 3000 	strmi.w	r3, [r9]
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	f015 0506 	ands.w	r5, r5, #6
 80089e8:	d107      	bne.n	80089fa <_printf_common+0x52>
 80089ea:	f104 0a19 	add.w	sl, r4, #25
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	f8d9 2000 	ldr.w	r2, [r9]
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	42ab      	cmp	r3, r5
 80089f8:	dc28      	bgt.n	8008a4c <_printf_common+0xa4>
 80089fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	3300      	adds	r3, #0
 8008a02:	bf18      	it	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	0692      	lsls	r2, r2, #26
 8008a08:	d42d      	bmi.n	8008a66 <_printf_common+0xbe>
 8008a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4630      	mov	r0, r6
 8008a12:	47c0      	blx	r8
 8008a14:	3001      	adds	r0, #1
 8008a16:	d020      	beq.n	8008a5a <_printf_common+0xb2>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	68e5      	ldr	r5, [r4, #12]
 8008a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a20:	f003 0306 	and.w	r3, r3, #6
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	bf08      	it	eq
 8008a28:	1aad      	subeq	r5, r5, r2
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	bf0c      	ite	eq
 8008a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a34:	2500      	movne	r5, #0
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bfc4      	itt	gt
 8008a3a:	1a9b      	subgt	r3, r3, r2
 8008a3c:	18ed      	addgt	r5, r5, r3
 8008a3e:	f04f 0900 	mov.w	r9, #0
 8008a42:	341a      	adds	r4, #26
 8008a44:	454d      	cmp	r5, r9
 8008a46:	d11a      	bne.n	8008a7e <_printf_common+0xd6>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e008      	b.n	8008a5e <_printf_common+0xb6>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4652      	mov	r2, sl
 8008a50:	4639      	mov	r1, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	47c0      	blx	r8
 8008a56:	3001      	adds	r0, #1
 8008a58:	d103      	bne.n	8008a62 <_printf_common+0xba>
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	3501      	adds	r5, #1
 8008a64:	e7c3      	b.n	80089ee <_printf_common+0x46>
 8008a66:	18e1      	adds	r1, r4, r3
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	2030      	movs	r0, #48	; 0x30
 8008a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a70:	4422      	add	r2, r4
 8008a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	e7c5      	b.n	8008a0a <_printf_common+0x62>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4622      	mov	r2, r4
 8008a82:	4639      	mov	r1, r7
 8008a84:	4630      	mov	r0, r6
 8008a86:	47c0      	blx	r8
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d0e6      	beq.n	8008a5a <_printf_common+0xb2>
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e7d8      	b.n	8008a44 <_printf_common+0x9c>
	...

08008a94 <_printf_i>:
 8008a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	7e09      	ldrb	r1, [r1, #24]
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	296e      	cmp	r1, #110	; 0x6e
 8008aa4:	4617      	mov	r7, r2
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	4698      	mov	r8, r3
 8008aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aac:	f000 80b3 	beq.w	8008c16 <_printf_i+0x182>
 8008ab0:	d822      	bhi.n	8008af8 <_printf_i+0x64>
 8008ab2:	2963      	cmp	r1, #99	; 0x63
 8008ab4:	d036      	beq.n	8008b24 <_printf_i+0x90>
 8008ab6:	d80a      	bhi.n	8008ace <_printf_i+0x3a>
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	f000 80b9 	beq.w	8008c30 <_printf_i+0x19c>
 8008abe:	2958      	cmp	r1, #88	; 0x58
 8008ac0:	f000 8083 	beq.w	8008bca <_printf_i+0x136>
 8008ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008acc:	e032      	b.n	8008b34 <_printf_i+0xa0>
 8008ace:	2964      	cmp	r1, #100	; 0x64
 8008ad0:	d001      	beq.n	8008ad6 <_printf_i+0x42>
 8008ad2:	2969      	cmp	r1, #105	; 0x69
 8008ad4:	d1f6      	bne.n	8008ac4 <_printf_i+0x30>
 8008ad6:	6820      	ldr	r0, [r4, #0]
 8008ad8:	6813      	ldr	r3, [r2, #0]
 8008ada:	0605      	lsls	r5, r0, #24
 8008adc:	f103 0104 	add.w	r1, r3, #4
 8008ae0:	d52a      	bpl.n	8008b38 <_printf_i+0xa4>
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6011      	str	r1, [r2, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da03      	bge.n	8008af2 <_printf_i+0x5e>
 8008aea:	222d      	movs	r2, #45	; 0x2d
 8008aec:	425b      	negs	r3, r3
 8008aee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008af2:	486f      	ldr	r0, [pc, #444]	; (8008cb0 <_printf_i+0x21c>)
 8008af4:	220a      	movs	r2, #10
 8008af6:	e039      	b.n	8008b6c <_printf_i+0xd8>
 8008af8:	2973      	cmp	r1, #115	; 0x73
 8008afa:	f000 809d 	beq.w	8008c38 <_printf_i+0x1a4>
 8008afe:	d808      	bhi.n	8008b12 <_printf_i+0x7e>
 8008b00:	296f      	cmp	r1, #111	; 0x6f
 8008b02:	d020      	beq.n	8008b46 <_printf_i+0xb2>
 8008b04:	2970      	cmp	r1, #112	; 0x70
 8008b06:	d1dd      	bne.n	8008ac4 <_printf_i+0x30>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	f043 0320 	orr.w	r3, r3, #32
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	e003      	b.n	8008b1a <_printf_i+0x86>
 8008b12:	2975      	cmp	r1, #117	; 0x75
 8008b14:	d017      	beq.n	8008b46 <_printf_i+0xb2>
 8008b16:	2978      	cmp	r1, #120	; 0x78
 8008b18:	d1d4      	bne.n	8008ac4 <_printf_i+0x30>
 8008b1a:	2378      	movs	r3, #120	; 0x78
 8008b1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b20:	4864      	ldr	r0, [pc, #400]	; (8008cb4 <_printf_i+0x220>)
 8008b22:	e055      	b.n	8008bd0 <_printf_i+0x13c>
 8008b24:	6813      	ldr	r3, [r2, #0]
 8008b26:	1d19      	adds	r1, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6011      	str	r1, [r2, #0]
 8008b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b34:	2301      	movs	r3, #1
 8008b36:	e08c      	b.n	8008c52 <_printf_i+0x1be>
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6011      	str	r1, [r2, #0]
 8008b3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b40:	bf18      	it	ne
 8008b42:	b21b      	sxthne	r3, r3
 8008b44:	e7cf      	b.n	8008ae6 <_printf_i+0x52>
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	6825      	ldr	r5, [r4, #0]
 8008b4a:	1d18      	adds	r0, r3, #4
 8008b4c:	6010      	str	r0, [r2, #0]
 8008b4e:	0628      	lsls	r0, r5, #24
 8008b50:	d501      	bpl.n	8008b56 <_printf_i+0xc2>
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	e002      	b.n	8008b5c <_printf_i+0xc8>
 8008b56:	0668      	lsls	r0, r5, #25
 8008b58:	d5fb      	bpl.n	8008b52 <_printf_i+0xbe>
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	4854      	ldr	r0, [pc, #336]	; (8008cb0 <_printf_i+0x21c>)
 8008b5e:	296f      	cmp	r1, #111	; 0x6f
 8008b60:	bf14      	ite	ne
 8008b62:	220a      	movne	r2, #10
 8008b64:	2208      	moveq	r2, #8
 8008b66:	2100      	movs	r1, #0
 8008b68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b6c:	6865      	ldr	r5, [r4, #4]
 8008b6e:	60a5      	str	r5, [r4, #8]
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	f2c0 8095 	blt.w	8008ca0 <_printf_i+0x20c>
 8008b76:	6821      	ldr	r1, [r4, #0]
 8008b78:	f021 0104 	bic.w	r1, r1, #4
 8008b7c:	6021      	str	r1, [r4, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d13d      	bne.n	8008bfe <_printf_i+0x16a>
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	f040 808e 	bne.w	8008ca4 <_printf_i+0x210>
 8008b88:	4665      	mov	r5, ip
 8008b8a:	2a08      	cmp	r2, #8
 8008b8c:	d10b      	bne.n	8008ba6 <_printf_i+0x112>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	07db      	lsls	r3, r3, #31
 8008b92:	d508      	bpl.n	8008ba6 <_printf_i+0x112>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	6862      	ldr	r2, [r4, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	bfde      	ittt	le
 8008b9c:	2330      	movle	r3, #48	; 0x30
 8008b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ba6:	ebac 0305 	sub.w	r3, ip, r5
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	f8cd 8000 	str.w	r8, [sp]
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	aa03      	add	r2, sp, #12
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff fef6 	bl	80089a8 <_printf_common>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d14d      	bne.n	8008c5c <_printf_i+0x1c8>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc4:	b005      	add	sp, #20
 8008bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bca:	4839      	ldr	r0, [pc, #228]	; (8008cb0 <_printf_i+0x21c>)
 8008bcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008bd0:	6813      	ldr	r3, [r2, #0]
 8008bd2:	6821      	ldr	r1, [r4, #0]
 8008bd4:	1d1d      	adds	r5, r3, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6015      	str	r5, [r2, #0]
 8008bda:	060a      	lsls	r2, r1, #24
 8008bdc:	d50b      	bpl.n	8008bf6 <_printf_i+0x162>
 8008bde:	07ca      	lsls	r2, r1, #31
 8008be0:	bf44      	itt	mi
 8008be2:	f041 0120 	orrmi.w	r1, r1, #32
 8008be6:	6021      	strmi	r1, [r4, #0]
 8008be8:	b91b      	cbnz	r3, 8008bf2 <_printf_i+0x15e>
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	f022 0220 	bic.w	r2, r2, #32
 8008bf0:	6022      	str	r2, [r4, #0]
 8008bf2:	2210      	movs	r2, #16
 8008bf4:	e7b7      	b.n	8008b66 <_printf_i+0xd2>
 8008bf6:	064d      	lsls	r5, r1, #25
 8008bf8:	bf48      	it	mi
 8008bfa:	b29b      	uxthmi	r3, r3
 8008bfc:	e7ef      	b.n	8008bde <_printf_i+0x14a>
 8008bfe:	4665      	mov	r5, ip
 8008c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c04:	fb02 3311 	mls	r3, r2, r1, r3
 8008c08:	5cc3      	ldrb	r3, [r0, r3]
 8008c0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c0e:	460b      	mov	r3, r1
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d1f5      	bne.n	8008c00 <_printf_i+0x16c>
 8008c14:	e7b9      	b.n	8008b8a <_printf_i+0xf6>
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	6825      	ldr	r5, [r4, #0]
 8008c1a:	6961      	ldr	r1, [r4, #20]
 8008c1c:	1d18      	adds	r0, r3, #4
 8008c1e:	6010      	str	r0, [r2, #0]
 8008c20:	0628      	lsls	r0, r5, #24
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	d501      	bpl.n	8008c2a <_printf_i+0x196>
 8008c26:	6019      	str	r1, [r3, #0]
 8008c28:	e002      	b.n	8008c30 <_printf_i+0x19c>
 8008c2a:	066a      	lsls	r2, r5, #25
 8008c2c:	d5fb      	bpl.n	8008c26 <_printf_i+0x192>
 8008c2e:	8019      	strh	r1, [r3, #0]
 8008c30:	2300      	movs	r3, #0
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	4665      	mov	r5, ip
 8008c36:	e7b9      	b.n	8008bac <_printf_i+0x118>
 8008c38:	6813      	ldr	r3, [r2, #0]
 8008c3a:	1d19      	adds	r1, r3, #4
 8008c3c:	6011      	str	r1, [r2, #0]
 8008c3e:	681d      	ldr	r5, [r3, #0]
 8008c40:	6862      	ldr	r2, [r4, #4]
 8008c42:	2100      	movs	r1, #0
 8008c44:	4628      	mov	r0, r5
 8008c46:	f7f7 facb 	bl	80001e0 <memchr>
 8008c4a:	b108      	cbz	r0, 8008c50 <_printf_i+0x1bc>
 8008c4c:	1b40      	subs	r0, r0, r5
 8008c4e:	6060      	str	r0, [r4, #4]
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	6123      	str	r3, [r4, #16]
 8008c54:	2300      	movs	r3, #0
 8008c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5a:	e7a7      	b.n	8008bac <_printf_i+0x118>
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4639      	mov	r1, r7
 8008c62:	4630      	mov	r0, r6
 8008c64:	47c0      	blx	r8
 8008c66:	3001      	adds	r0, #1
 8008c68:	d0aa      	beq.n	8008bc0 <_printf_i+0x12c>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	079b      	lsls	r3, r3, #30
 8008c6e:	d413      	bmi.n	8008c98 <_printf_i+0x204>
 8008c70:	68e0      	ldr	r0, [r4, #12]
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	4298      	cmp	r0, r3
 8008c76:	bfb8      	it	lt
 8008c78:	4618      	movlt	r0, r3
 8008c7a:	e7a3      	b.n	8008bc4 <_printf_i+0x130>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	464a      	mov	r2, r9
 8008c80:	4639      	mov	r1, r7
 8008c82:	4630      	mov	r0, r6
 8008c84:	47c0      	blx	r8
 8008c86:	3001      	adds	r0, #1
 8008c88:	d09a      	beq.n	8008bc0 <_printf_i+0x12c>
 8008c8a:	3501      	adds	r5, #1
 8008c8c:	68e3      	ldr	r3, [r4, #12]
 8008c8e:	9a03      	ldr	r2, [sp, #12]
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	42ab      	cmp	r3, r5
 8008c94:	dcf2      	bgt.n	8008c7c <_printf_i+0x1e8>
 8008c96:	e7eb      	b.n	8008c70 <_printf_i+0x1dc>
 8008c98:	2500      	movs	r5, #0
 8008c9a:	f104 0919 	add.w	r9, r4, #25
 8008c9e:	e7f5      	b.n	8008c8c <_printf_i+0x1f8>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1ac      	bne.n	8008bfe <_printf_i+0x16a>
 8008ca4:	7803      	ldrb	r3, [r0, #0]
 8008ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008caa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cae:	e76c      	b.n	8008b8a <_printf_i+0xf6>
 8008cb0:	0800e296 	.word	0x0800e296
 8008cb4:	0800e2a7 	.word	0x0800e2a7

08008cb8 <_scanf_float>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	469a      	mov	sl, r3
 8008cbe:	688b      	ldr	r3, [r1, #8]
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	1e5a      	subs	r2, r3, #1
 8008cc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cc8:	b087      	sub	sp, #28
 8008cca:	bf83      	ittte	hi
 8008ccc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008cd0:	189b      	addhi	r3, r3, r2
 8008cd2:	9301      	strhi	r3, [sp, #4]
 8008cd4:	2300      	movls	r3, #0
 8008cd6:	bf86      	itte	hi
 8008cd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cdc:	608b      	strhi	r3, [r1, #8]
 8008cde:	9301      	strls	r3, [sp, #4]
 8008ce0:	680b      	ldr	r3, [r1, #0]
 8008ce2:	4688      	mov	r8, r1
 8008ce4:	f04f 0b00 	mov.w	fp, #0
 8008ce8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cec:	f848 3b1c 	str.w	r3, [r8], #28
 8008cf0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	4645      	mov	r5, r8
 8008cfa:	465a      	mov	r2, fp
 8008cfc:	46d9      	mov	r9, fp
 8008cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8008d02:	68a1      	ldr	r1, [r4, #8]
 8008d04:	b181      	cbz	r1, 8008d28 <_scanf_float+0x70>
 8008d06:	6833      	ldr	r3, [r6, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b49      	cmp	r3, #73	; 0x49
 8008d0c:	d071      	beq.n	8008df2 <_scanf_float+0x13a>
 8008d0e:	d84d      	bhi.n	8008dac <_scanf_float+0xf4>
 8008d10:	2b39      	cmp	r3, #57	; 0x39
 8008d12:	d840      	bhi.n	8008d96 <_scanf_float+0xde>
 8008d14:	2b31      	cmp	r3, #49	; 0x31
 8008d16:	f080 8088 	bcs.w	8008e2a <_scanf_float+0x172>
 8008d1a:	2b2d      	cmp	r3, #45	; 0x2d
 8008d1c:	f000 8090 	beq.w	8008e40 <_scanf_float+0x188>
 8008d20:	d815      	bhi.n	8008d4e <_scanf_float+0x96>
 8008d22:	2b2b      	cmp	r3, #43	; 0x2b
 8008d24:	f000 808c 	beq.w	8008e40 <_scanf_float+0x188>
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	d003      	beq.n	8008d36 <_scanf_float+0x7e>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	3a01      	subs	r2, #1
 8008d38:	2a01      	cmp	r2, #1
 8008d3a:	f200 80ea 	bhi.w	8008f12 <_scanf_float+0x25a>
 8008d3e:	4545      	cmp	r5, r8
 8008d40:	f200 80dc 	bhi.w	8008efc <_scanf_float+0x244>
 8008d44:	2601      	movs	r6, #1
 8008d46:	4630      	mov	r0, r6
 8008d48:	b007      	add	sp, #28
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d50:	f000 809f 	beq.w	8008e92 <_scanf_float+0x1da>
 8008d54:	2b30      	cmp	r3, #48	; 0x30
 8008d56:	d1e7      	bne.n	8008d28 <_scanf_float+0x70>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008d5e:	d064      	beq.n	8008e2a <_scanf_float+0x172>
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008d66:	6020      	str	r0, [r4, #0]
 8008d68:	f109 0901 	add.w	r9, r9, #1
 8008d6c:	b11b      	cbz	r3, 8008d76 <_scanf_float+0xbe>
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	3101      	adds	r1, #1
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	60a1      	str	r1, [r4, #8]
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	60a3      	str	r3, [r4, #8]
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	6873      	ldr	r3, [r6, #4]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	6073      	str	r3, [r6, #4]
 8008d8a:	f340 80ac 	ble.w	8008ee6 <_scanf_float+0x22e>
 8008d8e:	6833      	ldr	r3, [r6, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	e7b5      	b.n	8008d02 <_scanf_float+0x4a>
 8008d96:	2b45      	cmp	r3, #69	; 0x45
 8008d98:	f000 8085 	beq.w	8008ea6 <_scanf_float+0x1ee>
 8008d9c:	2b46      	cmp	r3, #70	; 0x46
 8008d9e:	d06a      	beq.n	8008e76 <_scanf_float+0x1be>
 8008da0:	2b41      	cmp	r3, #65	; 0x41
 8008da2:	d1c1      	bne.n	8008d28 <_scanf_float+0x70>
 8008da4:	2a01      	cmp	r2, #1
 8008da6:	d1bf      	bne.n	8008d28 <_scanf_float+0x70>
 8008da8:	2202      	movs	r2, #2
 8008daa:	e046      	b.n	8008e3a <_scanf_float+0x182>
 8008dac:	2b65      	cmp	r3, #101	; 0x65
 8008dae:	d07a      	beq.n	8008ea6 <_scanf_float+0x1ee>
 8008db0:	d818      	bhi.n	8008de4 <_scanf_float+0x12c>
 8008db2:	2b54      	cmp	r3, #84	; 0x54
 8008db4:	d066      	beq.n	8008e84 <_scanf_float+0x1cc>
 8008db6:	d811      	bhi.n	8008ddc <_scanf_float+0x124>
 8008db8:	2b4e      	cmp	r3, #78	; 0x4e
 8008dba:	d1b5      	bne.n	8008d28 <_scanf_float+0x70>
 8008dbc:	2a00      	cmp	r2, #0
 8008dbe:	d146      	bne.n	8008e4e <_scanf_float+0x196>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	d145      	bne.n	8008e52 <_scanf_float+0x19a>
 8008dc6:	6821      	ldr	r1, [r4, #0]
 8008dc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008dcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008dd0:	d13f      	bne.n	8008e52 <_scanf_float+0x19a>
 8008dd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008dd6:	6021      	str	r1, [r4, #0]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	e02e      	b.n	8008e3a <_scanf_float+0x182>
 8008ddc:	2b59      	cmp	r3, #89	; 0x59
 8008dde:	d01e      	beq.n	8008e1e <_scanf_float+0x166>
 8008de0:	2b61      	cmp	r3, #97	; 0x61
 8008de2:	e7de      	b.n	8008da2 <_scanf_float+0xea>
 8008de4:	2b6e      	cmp	r3, #110	; 0x6e
 8008de6:	d0e9      	beq.n	8008dbc <_scanf_float+0x104>
 8008de8:	d815      	bhi.n	8008e16 <_scanf_float+0x15e>
 8008dea:	2b66      	cmp	r3, #102	; 0x66
 8008dec:	d043      	beq.n	8008e76 <_scanf_float+0x1be>
 8008dee:	2b69      	cmp	r3, #105	; 0x69
 8008df0:	d19a      	bne.n	8008d28 <_scanf_float+0x70>
 8008df2:	f1bb 0f00 	cmp.w	fp, #0
 8008df6:	d138      	bne.n	8008e6a <_scanf_float+0x1b2>
 8008df8:	f1b9 0f00 	cmp.w	r9, #0
 8008dfc:	d197      	bne.n	8008d2e <_scanf_float+0x76>
 8008dfe:	6821      	ldr	r1, [r4, #0]
 8008e00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008e04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008e08:	d195      	bne.n	8008d36 <_scanf_float+0x7e>
 8008e0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008e0e:	6021      	str	r1, [r4, #0]
 8008e10:	f04f 0b01 	mov.w	fp, #1
 8008e14:	e011      	b.n	8008e3a <_scanf_float+0x182>
 8008e16:	2b74      	cmp	r3, #116	; 0x74
 8008e18:	d034      	beq.n	8008e84 <_scanf_float+0x1cc>
 8008e1a:	2b79      	cmp	r3, #121	; 0x79
 8008e1c:	d184      	bne.n	8008d28 <_scanf_float+0x70>
 8008e1e:	f1bb 0f07 	cmp.w	fp, #7
 8008e22:	d181      	bne.n	8008d28 <_scanf_float+0x70>
 8008e24:	f04f 0b08 	mov.w	fp, #8
 8008e28:	e007      	b.n	8008e3a <_scanf_float+0x182>
 8008e2a:	eb12 0f0b 	cmn.w	r2, fp
 8008e2e:	f47f af7b 	bne.w	8008d28 <_scanf_float+0x70>
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008e38:	6021      	str	r1, [r4, #0]
 8008e3a:	702b      	strb	r3, [r5, #0]
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	e79a      	b.n	8008d76 <_scanf_float+0xbe>
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	0608      	lsls	r0, r1, #24
 8008e44:	f57f af70 	bpl.w	8008d28 <_scanf_float+0x70>
 8008e48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e4c:	e7f4      	b.n	8008e38 <_scanf_float+0x180>
 8008e4e:	2a02      	cmp	r2, #2
 8008e50:	d047      	beq.n	8008ee2 <_scanf_float+0x22a>
 8008e52:	f1bb 0f01 	cmp.w	fp, #1
 8008e56:	d003      	beq.n	8008e60 <_scanf_float+0x1a8>
 8008e58:	f1bb 0f04 	cmp.w	fp, #4
 8008e5c:	f47f af64 	bne.w	8008d28 <_scanf_float+0x70>
 8008e60:	f10b 0b01 	add.w	fp, fp, #1
 8008e64:	fa5f fb8b 	uxtb.w	fp, fp
 8008e68:	e7e7      	b.n	8008e3a <_scanf_float+0x182>
 8008e6a:	f1bb 0f03 	cmp.w	fp, #3
 8008e6e:	d0f7      	beq.n	8008e60 <_scanf_float+0x1a8>
 8008e70:	f1bb 0f05 	cmp.w	fp, #5
 8008e74:	e7f2      	b.n	8008e5c <_scanf_float+0x1a4>
 8008e76:	f1bb 0f02 	cmp.w	fp, #2
 8008e7a:	f47f af55 	bne.w	8008d28 <_scanf_float+0x70>
 8008e7e:	f04f 0b03 	mov.w	fp, #3
 8008e82:	e7da      	b.n	8008e3a <_scanf_float+0x182>
 8008e84:	f1bb 0f06 	cmp.w	fp, #6
 8008e88:	f47f af4e 	bne.w	8008d28 <_scanf_float+0x70>
 8008e8c:	f04f 0b07 	mov.w	fp, #7
 8008e90:	e7d3      	b.n	8008e3a <_scanf_float+0x182>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	0588      	lsls	r0, r1, #22
 8008e96:	f57f af47 	bpl.w	8008d28 <_scanf_float+0x70>
 8008e9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008e9e:	6021      	str	r1, [r4, #0]
 8008ea0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ea4:	e7c9      	b.n	8008e3a <_scanf_float+0x182>
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008eac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008eb0:	d006      	beq.n	8008ec0 <_scanf_float+0x208>
 8008eb2:	0548      	lsls	r0, r1, #21
 8008eb4:	f57f af38 	bpl.w	8008d28 <_scanf_float+0x70>
 8008eb8:	f1b9 0f00 	cmp.w	r9, #0
 8008ebc:	f43f af3b 	beq.w	8008d36 <_scanf_float+0x7e>
 8008ec0:	0588      	lsls	r0, r1, #22
 8008ec2:	bf58      	it	pl
 8008ec4:	9802      	ldrpl	r0, [sp, #8]
 8008ec6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008eca:	bf58      	it	pl
 8008ecc:	eba9 0000 	subpl.w	r0, r9, r0
 8008ed0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008ed4:	bf58      	it	pl
 8008ed6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008eda:	6021      	str	r1, [r4, #0]
 8008edc:	f04f 0900 	mov.w	r9, #0
 8008ee0:	e7ab      	b.n	8008e3a <_scanf_float+0x182>
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	e7a9      	b.n	8008e3a <_scanf_float+0x182>
 8008ee6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eea:	9205      	str	r2, [sp, #20]
 8008eec:	4631      	mov	r1, r6
 8008eee:	4638      	mov	r0, r7
 8008ef0:	4798      	blx	r3
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f af04 	beq.w	8008d02 <_scanf_float+0x4a>
 8008efa:	e715      	b.n	8008d28 <_scanf_float+0x70>
 8008efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008f04:	4632      	mov	r2, r6
 8008f06:	4638      	mov	r0, r7
 8008f08:	4798      	blx	r3
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	e715      	b.n	8008d3e <_scanf_float+0x86>
 8008f12:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008f16:	2b06      	cmp	r3, #6
 8008f18:	d80a      	bhi.n	8008f30 <_scanf_float+0x278>
 8008f1a:	f1bb 0f02 	cmp.w	fp, #2
 8008f1e:	d968      	bls.n	8008ff2 <_scanf_float+0x33a>
 8008f20:	f1ab 0b03 	sub.w	fp, fp, #3
 8008f24:	fa5f fb8b 	uxtb.w	fp, fp
 8008f28:	eba5 0b0b 	sub.w	fp, r5, fp
 8008f2c:	455d      	cmp	r5, fp
 8008f2e:	d14b      	bne.n	8008fc8 <_scanf_float+0x310>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	05da      	lsls	r2, r3, #23
 8008f34:	d51f      	bpl.n	8008f76 <_scanf_float+0x2be>
 8008f36:	055b      	lsls	r3, r3, #21
 8008f38:	d468      	bmi.n	800900c <_scanf_float+0x354>
 8008f3a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	2965      	cmp	r1, #101	; 0x65
 8008f42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f46:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	d00d      	beq.n	8008f6a <_scanf_float+0x2b2>
 8008f4e:	2945      	cmp	r1, #69	; 0x45
 8008f50:	d00b      	beq.n	8008f6a <_scanf_float+0x2b2>
 8008f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f56:	4632      	mov	r2, r6
 8008f58:	4638      	mov	r0, r7
 8008f5a:	4798      	blx	r3
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	f1a5 0b02 	sub.w	fp, r5, #2
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f6e:	4632      	mov	r2, r6
 8008f70:	4638      	mov	r0, r7
 8008f72:	4798      	blx	r3
 8008f74:	465d      	mov	r5, fp
 8008f76:	6826      	ldr	r6, [r4, #0]
 8008f78:	f016 0610 	ands.w	r6, r6, #16
 8008f7c:	d17a      	bne.n	8009074 <_scanf_float+0x3bc>
 8008f7e:	702e      	strb	r6, [r5, #0]
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8a:	d142      	bne.n	8009012 <_scanf_float+0x35a>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	eba9 0303 	sub.w	r3, r9, r3
 8008f92:	425a      	negs	r2, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d149      	bne.n	800902c <_scanf_float+0x374>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4641      	mov	r1, r8
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f000 ffd7 	bl	8009f50 <_strtod_r>
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	f8da 3000 	ldr.w	r3, [sl]
 8008fa8:	f015 0f02 	tst.w	r5, #2
 8008fac:	f103 0204 	add.w	r2, r3, #4
 8008fb0:	ec59 8b10 	vmov	r8, r9, d0
 8008fb4:	f8ca 2000 	str.w	r2, [sl]
 8008fb8:	d043      	beq.n	8009042 <_scanf_float+0x38a>
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	e9c3 8900 	strd	r8, r9, [r3]
 8008fc0:	68e3      	ldr	r3, [r4, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60e3      	str	r3, [r4, #12]
 8008fc6:	e6be      	b.n	8008d46 <_scanf_float+0x8e>
 8008fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	4798      	blx	r3
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	e7a6      	b.n	8008f2c <_scanf_float+0x274>
 8008fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fe2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008fe6:	4632      	mov	r2, r6
 8008fe8:	4638      	mov	r0, r7
 8008fea:	4798      	blx	r3
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	4545      	cmp	r5, r8
 8008ff4:	d8f3      	bhi.n	8008fde <_scanf_float+0x326>
 8008ff6:	e6a5      	b.n	8008d44 <_scanf_float+0x8c>
 8008ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ffc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009000:	4632      	mov	r2, r6
 8009002:	4638      	mov	r0, r7
 8009004:	4798      	blx	r3
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	3b01      	subs	r3, #1
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	4545      	cmp	r5, r8
 800900e:	d8f3      	bhi.n	8008ff8 <_scanf_float+0x340>
 8009010:	e698      	b.n	8008d44 <_scanf_float+0x8c>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0bf      	beq.n	8008f98 <_scanf_float+0x2e0>
 8009018:	9904      	ldr	r1, [sp, #16]
 800901a:	230a      	movs	r3, #10
 800901c:	4632      	mov	r2, r6
 800901e:	3101      	adds	r1, #1
 8009020:	4638      	mov	r0, r7
 8009022:	f001 f821 	bl	800a068 <_strtol_r>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	9d04      	ldr	r5, [sp, #16]
 800902a:	1ac2      	subs	r2, r0, r3
 800902c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009030:	429d      	cmp	r5, r3
 8009032:	bf28      	it	cs
 8009034:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009038:	490f      	ldr	r1, [pc, #60]	; (8009078 <_scanf_float+0x3c0>)
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f956 	bl	80092ec <siprintf>
 8009040:	e7aa      	b.n	8008f98 <_scanf_float+0x2e0>
 8009042:	f015 0504 	ands.w	r5, r5, #4
 8009046:	d1b8      	bne.n	8008fba <_scanf_float+0x302>
 8009048:	681f      	ldr	r7, [r3, #0]
 800904a:	ee10 2a10 	vmov	r2, s0
 800904e:	464b      	mov	r3, r9
 8009050:	ee10 0a10 	vmov	r0, s0
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 fd69 	bl	8000b2c <__aeabi_dcmpun>
 800905a:	b128      	cbz	r0, 8009068 <_scanf_float+0x3b0>
 800905c:	4628      	mov	r0, r5
 800905e:	f000 f93f 	bl	80092e0 <nanf>
 8009062:	ed87 0a00 	vstr	s0, [r7]
 8009066:	e7ab      	b.n	8008fc0 <_scanf_float+0x308>
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	f7f7 fdbc 	bl	8000be8 <__aeabi_d2f>
 8009070:	6038      	str	r0, [r7, #0]
 8009072:	e7a5      	b.n	8008fc0 <_scanf_float+0x308>
 8009074:	2600      	movs	r6, #0
 8009076:	e666      	b.n	8008d46 <_scanf_float+0x8e>
 8009078:	0800e2b8 	.word	0x0800e2b8

0800907c <iprintf>:
 800907c:	b40f      	push	{r0, r1, r2, r3}
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <iprintf+0x2c>)
 8009080:	b513      	push	{r0, r1, r4, lr}
 8009082:	681c      	ldr	r4, [r3, #0]
 8009084:	b124      	cbz	r4, 8009090 <iprintf+0x14>
 8009086:	69a3      	ldr	r3, [r4, #24]
 8009088:	b913      	cbnz	r3, 8009090 <iprintf+0x14>
 800908a:	4620      	mov	r0, r4
 800908c:	f001 fff4 	bl	800b078 <__sinit>
 8009090:	ab05      	add	r3, sp, #20
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	68a1      	ldr	r1, [r4, #8]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	4620      	mov	r0, r4
 800909a:	f003 fa61 	bl	800c560 <_vfiprintf_r>
 800909e:	b002      	add	sp, #8
 80090a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a4:	b004      	add	sp, #16
 80090a6:	4770      	bx	lr
 80090a8:	20000024 	.word	0x20000024

080090ac <_puts_r>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	460e      	mov	r6, r1
 80090b0:	4605      	mov	r5, r0
 80090b2:	b118      	cbz	r0, 80090bc <_puts_r+0x10>
 80090b4:	6983      	ldr	r3, [r0, #24]
 80090b6:	b90b      	cbnz	r3, 80090bc <_puts_r+0x10>
 80090b8:	f001 ffde 	bl	800b078 <__sinit>
 80090bc:	69ab      	ldr	r3, [r5, #24]
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	b913      	cbnz	r3, 80090c8 <_puts_r+0x1c>
 80090c2:	4628      	mov	r0, r5
 80090c4:	f001 ffd8 	bl	800b078 <__sinit>
 80090c8:	4b23      	ldr	r3, [pc, #140]	; (8009158 <_puts_r+0xac>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d117      	bne.n	80090fe <_puts_r+0x52>
 80090ce:	686c      	ldr	r4, [r5, #4]
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	071b      	lsls	r3, r3, #28
 80090d4:	d51d      	bpl.n	8009112 <_puts_r+0x66>
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	b1db      	cbz	r3, 8009112 <_puts_r+0x66>
 80090da:	3e01      	subs	r6, #1
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090e2:	3b01      	subs	r3, #1
 80090e4:	60a3      	str	r3, [r4, #8]
 80090e6:	b9e9      	cbnz	r1, 8009124 <_puts_r+0x78>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	da2e      	bge.n	800914a <_puts_r+0x9e>
 80090ec:	4622      	mov	r2, r4
 80090ee:	210a      	movs	r1, #10
 80090f0:	4628      	mov	r0, r5
 80090f2:	f000 ffcb 	bl	800a08c <__swbuf_r>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d011      	beq.n	800911e <_puts_r+0x72>
 80090fa:	200a      	movs	r0, #10
 80090fc:	e011      	b.n	8009122 <_puts_r+0x76>
 80090fe:	4b17      	ldr	r3, [pc, #92]	; (800915c <_puts_r+0xb0>)
 8009100:	429c      	cmp	r4, r3
 8009102:	d101      	bne.n	8009108 <_puts_r+0x5c>
 8009104:	68ac      	ldr	r4, [r5, #8]
 8009106:	e7e3      	b.n	80090d0 <_puts_r+0x24>
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <_puts_r+0xb4>)
 800910a:	429c      	cmp	r4, r3
 800910c:	bf08      	it	eq
 800910e:	68ec      	ldreq	r4, [r5, #12]
 8009110:	e7de      	b.n	80090d0 <_puts_r+0x24>
 8009112:	4621      	mov	r1, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f001 f80b 	bl	800a130 <__swsetup_r>
 800911a:	2800      	cmp	r0, #0
 800911c:	d0dd      	beq.n	80090da <_puts_r+0x2e>
 800911e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	2b00      	cmp	r3, #0
 8009126:	da04      	bge.n	8009132 <_puts_r+0x86>
 8009128:	69a2      	ldr	r2, [r4, #24]
 800912a:	429a      	cmp	r2, r3
 800912c:	dc06      	bgt.n	800913c <_puts_r+0x90>
 800912e:	290a      	cmp	r1, #10
 8009130:	d004      	beq.n	800913c <_puts_r+0x90>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	7019      	strb	r1, [r3, #0]
 800913a:	e7cf      	b.n	80090dc <_puts_r+0x30>
 800913c:	4622      	mov	r2, r4
 800913e:	4628      	mov	r0, r5
 8009140:	f000 ffa4 	bl	800a08c <__swbuf_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d1c9      	bne.n	80090dc <_puts_r+0x30>
 8009148:	e7e9      	b.n	800911e <_puts_r+0x72>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	200a      	movs	r0, #10
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	6022      	str	r2, [r4, #0]
 8009152:	7018      	strb	r0, [r3, #0]
 8009154:	e7e5      	b.n	8009122 <_puts_r+0x76>
 8009156:	bf00      	nop
 8009158:	0800e340 	.word	0x0800e340
 800915c:	0800e360 	.word	0x0800e360
 8009160:	0800e320 	.word	0x0800e320

08009164 <puts>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <puts+0xc>)
 8009166:	4601      	mov	r1, r0
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	f7ff bf9f 	b.w	80090ac <_puts_r>
 800916e:	bf00      	nop
 8009170:	20000024 	.word	0x20000024

08009174 <setbuf>:
 8009174:	2900      	cmp	r1, #0
 8009176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917a:	bf0c      	ite	eq
 800917c:	2202      	moveq	r2, #2
 800917e:	2200      	movne	r2, #0
 8009180:	f000 b800 	b.w	8009184 <setvbuf>

08009184 <setvbuf>:
 8009184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009188:	461d      	mov	r5, r3
 800918a:	4b51      	ldr	r3, [pc, #324]	; (80092d0 <setvbuf+0x14c>)
 800918c:	681e      	ldr	r6, [r3, #0]
 800918e:	4604      	mov	r4, r0
 8009190:	460f      	mov	r7, r1
 8009192:	4690      	mov	r8, r2
 8009194:	b126      	cbz	r6, 80091a0 <setvbuf+0x1c>
 8009196:	69b3      	ldr	r3, [r6, #24]
 8009198:	b913      	cbnz	r3, 80091a0 <setvbuf+0x1c>
 800919a:	4630      	mov	r0, r6
 800919c:	f001 ff6c 	bl	800b078 <__sinit>
 80091a0:	4b4c      	ldr	r3, [pc, #304]	; (80092d4 <setvbuf+0x150>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	d152      	bne.n	800924c <setvbuf+0xc8>
 80091a6:	6874      	ldr	r4, [r6, #4]
 80091a8:	f1b8 0f02 	cmp.w	r8, #2
 80091ac:	d006      	beq.n	80091bc <setvbuf+0x38>
 80091ae:	f1b8 0f01 	cmp.w	r8, #1
 80091b2:	f200 8089 	bhi.w	80092c8 <setvbuf+0x144>
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	f2c0 8086 	blt.w	80092c8 <setvbuf+0x144>
 80091bc:	4621      	mov	r1, r4
 80091be:	4630      	mov	r0, r6
 80091c0:	f001 fef0 	bl	800afa4 <_fflush_r>
 80091c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c6:	b141      	cbz	r1, 80091da <setvbuf+0x56>
 80091c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <setvbuf+0x52>
 80091d0:	4630      	mov	r0, r6
 80091d2:	f002 ffa1 	bl	800c118 <_free_r>
 80091d6:	2300      	movs	r3, #0
 80091d8:	6363      	str	r3, [r4, #52]	; 0x34
 80091da:	2300      	movs	r3, #0
 80091dc:	61a3      	str	r3, [r4, #24]
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	d503      	bpl.n	80091ee <setvbuf+0x6a>
 80091e6:	6921      	ldr	r1, [r4, #16]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f002 ff95 	bl	800c118 <_free_r>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80091f4:	f023 0303 	bic.w	r3, r3, #3
 80091f8:	f1b8 0f02 	cmp.w	r8, #2
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	d05d      	beq.n	80092bc <setvbuf+0x138>
 8009200:	ab01      	add	r3, sp, #4
 8009202:	466a      	mov	r2, sp
 8009204:	4621      	mov	r1, r4
 8009206:	4630      	mov	r0, r6
 8009208:	f002 fafa 	bl	800b800 <__swhatbuf_r>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	4318      	orrs	r0, r3
 8009210:	81a0      	strh	r0, [r4, #12]
 8009212:	bb2d      	cbnz	r5, 8009260 <setvbuf+0xdc>
 8009214:	9d00      	ldr	r5, [sp, #0]
 8009216:	4628      	mov	r0, r5
 8009218:	f002 fb56 	bl	800b8c8 <malloc>
 800921c:	4607      	mov	r7, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d14e      	bne.n	80092c0 <setvbuf+0x13c>
 8009222:	f8dd 9000 	ldr.w	r9, [sp]
 8009226:	45a9      	cmp	r9, r5
 8009228:	d13c      	bne.n	80092a4 <setvbuf+0x120>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f043 0302 	orr.w	r3, r3, #2
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	2300      	movs	r3, #0
 8009238:	60a3      	str	r3, [r4, #8]
 800923a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	2301      	movs	r3, #1
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	b003      	add	sp, #12
 8009248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924c:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <setvbuf+0x154>)
 800924e:	429c      	cmp	r4, r3
 8009250:	d101      	bne.n	8009256 <setvbuf+0xd2>
 8009252:	68b4      	ldr	r4, [r6, #8]
 8009254:	e7a8      	b.n	80091a8 <setvbuf+0x24>
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <setvbuf+0x158>)
 8009258:	429c      	cmp	r4, r3
 800925a:	bf08      	it	eq
 800925c:	68f4      	ldreq	r4, [r6, #12]
 800925e:	e7a3      	b.n	80091a8 <setvbuf+0x24>
 8009260:	2f00      	cmp	r7, #0
 8009262:	d0d8      	beq.n	8009216 <setvbuf+0x92>
 8009264:	69b3      	ldr	r3, [r6, #24]
 8009266:	b913      	cbnz	r3, 800926e <setvbuf+0xea>
 8009268:	4630      	mov	r0, r6
 800926a:	f001 ff05 	bl	800b078 <__sinit>
 800926e:	f1b8 0f01 	cmp.w	r8, #1
 8009272:	bf08      	it	eq
 8009274:	89a3      	ldrheq	r3, [r4, #12]
 8009276:	6027      	str	r7, [r4, #0]
 8009278:	bf04      	itt	eq
 800927a:	f043 0301 	orreq.w	r3, r3, #1
 800927e:	81a3      	strheq	r3, [r4, #12]
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f013 0008 	ands.w	r0, r3, #8
 8009286:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800928a:	d01b      	beq.n	80092c4 <setvbuf+0x140>
 800928c:	f013 0001 	ands.w	r0, r3, #1
 8009290:	bf18      	it	ne
 8009292:	426d      	negne	r5, r5
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	bf1d      	ittte	ne
 800929a:	60a3      	strne	r3, [r4, #8]
 800929c:	61a5      	strne	r5, [r4, #24]
 800929e:	4618      	movne	r0, r3
 80092a0:	60a5      	streq	r5, [r4, #8]
 80092a2:	e7d0      	b.n	8009246 <setvbuf+0xc2>
 80092a4:	4648      	mov	r0, r9
 80092a6:	f002 fb0f 	bl	800b8c8 <malloc>
 80092aa:	4607      	mov	r7, r0
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0bc      	beq.n	800922a <setvbuf+0xa6>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	464d      	mov	r5, r9
 80092ba:	e7d3      	b.n	8009264 <setvbuf+0xe0>
 80092bc:	2000      	movs	r0, #0
 80092be:	e7b6      	b.n	800922e <setvbuf+0xaa>
 80092c0:	46a9      	mov	r9, r5
 80092c2:	e7f5      	b.n	80092b0 <setvbuf+0x12c>
 80092c4:	60a0      	str	r0, [r4, #8]
 80092c6:	e7be      	b.n	8009246 <setvbuf+0xc2>
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092cc:	e7bb      	b.n	8009246 <setvbuf+0xc2>
 80092ce:	bf00      	nop
 80092d0:	20000024 	.word	0x20000024
 80092d4:	0800e340 	.word	0x0800e340
 80092d8:	0800e360 	.word	0x0800e360
 80092dc:	0800e320 	.word	0x0800e320

080092e0 <nanf>:
 80092e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092e8 <nanf+0x8>
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	7fc00000 	.word	0x7fc00000

080092ec <siprintf>:
 80092ec:	b40e      	push	{r1, r2, r3}
 80092ee:	b500      	push	{lr}
 80092f0:	b09c      	sub	sp, #112	; 0x70
 80092f2:	ab1d      	add	r3, sp, #116	; 0x74
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	9006      	str	r0, [sp, #24]
 80092f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092fc:	4809      	ldr	r0, [pc, #36]	; (8009324 <siprintf+0x38>)
 80092fe:	9107      	str	r1, [sp, #28]
 8009300:	9104      	str	r1, [sp, #16]
 8009302:	4909      	ldr	r1, [pc, #36]	; (8009328 <siprintf+0x3c>)
 8009304:	f853 2b04 	ldr.w	r2, [r3], #4
 8009308:	9105      	str	r1, [sp, #20]
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	a902      	add	r1, sp, #8
 8009310:	f003 f804 	bl	800c31c <_svfiprintf_r>
 8009314:	9b02      	ldr	r3, [sp, #8]
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
 800931a:	b01c      	add	sp, #112	; 0x70
 800931c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009320:	b003      	add	sp, #12
 8009322:	4770      	bx	lr
 8009324:	20000024 	.word	0x20000024
 8009328:	ffff0208 	.word	0xffff0208

0800932c <sulp>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	ec45 4b10 	vmov	d0, r4, r5
 8009336:	4616      	mov	r6, r2
 8009338:	f002 fdac 	bl	800be94 <__ulp>
 800933c:	ec51 0b10 	vmov	r0, r1, d0
 8009340:	b17e      	cbz	r6, 8009362 <sulp+0x36>
 8009342:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009346:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd09      	ble.n	8009362 <sulp+0x36>
 800934e:	051b      	lsls	r3, r3, #20
 8009350:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009354:	2400      	movs	r4, #0
 8009356:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	f7f7 f94b 	bl	80005f8 <__aeabi_dmul>
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	0000      	movs	r0, r0
	...

08009368 <_strtod_l>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	461f      	mov	r7, r3
 800936e:	b0a1      	sub	sp, #132	; 0x84
 8009370:	2300      	movs	r3, #0
 8009372:	4681      	mov	r9, r0
 8009374:	4638      	mov	r0, r7
 8009376:	460e      	mov	r6, r1
 8009378:	9217      	str	r2, [sp, #92]	; 0x5c
 800937a:	931c      	str	r3, [sp, #112]	; 0x70
 800937c:	f002 fa2f 	bl	800b7de <__localeconv_l>
 8009380:	4680      	mov	r8, r0
 8009382:	6800      	ldr	r0, [r0, #0]
 8009384:	f7f6 ff24 	bl	80001d0 <strlen>
 8009388:	f04f 0a00 	mov.w	sl, #0
 800938c:	4604      	mov	r4, r0
 800938e:	f04f 0b00 	mov.w	fp, #0
 8009392:	961b      	str	r6, [sp, #108]	; 0x6c
 8009394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	2a0d      	cmp	r2, #13
 800939a:	d832      	bhi.n	8009402 <_strtod_l+0x9a>
 800939c:	2a09      	cmp	r2, #9
 800939e:	d236      	bcs.n	800940e <_strtod_l+0xa6>
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	d03e      	beq.n	8009422 <_strtod_l+0xba>
 80093a4:	2300      	movs	r3, #0
 80093a6:	930d      	str	r3, [sp, #52]	; 0x34
 80093a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80093aa:	782b      	ldrb	r3, [r5, #0]
 80093ac:	2b30      	cmp	r3, #48	; 0x30
 80093ae:	f040 80ac 	bne.w	800950a <_strtod_l+0x1a2>
 80093b2:	786b      	ldrb	r3, [r5, #1]
 80093b4:	2b58      	cmp	r3, #88	; 0x58
 80093b6:	d001      	beq.n	80093bc <_strtod_l+0x54>
 80093b8:	2b78      	cmp	r3, #120	; 0x78
 80093ba:	d167      	bne.n	800948c <_strtod_l+0x124>
 80093bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	ab1c      	add	r3, sp, #112	; 0x70
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	9702      	str	r7, [sp, #8]
 80093c6:	ab1d      	add	r3, sp, #116	; 0x74
 80093c8:	4a88      	ldr	r2, [pc, #544]	; (80095ec <_strtod_l+0x284>)
 80093ca:	a91b      	add	r1, sp, #108	; 0x6c
 80093cc:	4648      	mov	r0, r9
 80093ce:	f001 ff2c 	bl	800b22a <__gethex>
 80093d2:	f010 0407 	ands.w	r4, r0, #7
 80093d6:	4606      	mov	r6, r0
 80093d8:	d005      	beq.n	80093e6 <_strtod_l+0x7e>
 80093da:	2c06      	cmp	r4, #6
 80093dc:	d12b      	bne.n	8009436 <_strtod_l+0xce>
 80093de:	3501      	adds	r5, #1
 80093e0:	2300      	movs	r3, #0
 80093e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80093e4:	930d      	str	r3, [sp, #52]	; 0x34
 80093e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f040 859a 	bne.w	8009f22 <_strtod_l+0xbba>
 80093ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f0:	b1e3      	cbz	r3, 800942c <_strtod_l+0xc4>
 80093f2:	4652      	mov	r2, sl
 80093f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093f8:	ec43 2b10 	vmov	d0, r2, r3
 80093fc:	b021      	add	sp, #132	; 0x84
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	2a2b      	cmp	r2, #43	; 0x2b
 8009404:	d015      	beq.n	8009432 <_strtod_l+0xca>
 8009406:	2a2d      	cmp	r2, #45	; 0x2d
 8009408:	d004      	beq.n	8009414 <_strtod_l+0xac>
 800940a:	2a20      	cmp	r2, #32
 800940c:	d1ca      	bne.n	80093a4 <_strtod_l+0x3c>
 800940e:	3301      	adds	r3, #1
 8009410:	931b      	str	r3, [sp, #108]	; 0x6c
 8009412:	e7bf      	b.n	8009394 <_strtod_l+0x2c>
 8009414:	2201      	movs	r2, #1
 8009416:	920d      	str	r2, [sp, #52]	; 0x34
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	921b      	str	r2, [sp, #108]	; 0x6c
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1c2      	bne.n	80093a8 <_strtod_l+0x40>
 8009422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009424:	961b      	str	r6, [sp, #108]	; 0x6c
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 8579 	bne.w	8009f1e <_strtod_l+0xbb6>
 800942c:	4652      	mov	r2, sl
 800942e:	465b      	mov	r3, fp
 8009430:	e7e2      	b.n	80093f8 <_strtod_l+0x90>
 8009432:	2200      	movs	r2, #0
 8009434:	e7ef      	b.n	8009416 <_strtod_l+0xae>
 8009436:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009438:	b13a      	cbz	r2, 800944a <_strtod_l+0xe2>
 800943a:	2135      	movs	r1, #53	; 0x35
 800943c:	a81e      	add	r0, sp, #120	; 0x78
 800943e:	f002 fe21 	bl	800c084 <__copybits>
 8009442:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009444:	4648      	mov	r0, r9
 8009446:	f002 fa8d 	bl	800b964 <_Bfree>
 800944a:	3c01      	subs	r4, #1
 800944c:	2c04      	cmp	r4, #4
 800944e:	d806      	bhi.n	800945e <_strtod_l+0xf6>
 8009450:	e8df f004 	tbb	[pc, r4]
 8009454:	1714030a 	.word	0x1714030a
 8009458:	0a          	.byte	0x0a
 8009459:	00          	.byte	0x00
 800945a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800945e:	0730      	lsls	r0, r6, #28
 8009460:	d5c1      	bpl.n	80093e6 <_strtod_l+0x7e>
 8009462:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009466:	e7be      	b.n	80093e6 <_strtod_l+0x7e>
 8009468:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800946c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800946e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009472:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009476:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800947a:	e7f0      	b.n	800945e <_strtod_l+0xf6>
 800947c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80095f0 <_strtod_l+0x288>
 8009480:	e7ed      	b.n	800945e <_strtod_l+0xf6>
 8009482:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009486:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800948a:	e7e8      	b.n	800945e <_strtod_l+0xf6>
 800948c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	921b      	str	r2, [sp, #108]	; 0x6c
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	2b30      	cmp	r3, #48	; 0x30
 8009496:	d0f9      	beq.n	800948c <_strtod_l+0x124>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0a4      	beq.n	80093e6 <_strtod_l+0x7e>
 800949c:	2301      	movs	r3, #1
 800949e:	2500      	movs	r5, #0
 80094a0:	9306      	str	r3, [sp, #24]
 80094a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094a4:	9308      	str	r3, [sp, #32]
 80094a6:	9507      	str	r5, [sp, #28]
 80094a8:	9505      	str	r5, [sp, #20]
 80094aa:	220a      	movs	r2, #10
 80094ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80094ae:	7807      	ldrb	r7, [r0, #0]
 80094b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80094b4:	b2d9      	uxtb	r1, r3
 80094b6:	2909      	cmp	r1, #9
 80094b8:	d929      	bls.n	800950e <_strtod_l+0x1a6>
 80094ba:	4622      	mov	r2, r4
 80094bc:	f8d8 1000 	ldr.w	r1, [r8]
 80094c0:	f003 f9b7 	bl	800c832 <strncmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d031      	beq.n	800952c <_strtod_l+0x1c4>
 80094c8:	2000      	movs	r0, #0
 80094ca:	9c05      	ldr	r4, [sp, #20]
 80094cc:	9004      	str	r0, [sp, #16]
 80094ce:	463b      	mov	r3, r7
 80094d0:	4602      	mov	r2, r0
 80094d2:	2b65      	cmp	r3, #101	; 0x65
 80094d4:	d001      	beq.n	80094da <_strtod_l+0x172>
 80094d6:	2b45      	cmp	r3, #69	; 0x45
 80094d8:	d114      	bne.n	8009504 <_strtod_l+0x19c>
 80094da:	b924      	cbnz	r4, 80094e6 <_strtod_l+0x17e>
 80094dc:	b910      	cbnz	r0, 80094e4 <_strtod_l+0x17c>
 80094de:	9b06      	ldr	r3, [sp, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d09e      	beq.n	8009422 <_strtod_l+0xba>
 80094e4:	2400      	movs	r4, #0
 80094e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80094e8:	1c73      	adds	r3, r6, #1
 80094ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80094ec:	7873      	ldrb	r3, [r6, #1]
 80094ee:	2b2b      	cmp	r3, #43	; 0x2b
 80094f0:	d078      	beq.n	80095e4 <_strtod_l+0x27c>
 80094f2:	2b2d      	cmp	r3, #45	; 0x2d
 80094f4:	d070      	beq.n	80095d8 <_strtod_l+0x270>
 80094f6:	f04f 0c00 	mov.w	ip, #0
 80094fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80094fe:	2f09      	cmp	r7, #9
 8009500:	d97c      	bls.n	80095fc <_strtod_l+0x294>
 8009502:	961b      	str	r6, [sp, #108]	; 0x6c
 8009504:	f04f 0e00 	mov.w	lr, #0
 8009508:	e09a      	b.n	8009640 <_strtod_l+0x2d8>
 800950a:	2300      	movs	r3, #0
 800950c:	e7c7      	b.n	800949e <_strtod_l+0x136>
 800950e:	9905      	ldr	r1, [sp, #20]
 8009510:	2908      	cmp	r1, #8
 8009512:	bfdd      	ittte	le
 8009514:	9907      	ldrle	r1, [sp, #28]
 8009516:	fb02 3301 	mlale	r3, r2, r1, r3
 800951a:	9307      	strle	r3, [sp, #28]
 800951c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009520:	9b05      	ldr	r3, [sp, #20]
 8009522:	3001      	adds	r0, #1
 8009524:	3301      	adds	r3, #1
 8009526:	9305      	str	r3, [sp, #20]
 8009528:	901b      	str	r0, [sp, #108]	; 0x6c
 800952a:	e7bf      	b.n	80094ac <_strtod_l+0x144>
 800952c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800952e:	191a      	adds	r2, r3, r4
 8009530:	921b      	str	r2, [sp, #108]	; 0x6c
 8009532:	9a05      	ldr	r2, [sp, #20]
 8009534:	5d1b      	ldrb	r3, [r3, r4]
 8009536:	2a00      	cmp	r2, #0
 8009538:	d037      	beq.n	80095aa <_strtod_l+0x242>
 800953a:	9c05      	ldr	r4, [sp, #20]
 800953c:	4602      	mov	r2, r0
 800953e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009542:	2909      	cmp	r1, #9
 8009544:	d913      	bls.n	800956e <_strtod_l+0x206>
 8009546:	2101      	movs	r1, #1
 8009548:	9104      	str	r1, [sp, #16]
 800954a:	e7c2      	b.n	80094d2 <_strtod_l+0x16a>
 800954c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	921b      	str	r2, [sp, #108]	; 0x6c
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	3001      	adds	r0, #1
 8009556:	2b30      	cmp	r3, #48	; 0x30
 8009558:	d0f8      	beq.n	800954c <_strtod_l+0x1e4>
 800955a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800955e:	2a08      	cmp	r2, #8
 8009560:	f200 84e4 	bhi.w	8009f2c <_strtod_l+0xbc4>
 8009564:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009566:	9208      	str	r2, [sp, #32]
 8009568:	4602      	mov	r2, r0
 800956a:	2000      	movs	r0, #0
 800956c:	4604      	mov	r4, r0
 800956e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009572:	f100 0101 	add.w	r1, r0, #1
 8009576:	d012      	beq.n	800959e <_strtod_l+0x236>
 8009578:	440a      	add	r2, r1
 800957a:	eb00 0c04 	add.w	ip, r0, r4
 800957e:	4621      	mov	r1, r4
 8009580:	270a      	movs	r7, #10
 8009582:	458c      	cmp	ip, r1
 8009584:	d113      	bne.n	80095ae <_strtod_l+0x246>
 8009586:	1821      	adds	r1, r4, r0
 8009588:	2908      	cmp	r1, #8
 800958a:	f104 0401 	add.w	r4, r4, #1
 800958e:	4404      	add	r4, r0
 8009590:	dc19      	bgt.n	80095c6 <_strtod_l+0x25e>
 8009592:	9b07      	ldr	r3, [sp, #28]
 8009594:	210a      	movs	r1, #10
 8009596:	fb01 e303 	mla	r3, r1, r3, lr
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	2100      	movs	r1, #0
 800959e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095a0:	1c58      	adds	r0, r3, #1
 80095a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	4608      	mov	r0, r1
 80095a8:	e7c9      	b.n	800953e <_strtod_l+0x1d6>
 80095aa:	9805      	ldr	r0, [sp, #20]
 80095ac:	e7d3      	b.n	8009556 <_strtod_l+0x1ee>
 80095ae:	2908      	cmp	r1, #8
 80095b0:	f101 0101 	add.w	r1, r1, #1
 80095b4:	dc03      	bgt.n	80095be <_strtod_l+0x256>
 80095b6:	9b07      	ldr	r3, [sp, #28]
 80095b8:	437b      	muls	r3, r7
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	e7e1      	b.n	8009582 <_strtod_l+0x21a>
 80095be:	2910      	cmp	r1, #16
 80095c0:	bfd8      	it	le
 80095c2:	437d      	mulle	r5, r7
 80095c4:	e7dd      	b.n	8009582 <_strtod_l+0x21a>
 80095c6:	2c10      	cmp	r4, #16
 80095c8:	bfdc      	itt	le
 80095ca:	210a      	movle	r1, #10
 80095cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80095d0:	e7e4      	b.n	800959c <_strtod_l+0x234>
 80095d2:	2301      	movs	r3, #1
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	e781      	b.n	80094dc <_strtod_l+0x174>
 80095d8:	f04f 0c01 	mov.w	ip, #1
 80095dc:	1cb3      	adds	r3, r6, #2
 80095de:	931b      	str	r3, [sp, #108]	; 0x6c
 80095e0:	78b3      	ldrb	r3, [r6, #2]
 80095e2:	e78a      	b.n	80094fa <_strtod_l+0x192>
 80095e4:	f04f 0c00 	mov.w	ip, #0
 80095e8:	e7f8      	b.n	80095dc <_strtod_l+0x274>
 80095ea:	bf00      	nop
 80095ec:	0800e2c0 	.word	0x0800e2c0
 80095f0:	7ff00000 	.word	0x7ff00000
 80095f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095f6:	1c5f      	adds	r7, r3, #1
 80095f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d0f9      	beq.n	80095f4 <_strtod_l+0x28c>
 8009600:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009604:	2f08      	cmp	r7, #8
 8009606:	f63f af7d 	bhi.w	8009504 <_strtod_l+0x19c>
 800960a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800960e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009610:	930a      	str	r3, [sp, #40]	; 0x28
 8009612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009614:	1c5f      	adds	r7, r3, #1
 8009616:	971b      	str	r7, [sp, #108]	; 0x6c
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800961e:	f1b8 0f09 	cmp.w	r8, #9
 8009622:	d937      	bls.n	8009694 <_strtod_l+0x32c>
 8009624:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009626:	1a7f      	subs	r7, r7, r1
 8009628:	2f08      	cmp	r7, #8
 800962a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800962e:	dc37      	bgt.n	80096a0 <_strtod_l+0x338>
 8009630:	45be      	cmp	lr, r7
 8009632:	bfa8      	it	ge
 8009634:	46be      	movge	lr, r7
 8009636:	f1bc 0f00 	cmp.w	ip, #0
 800963a:	d001      	beq.n	8009640 <_strtod_l+0x2d8>
 800963c:	f1ce 0e00 	rsb	lr, lr, #0
 8009640:	2c00      	cmp	r4, #0
 8009642:	d151      	bne.n	80096e8 <_strtod_l+0x380>
 8009644:	2800      	cmp	r0, #0
 8009646:	f47f aece 	bne.w	80093e6 <_strtod_l+0x7e>
 800964a:	9a06      	ldr	r2, [sp, #24]
 800964c:	2a00      	cmp	r2, #0
 800964e:	f47f aeca 	bne.w	80093e6 <_strtod_l+0x7e>
 8009652:	9a04      	ldr	r2, [sp, #16]
 8009654:	2a00      	cmp	r2, #0
 8009656:	f47f aee4 	bne.w	8009422 <_strtod_l+0xba>
 800965a:	2b4e      	cmp	r3, #78	; 0x4e
 800965c:	d027      	beq.n	80096ae <_strtod_l+0x346>
 800965e:	dc21      	bgt.n	80096a4 <_strtod_l+0x33c>
 8009660:	2b49      	cmp	r3, #73	; 0x49
 8009662:	f47f aede 	bne.w	8009422 <_strtod_l+0xba>
 8009666:	49a0      	ldr	r1, [pc, #640]	; (80098e8 <_strtod_l+0x580>)
 8009668:	a81b      	add	r0, sp, #108	; 0x6c
 800966a:	f002 f811 	bl	800b690 <__match>
 800966e:	2800      	cmp	r0, #0
 8009670:	f43f aed7 	beq.w	8009422 <_strtod_l+0xba>
 8009674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009676:	499d      	ldr	r1, [pc, #628]	; (80098ec <_strtod_l+0x584>)
 8009678:	3b01      	subs	r3, #1
 800967a:	a81b      	add	r0, sp, #108	; 0x6c
 800967c:	931b      	str	r3, [sp, #108]	; 0x6c
 800967e:	f002 f807 	bl	800b690 <__match>
 8009682:	b910      	cbnz	r0, 800968a <_strtod_l+0x322>
 8009684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009686:	3301      	adds	r3, #1
 8009688:	931b      	str	r3, [sp, #108]	; 0x6c
 800968a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009900 <_strtod_l+0x598>
 800968e:	f04f 0a00 	mov.w	sl, #0
 8009692:	e6a8      	b.n	80093e6 <_strtod_l+0x7e>
 8009694:	210a      	movs	r1, #10
 8009696:	fb01 3e0e 	mla	lr, r1, lr, r3
 800969a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800969e:	e7b8      	b.n	8009612 <_strtod_l+0x2aa>
 80096a0:	46be      	mov	lr, r7
 80096a2:	e7c8      	b.n	8009636 <_strtod_l+0x2ce>
 80096a4:	2b69      	cmp	r3, #105	; 0x69
 80096a6:	d0de      	beq.n	8009666 <_strtod_l+0x2fe>
 80096a8:	2b6e      	cmp	r3, #110	; 0x6e
 80096aa:	f47f aeba 	bne.w	8009422 <_strtod_l+0xba>
 80096ae:	4990      	ldr	r1, [pc, #576]	; (80098f0 <_strtod_l+0x588>)
 80096b0:	a81b      	add	r0, sp, #108	; 0x6c
 80096b2:	f001 ffed 	bl	800b690 <__match>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f aeb3 	beq.w	8009422 <_strtod_l+0xba>
 80096bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b28      	cmp	r3, #40	; 0x28
 80096c2:	d10e      	bne.n	80096e2 <_strtod_l+0x37a>
 80096c4:	aa1e      	add	r2, sp, #120	; 0x78
 80096c6:	498b      	ldr	r1, [pc, #556]	; (80098f4 <_strtod_l+0x58c>)
 80096c8:	a81b      	add	r0, sp, #108	; 0x6c
 80096ca:	f001 fff5 	bl	800b6b8 <__hexnan>
 80096ce:	2805      	cmp	r0, #5
 80096d0:	d107      	bne.n	80096e2 <_strtod_l+0x37a>
 80096d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80096d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096e0:	e681      	b.n	80093e6 <_strtod_l+0x7e>
 80096e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009908 <_strtod_l+0x5a0>
 80096e6:	e7d2      	b.n	800968e <_strtod_l+0x326>
 80096e8:	ebae 0302 	sub.w	r3, lr, r2
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	9807      	ldr	r0, [sp, #28]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bf08      	it	eq
 80096f6:	4623      	moveq	r3, r4
 80096f8:	2c10      	cmp	r4, #16
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	46a0      	mov	r8, r4
 80096fe:	bfa8      	it	ge
 8009700:	f04f 0810 	movge.w	r8, #16
 8009704:	f7f6 fefe 	bl	8000504 <__aeabi_ui2d>
 8009708:	2c09      	cmp	r4, #9
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	dc13      	bgt.n	8009738 <_strtod_l+0x3d0>
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f43f ae67 	beq.w	80093e6 <_strtod_l+0x7e>
 8009718:	9b06      	ldr	r3, [sp, #24]
 800971a:	dd7a      	ble.n	8009812 <_strtod_l+0x4aa>
 800971c:	2b16      	cmp	r3, #22
 800971e:	dc61      	bgt.n	80097e4 <_strtod_l+0x47c>
 8009720:	4a75      	ldr	r2, [pc, #468]	; (80098f8 <_strtod_l+0x590>)
 8009722:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009726:	e9de 0100 	ldrd	r0, r1, [lr]
 800972a:	4652      	mov	r2, sl
 800972c:	465b      	mov	r3, fp
 800972e:	f7f6 ff63 	bl	80005f8 <__aeabi_dmul>
 8009732:	4682      	mov	sl, r0
 8009734:	468b      	mov	fp, r1
 8009736:	e656      	b.n	80093e6 <_strtod_l+0x7e>
 8009738:	4b6f      	ldr	r3, [pc, #444]	; (80098f8 <_strtod_l+0x590>)
 800973a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800973e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009742:	f7f6 ff59 	bl	80005f8 <__aeabi_dmul>
 8009746:	4606      	mov	r6, r0
 8009748:	4628      	mov	r0, r5
 800974a:	460f      	mov	r7, r1
 800974c:	f7f6 feda 	bl	8000504 <__aeabi_ui2d>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4630      	mov	r0, r6
 8009756:	4639      	mov	r1, r7
 8009758:	f7f6 fd98 	bl	800028c <__adddf3>
 800975c:	2c0f      	cmp	r4, #15
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	ddd5      	ble.n	8009710 <_strtod_l+0x3a8>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	eba4 0808 	sub.w	r8, r4, r8
 800976a:	4498      	add	r8, r3
 800976c:	f1b8 0f00 	cmp.w	r8, #0
 8009770:	f340 8096 	ble.w	80098a0 <_strtod_l+0x538>
 8009774:	f018 030f 	ands.w	r3, r8, #15
 8009778:	d00a      	beq.n	8009790 <_strtod_l+0x428>
 800977a:	495f      	ldr	r1, [pc, #380]	; (80098f8 <_strtod_l+0x590>)
 800977c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009780:	4652      	mov	r2, sl
 8009782:	465b      	mov	r3, fp
 8009784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009788:	f7f6 ff36 	bl	80005f8 <__aeabi_dmul>
 800978c:	4682      	mov	sl, r0
 800978e:	468b      	mov	fp, r1
 8009790:	f038 080f 	bics.w	r8, r8, #15
 8009794:	d073      	beq.n	800987e <_strtod_l+0x516>
 8009796:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800979a:	dd47      	ble.n	800982c <_strtod_l+0x4c4>
 800979c:	2400      	movs	r4, #0
 800979e:	46a0      	mov	r8, r4
 80097a0:	9407      	str	r4, [sp, #28]
 80097a2:	9405      	str	r4, [sp, #20]
 80097a4:	2322      	movs	r3, #34	; 0x22
 80097a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009900 <_strtod_l+0x598>
 80097aa:	f8c9 3000 	str.w	r3, [r9]
 80097ae:	f04f 0a00 	mov.w	sl, #0
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f43f ae16 	beq.w	80093e6 <_strtod_l+0x7e>
 80097ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097bc:	4648      	mov	r0, r9
 80097be:	f002 f8d1 	bl	800b964 <_Bfree>
 80097c2:	9905      	ldr	r1, [sp, #20]
 80097c4:	4648      	mov	r0, r9
 80097c6:	f002 f8cd 	bl	800b964 <_Bfree>
 80097ca:	4641      	mov	r1, r8
 80097cc:	4648      	mov	r0, r9
 80097ce:	f002 f8c9 	bl	800b964 <_Bfree>
 80097d2:	9907      	ldr	r1, [sp, #28]
 80097d4:	4648      	mov	r0, r9
 80097d6:	f002 f8c5 	bl	800b964 <_Bfree>
 80097da:	4621      	mov	r1, r4
 80097dc:	4648      	mov	r0, r9
 80097de:	f002 f8c1 	bl	800b964 <_Bfree>
 80097e2:	e600      	b.n	80093e6 <_strtod_l+0x7e>
 80097e4:	9a06      	ldr	r2, [sp, #24]
 80097e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80097ea:	4293      	cmp	r3, r2
 80097ec:	dbba      	blt.n	8009764 <_strtod_l+0x3fc>
 80097ee:	4d42      	ldr	r5, [pc, #264]	; (80098f8 <_strtod_l+0x590>)
 80097f0:	f1c4 040f 	rsb	r4, r4, #15
 80097f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009800:	f7f6 fefa 	bl	80005f8 <__aeabi_dmul>
 8009804:	9b06      	ldr	r3, [sp, #24]
 8009806:	1b1c      	subs	r4, r3, r4
 8009808:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800980c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009810:	e78d      	b.n	800972e <_strtod_l+0x3c6>
 8009812:	f113 0f16 	cmn.w	r3, #22
 8009816:	dba5      	blt.n	8009764 <_strtod_l+0x3fc>
 8009818:	4a37      	ldr	r2, [pc, #220]	; (80098f8 <_strtod_l+0x590>)
 800981a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800981e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009822:	4650      	mov	r0, sl
 8009824:	4659      	mov	r1, fp
 8009826:	f7f7 f811 	bl	800084c <__aeabi_ddiv>
 800982a:	e782      	b.n	8009732 <_strtod_l+0x3ca>
 800982c:	2300      	movs	r3, #0
 800982e:	4e33      	ldr	r6, [pc, #204]	; (80098fc <_strtod_l+0x594>)
 8009830:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009834:	4650      	mov	r0, sl
 8009836:	4659      	mov	r1, fp
 8009838:	461d      	mov	r5, r3
 800983a:	f1b8 0f01 	cmp.w	r8, #1
 800983e:	dc21      	bgt.n	8009884 <_strtod_l+0x51c>
 8009840:	b10b      	cbz	r3, 8009846 <_strtod_l+0x4de>
 8009842:	4682      	mov	sl, r0
 8009844:	468b      	mov	fp, r1
 8009846:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <_strtod_l+0x594>)
 8009848:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800984c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009850:	4652      	mov	r2, sl
 8009852:	465b      	mov	r3, fp
 8009854:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009858:	f7f6 fece 	bl	80005f8 <__aeabi_dmul>
 800985c:	4b28      	ldr	r3, [pc, #160]	; (8009900 <_strtod_l+0x598>)
 800985e:	460a      	mov	r2, r1
 8009860:	400b      	ands	r3, r1
 8009862:	4928      	ldr	r1, [pc, #160]	; (8009904 <_strtod_l+0x59c>)
 8009864:	428b      	cmp	r3, r1
 8009866:	4682      	mov	sl, r0
 8009868:	d898      	bhi.n	800979c <_strtod_l+0x434>
 800986a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800986e:	428b      	cmp	r3, r1
 8009870:	bf86      	itte	hi
 8009872:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800990c <_strtod_l+0x5a4>
 8009876:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800987a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800987e:	2300      	movs	r3, #0
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	e077      	b.n	8009974 <_strtod_l+0x60c>
 8009884:	f018 0f01 	tst.w	r8, #1
 8009888:	d006      	beq.n	8009898 <_strtod_l+0x530>
 800988a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	2301      	movs	r3, #1
 8009898:	3501      	adds	r5, #1
 800989a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800989e:	e7cc      	b.n	800983a <_strtod_l+0x4d2>
 80098a0:	d0ed      	beq.n	800987e <_strtod_l+0x516>
 80098a2:	f1c8 0800 	rsb	r8, r8, #0
 80098a6:	f018 020f 	ands.w	r2, r8, #15
 80098aa:	d00a      	beq.n	80098c2 <_strtod_l+0x55a>
 80098ac:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <_strtod_l+0x590>)
 80098ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098b2:	4650      	mov	r0, sl
 80098b4:	4659      	mov	r1, fp
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 ffc7 	bl	800084c <__aeabi_ddiv>
 80098be:	4682      	mov	sl, r0
 80098c0:	468b      	mov	fp, r1
 80098c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098c6:	d0da      	beq.n	800987e <_strtod_l+0x516>
 80098c8:	f1b8 0f1f 	cmp.w	r8, #31
 80098cc:	dd20      	ble.n	8009910 <_strtod_l+0x5a8>
 80098ce:	2400      	movs	r4, #0
 80098d0:	46a0      	mov	r8, r4
 80098d2:	9407      	str	r4, [sp, #28]
 80098d4:	9405      	str	r4, [sp, #20]
 80098d6:	2322      	movs	r3, #34	; 0x22
 80098d8:	f04f 0a00 	mov.w	sl, #0
 80098dc:	f04f 0b00 	mov.w	fp, #0
 80098e0:	f8c9 3000 	str.w	r3, [r9]
 80098e4:	e765      	b.n	80097b2 <_strtod_l+0x44a>
 80098e6:	bf00      	nop
 80098e8:	0800e289 	.word	0x0800e289
 80098ec:	0800e313 	.word	0x0800e313
 80098f0:	0800e291 	.word	0x0800e291
 80098f4:	0800e2d4 	.word	0x0800e2d4
 80098f8:	0800e3b8 	.word	0x0800e3b8
 80098fc:	0800e390 	.word	0x0800e390
 8009900:	7ff00000 	.word	0x7ff00000
 8009904:	7ca00000 	.word	0x7ca00000
 8009908:	fff80000 	.word	0xfff80000
 800990c:	7fefffff 	.word	0x7fefffff
 8009910:	f018 0310 	ands.w	r3, r8, #16
 8009914:	bf18      	it	ne
 8009916:	236a      	movne	r3, #106	; 0x6a
 8009918:	4da0      	ldr	r5, [pc, #640]	; (8009b9c <_strtod_l+0x834>)
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	4650      	mov	r0, sl
 800991e:	4659      	mov	r1, fp
 8009920:	2300      	movs	r3, #0
 8009922:	f1b8 0f00 	cmp.w	r8, #0
 8009926:	f300 810a 	bgt.w	8009b3e <_strtod_l+0x7d6>
 800992a:	b10b      	cbz	r3, 8009930 <_strtod_l+0x5c8>
 800992c:	4682      	mov	sl, r0
 800992e:	468b      	mov	fp, r1
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	b1bb      	cbz	r3, 8009964 <_strtod_l+0x5fc>
 8009934:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009938:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800993c:	2b00      	cmp	r3, #0
 800993e:	4659      	mov	r1, fp
 8009940:	dd10      	ble.n	8009964 <_strtod_l+0x5fc>
 8009942:	2b1f      	cmp	r3, #31
 8009944:	f340 8107 	ble.w	8009b56 <_strtod_l+0x7ee>
 8009948:	2b34      	cmp	r3, #52	; 0x34
 800994a:	bfde      	ittt	le
 800994c:	3b20      	suble	r3, #32
 800994e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009952:	fa02 f303 	lslle.w	r3, r2, r3
 8009956:	f04f 0a00 	mov.w	sl, #0
 800995a:	bfcc      	ite	gt
 800995c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009960:	ea03 0b01 	andle.w	fp, r3, r1
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4650      	mov	r0, sl
 800996a:	4659      	mov	r1, fp
 800996c:	f7f7 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009970:	2800      	cmp	r0, #0
 8009972:	d1ac      	bne.n	80098ce <_strtod_l+0x566>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	9a05      	ldr	r2, [sp, #20]
 800997a:	9908      	ldr	r1, [sp, #32]
 800997c:	4623      	mov	r3, r4
 800997e:	4648      	mov	r0, r9
 8009980:	f002 f842 	bl	800ba08 <__s2b>
 8009984:	9007      	str	r0, [sp, #28]
 8009986:	2800      	cmp	r0, #0
 8009988:	f43f af08 	beq.w	800979c <_strtod_l+0x434>
 800998c:	9a06      	ldr	r2, [sp, #24]
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	2a00      	cmp	r2, #0
 8009992:	f1c3 0300 	rsb	r3, r3, #0
 8009996:	bfa8      	it	ge
 8009998:	2300      	movge	r3, #0
 800999a:	930e      	str	r3, [sp, #56]	; 0x38
 800999c:	2400      	movs	r4, #0
 800999e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099a2:	9316      	str	r3, [sp, #88]	; 0x58
 80099a4:	46a0      	mov	r8, r4
 80099a6:	9b07      	ldr	r3, [sp, #28]
 80099a8:	4648      	mov	r0, r9
 80099aa:	6859      	ldr	r1, [r3, #4]
 80099ac:	f001 ffa6 	bl	800b8fc <_Balloc>
 80099b0:	9005      	str	r0, [sp, #20]
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aef6 	beq.w	80097a4 <_strtod_l+0x43c>
 80099b8:	9b07      	ldr	r3, [sp, #28]
 80099ba:	691a      	ldr	r2, [r3, #16]
 80099bc:	3202      	adds	r2, #2
 80099be:	f103 010c 	add.w	r1, r3, #12
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f7fe fd07 	bl	80083d8 <memcpy>
 80099ca:	aa1e      	add	r2, sp, #120	; 0x78
 80099cc:	a91d      	add	r1, sp, #116	; 0x74
 80099ce:	ec4b ab10 	vmov	d0, sl, fp
 80099d2:	4648      	mov	r0, r9
 80099d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80099d8:	f002 fad2 	bl	800bf80 <__d2b>
 80099dc:	901c      	str	r0, [sp, #112]	; 0x70
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f aee0 	beq.w	80097a4 <_strtod_l+0x43c>
 80099e4:	2101      	movs	r1, #1
 80099e6:	4648      	mov	r0, r9
 80099e8:	f002 f89a 	bl	800bb20 <__i2b>
 80099ec:	4680      	mov	r8, r0
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f aed8 	beq.w	80097a4 <_strtod_l+0x43c>
 80099f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80099f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	bfab      	itete	ge
 80099fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009a00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009a02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009a04:	bfac      	ite	ge
 8009a06:	18f7      	addge	r7, r6, r3
 8009a08:	1b9d      	sublt	r5, r3, r6
 8009a0a:	9b04      	ldr	r3, [sp, #16]
 8009a0c:	1af6      	subs	r6, r6, r3
 8009a0e:	4416      	add	r6, r2
 8009a10:	4b63      	ldr	r3, [pc, #396]	; (8009ba0 <_strtod_l+0x838>)
 8009a12:	3e01      	subs	r6, #1
 8009a14:	429e      	cmp	r6, r3
 8009a16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a1a:	f280 80af 	bge.w	8009b7c <_strtod_l+0x814>
 8009a1e:	1b9b      	subs	r3, r3, r6
 8009a20:	2b1f      	cmp	r3, #31
 8009a22:	eba2 0203 	sub.w	r2, r2, r3
 8009a26:	f04f 0101 	mov.w	r1, #1
 8009a2a:	f300 809b 	bgt.w	8009b64 <_strtod_l+0x7fc>
 8009a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a32:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	18be      	adds	r6, r7, r2
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	42b7      	cmp	r7, r6
 8009a3e:	4415      	add	r5, r2
 8009a40:	441d      	add	r5, r3
 8009a42:	463b      	mov	r3, r7
 8009a44:	bfa8      	it	ge
 8009a46:	4633      	movge	r3, r6
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	bfa8      	it	ge
 8009a4c:	462b      	movge	r3, r5
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfc2      	ittt	gt
 8009a52:	1af6      	subgt	r6, r6, r3
 8009a54:	1aed      	subgt	r5, r5, r3
 8009a56:	1aff      	subgt	r7, r7, r3
 8009a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5a:	b1bb      	cbz	r3, 8009a8c <_strtod_l+0x724>
 8009a5c:	4641      	mov	r1, r8
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4648      	mov	r0, r9
 8009a62:	f002 f8fd 	bl	800bc60 <__pow5mult>
 8009a66:	4680      	mov	r8, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f43f ae9b 	beq.w	80097a4 <_strtod_l+0x43c>
 8009a6e:	4601      	mov	r1, r0
 8009a70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a72:	4648      	mov	r0, r9
 8009a74:	f002 f85d 	bl	800bb32 <__multiply>
 8009a78:	900c      	str	r0, [sp, #48]	; 0x30
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f43f ae92 	beq.w	80097a4 <_strtod_l+0x43c>
 8009a80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a82:	4648      	mov	r0, r9
 8009a84:	f001 ff6e 	bl	800b964 <_Bfree>
 8009a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8a:	931c      	str	r3, [sp, #112]	; 0x70
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	dc7a      	bgt.n	8009b86 <_strtod_l+0x81e>
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dd08      	ble.n	8009aa8 <_strtod_l+0x740>
 8009a96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a98:	9905      	ldr	r1, [sp, #20]
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f002 f8e0 	bl	800bc60 <__pow5mult>
 8009aa0:	9005      	str	r0, [sp, #20]
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f43f ae7e 	beq.w	80097a4 <_strtod_l+0x43c>
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	dd08      	ble.n	8009abe <_strtod_l+0x756>
 8009aac:	462a      	mov	r2, r5
 8009aae:	9905      	ldr	r1, [sp, #20]
 8009ab0:	4648      	mov	r0, r9
 8009ab2:	f002 f923 	bl	800bcfc <__lshift>
 8009ab6:	9005      	str	r0, [sp, #20]
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f43f ae73 	beq.w	80097a4 <_strtod_l+0x43c>
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	dd08      	ble.n	8009ad4 <_strtod_l+0x76c>
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	4648      	mov	r0, r9
 8009ac8:	f002 f918 	bl	800bcfc <__lshift>
 8009acc:	4680      	mov	r8, r0
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f ae68 	beq.w	80097a4 <_strtod_l+0x43c>
 8009ad4:	9a05      	ldr	r2, [sp, #20]
 8009ad6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ad8:	4648      	mov	r0, r9
 8009ada:	f002 f97d 	bl	800bdd8 <__mdiff>
 8009ade:	4604      	mov	r4, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f43f ae5f 	beq.w	80097a4 <_strtod_l+0x43c>
 8009ae6:	68c3      	ldr	r3, [r0, #12]
 8009ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8009aea:	2300      	movs	r3, #0
 8009aec:	60c3      	str	r3, [r0, #12]
 8009aee:	4641      	mov	r1, r8
 8009af0:	f002 f958 	bl	800bda4 <__mcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	da55      	bge.n	8009ba4 <_strtod_l+0x83c>
 8009af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009afa:	b9e3      	cbnz	r3, 8009b36 <_strtod_l+0x7ce>
 8009afc:	f1ba 0f00 	cmp.w	sl, #0
 8009b00:	d119      	bne.n	8009b36 <_strtod_l+0x7ce>
 8009b02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b06:	b9b3      	cbnz	r3, 8009b36 <_strtod_l+0x7ce>
 8009b08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b0c:	0d1b      	lsrs	r3, r3, #20
 8009b0e:	051b      	lsls	r3, r3, #20
 8009b10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b14:	d90f      	bls.n	8009b36 <_strtod_l+0x7ce>
 8009b16:	6963      	ldr	r3, [r4, #20]
 8009b18:	b913      	cbnz	r3, 8009b20 <_strtod_l+0x7b8>
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	dd0a      	ble.n	8009b36 <_strtod_l+0x7ce>
 8009b20:	4621      	mov	r1, r4
 8009b22:	2201      	movs	r2, #1
 8009b24:	4648      	mov	r0, r9
 8009b26:	f002 f8e9 	bl	800bcfc <__lshift>
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	f002 f939 	bl	800bda4 <__mcmp>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	dc67      	bgt.n	8009c06 <_strtod_l+0x89e>
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d171      	bne.n	8009c20 <_strtod_l+0x8b8>
 8009b3c:	e63d      	b.n	80097ba <_strtod_l+0x452>
 8009b3e:	f018 0f01 	tst.w	r8, #1
 8009b42:	d004      	beq.n	8009b4e <_strtod_l+0x7e6>
 8009b44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b48:	f7f6 fd56 	bl	80005f8 <__aeabi_dmul>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b52:	3508      	adds	r5, #8
 8009b54:	e6e5      	b.n	8009922 <_strtod_l+0x5ba>
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	ea03 0a0a 	and.w	sl, r3, sl
 8009b62:	e6ff      	b.n	8009964 <_strtod_l+0x5fc>
 8009b64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009b68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009b6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009b70:	36e2      	adds	r6, #226	; 0xe2
 8009b72:	fa01 f306 	lsl.w	r3, r1, r6
 8009b76:	930a      	str	r3, [sp, #40]	; 0x28
 8009b78:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b7a:	e75d      	b.n	8009a38 <_strtod_l+0x6d0>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b80:	2301      	movs	r3, #1
 8009b82:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b84:	e758      	b.n	8009a38 <_strtod_l+0x6d0>
 8009b86:	4632      	mov	r2, r6
 8009b88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f002 f8b6 	bl	800bcfc <__lshift>
 8009b90:	901c      	str	r0, [sp, #112]	; 0x70
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f47f af7c 	bne.w	8009a90 <_strtod_l+0x728>
 8009b98:	e604      	b.n	80097a4 <_strtod_l+0x43c>
 8009b9a:	bf00      	nop
 8009b9c:	0800e2e8 	.word	0x0800e2e8
 8009ba0:	fffffc02 	.word	0xfffffc02
 8009ba4:	465d      	mov	r5, fp
 8009ba6:	f040 8086 	bne.w	8009cb6 <_strtod_l+0x94e>
 8009baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb0:	b32a      	cbz	r2, 8009bfe <_strtod_l+0x896>
 8009bb2:	4aaf      	ldr	r2, [pc, #700]	; (8009e70 <_strtod_l+0xb08>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d153      	bne.n	8009c60 <_strtod_l+0x8f8>
 8009bb8:	9b04      	ldr	r3, [sp, #16]
 8009bba:	4650      	mov	r0, sl
 8009bbc:	b1d3      	cbz	r3, 8009bf4 <_strtod_l+0x88c>
 8009bbe:	4aad      	ldr	r2, [pc, #692]	; (8009e74 <_strtod_l+0xb0c>)
 8009bc0:	402a      	ands	r2, r5
 8009bc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009bc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bca:	d816      	bhi.n	8009bfa <_strtod_l+0x892>
 8009bcc:	0d12      	lsrs	r2, r2, #20
 8009bce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	4298      	cmp	r0, r3
 8009bd8:	d142      	bne.n	8009c60 <_strtod_l+0x8f8>
 8009bda:	4ba7      	ldr	r3, [pc, #668]	; (8009e78 <_strtod_l+0xb10>)
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	d102      	bne.n	8009be6 <_strtod_l+0x87e>
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f addf 	beq.w	80097a4 <_strtod_l+0x43c>
 8009be6:	4ba3      	ldr	r3, [pc, #652]	; (8009e74 <_strtod_l+0xb0c>)
 8009be8:	402b      	ands	r3, r5
 8009bea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009bee:	f04f 0a00 	mov.w	sl, #0
 8009bf2:	e7a0      	b.n	8009b36 <_strtod_l+0x7ce>
 8009bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bf8:	e7ed      	b.n	8009bd6 <_strtod_l+0x86e>
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	e7eb      	b.n	8009bd6 <_strtod_l+0x86e>
 8009bfe:	bb7b      	cbnz	r3, 8009c60 <_strtod_l+0x8f8>
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	d12c      	bne.n	8009c60 <_strtod_l+0x8f8>
 8009c06:	9904      	ldr	r1, [sp, #16]
 8009c08:	4a9a      	ldr	r2, [pc, #616]	; (8009e74 <_strtod_l+0xb0c>)
 8009c0a:	465b      	mov	r3, fp
 8009c0c:	b1f1      	cbz	r1, 8009c4c <_strtod_l+0x8e4>
 8009c0e:	ea02 010b 	and.w	r1, r2, fp
 8009c12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c16:	dc19      	bgt.n	8009c4c <_strtod_l+0x8e4>
 8009c18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c1c:	f77f ae5b 	ble.w	80098d6 <_strtod_l+0x56e>
 8009c20:	4a96      	ldr	r2, [pc, #600]	; (8009e7c <_strtod_l+0xb14>)
 8009c22:	2300      	movs	r3, #0
 8009c24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009c28:	4650      	mov	r0, sl
 8009c2a:	4659      	mov	r1, fp
 8009c2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	4682      	mov	sl, r0
 8009c36:	468b      	mov	fp, r1
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	f47f adbe 	bne.w	80097ba <_strtod_l+0x452>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f47f adbb 	bne.w	80097ba <_strtod_l+0x452>
 8009c44:	2322      	movs	r3, #34	; 0x22
 8009c46:	f8c9 3000 	str.w	r3, [r9]
 8009c4a:	e5b6      	b.n	80097ba <_strtod_l+0x452>
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c5a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009c5e:	e76a      	b.n	8009b36 <_strtod_l+0x7ce>
 8009c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c62:	b193      	cbz	r3, 8009c8a <_strtod_l+0x922>
 8009c64:	422b      	tst	r3, r5
 8009c66:	f43f af66 	beq.w	8009b36 <_strtod_l+0x7ce>
 8009c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c6c:	9a04      	ldr	r2, [sp, #16]
 8009c6e:	4650      	mov	r0, sl
 8009c70:	4659      	mov	r1, fp
 8009c72:	b173      	cbz	r3, 8009c92 <_strtod_l+0x92a>
 8009c74:	f7ff fb5a 	bl	800932c <sulp>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c80:	f7f6 fb04 	bl	800028c <__adddf3>
 8009c84:	4682      	mov	sl, r0
 8009c86:	468b      	mov	fp, r1
 8009c88:	e755      	b.n	8009b36 <_strtod_l+0x7ce>
 8009c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c8c:	ea13 0f0a 	tst.w	r3, sl
 8009c90:	e7e9      	b.n	8009c66 <_strtod_l+0x8fe>
 8009c92:	f7ff fb4b 	bl	800932c <sulp>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c9e:	f7f6 faf3 	bl	8000288 <__aeabi_dsub>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	f7f6 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f47f ae11 	bne.w	80098d6 <_strtod_l+0x56e>
 8009cb4:	e73f      	b.n	8009b36 <_strtod_l+0x7ce>
 8009cb6:	4641      	mov	r1, r8
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f002 f9b0 	bl	800c01e <__ratio>
 8009cbe:	ec57 6b10 	vmov	r6, r7, d0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cc8:	ee10 0a10 	vmov	r0, s0
 8009ccc:	4639      	mov	r1, r7
 8009cce:	f7f6 ff0f 	bl	8000af0 <__aeabi_dcmple>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d077      	beq.n	8009dc6 <_strtod_l+0xa5e>
 8009cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d04a      	beq.n	8009d72 <_strtod_l+0xa0a>
 8009cdc:	4b68      	ldr	r3, [pc, #416]	; (8009e80 <_strtod_l+0xb18>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ce4:	4f66      	ldr	r7, [pc, #408]	; (8009e80 <_strtod_l+0xb18>)
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	4b62      	ldr	r3, [pc, #392]	; (8009e74 <_strtod_l+0xb0c>)
 8009cea:	402b      	ands	r3, r5
 8009cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cf0:	4b64      	ldr	r3, [pc, #400]	; (8009e84 <_strtod_l+0xb1c>)
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	f040 80ce 	bne.w	8009e94 <_strtod_l+0xb2c>
 8009cf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009d04:	ec4b ab10 	vmov	d0, sl, fp
 8009d08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009d0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d10:	f002 f8c0 	bl	800be94 <__ulp>
 8009d14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d18:	ec53 2b10 	vmov	r2, r3, d0
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	4652      	mov	r2, sl
 8009d22:	465b      	mov	r3, fp
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4952      	ldr	r1, [pc, #328]	; (8009e74 <_strtod_l+0xb0c>)
 8009d2c:	4a56      	ldr	r2, [pc, #344]	; (8009e88 <_strtod_l+0xb20>)
 8009d2e:	4019      	ands	r1, r3
 8009d30:	4291      	cmp	r1, r2
 8009d32:	4682      	mov	sl, r0
 8009d34:	d95b      	bls.n	8009dee <_strtod_l+0xa86>
 8009d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d103      	bne.n	8009d48 <_strtod_l+0x9e0>
 8009d40:	9b08      	ldr	r3, [sp, #32]
 8009d42:	3301      	adds	r3, #1
 8009d44:	f43f ad2e 	beq.w	80097a4 <_strtod_l+0x43c>
 8009d48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009e78 <_strtod_l+0xb10>
 8009d4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009d50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d52:	4648      	mov	r0, r9
 8009d54:	f001 fe06 	bl	800b964 <_Bfree>
 8009d58:	9905      	ldr	r1, [sp, #20]
 8009d5a:	4648      	mov	r0, r9
 8009d5c:	f001 fe02 	bl	800b964 <_Bfree>
 8009d60:	4641      	mov	r1, r8
 8009d62:	4648      	mov	r0, r9
 8009d64:	f001 fdfe 	bl	800b964 <_Bfree>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4648      	mov	r0, r9
 8009d6c:	f001 fdfa 	bl	800b964 <_Bfree>
 8009d70:	e619      	b.n	80099a6 <_strtod_l+0x63e>
 8009d72:	f1ba 0f00 	cmp.w	sl, #0
 8009d76:	d11a      	bne.n	8009dae <_strtod_l+0xa46>
 8009d78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d7c:	b9eb      	cbnz	r3, 8009dba <_strtod_l+0xa52>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4b3f      	ldr	r3, [pc, #252]	; (8009e80 <_strtod_l+0xb18>)
 8009d82:	4630      	mov	r0, r6
 8009d84:	4639      	mov	r1, r7
 8009d86:	f7f6 fea9 	bl	8000adc <__aeabi_dcmplt>
 8009d8a:	b9c8      	cbnz	r0, 8009dc0 <_strtod_l+0xa58>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4639      	mov	r1, r7
 8009d90:	2200      	movs	r2, #0
 8009d92:	4b3e      	ldr	r3, [pc, #248]	; (8009e8c <_strtod_l+0xb24>)
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009da0:	9618      	str	r6, [sp, #96]	; 0x60
 8009da2:	9319      	str	r3, [sp, #100]	; 0x64
 8009da4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009da8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009dac:	e79c      	b.n	8009ce8 <_strtod_l+0x980>
 8009dae:	f1ba 0f01 	cmp.w	sl, #1
 8009db2:	d102      	bne.n	8009dba <_strtod_l+0xa52>
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	f43f ad8e 	beq.w	80098d6 <_strtod_l+0x56e>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4b34      	ldr	r3, [pc, #208]	; (8009e90 <_strtod_l+0xb28>)
 8009dbe:	e78f      	b.n	8009ce0 <_strtod_l+0x978>
 8009dc0:	2600      	movs	r6, #0
 8009dc2:	4f32      	ldr	r7, [pc, #200]	; (8009e8c <_strtod_l+0xb24>)
 8009dc4:	e7ea      	b.n	8009d9c <_strtod_l+0xa34>
 8009dc6:	4b31      	ldr	r3, [pc, #196]	; (8009e8c <_strtod_l+0xb24>)
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f7f6 fc13 	bl	80005f8 <__aeabi_dmul>
 8009dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	460f      	mov	r7, r1
 8009dd8:	b933      	cbnz	r3, 8009de8 <_strtod_l+0xa80>
 8009dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dde:	9010      	str	r0, [sp, #64]	; 0x40
 8009de0:	9311      	str	r3, [sp, #68]	; 0x44
 8009de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009de6:	e7df      	b.n	8009da8 <_strtod_l+0xa40>
 8009de8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009dec:	e7f9      	b.n	8009de2 <_strtod_l+0xa7a>
 8009dee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ab      	bne.n	8009d50 <_strtod_l+0x9e8>
 8009df8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dfc:	0d1b      	lsrs	r3, r3, #20
 8009dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e00:	051b      	lsls	r3, r3, #20
 8009e02:	429a      	cmp	r2, r3
 8009e04:	465d      	mov	r5, fp
 8009e06:	d1a3      	bne.n	8009d50 <_strtod_l+0x9e8>
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7f6 fea4 	bl	8000b58 <__aeabi_d2iz>
 8009e10:	f7f6 fb88 	bl	8000524 <__aeabi_i2d>
 8009e14:	460b      	mov	r3, r1
 8009e16:	4602      	mov	r2, r0
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7f6 fa34 	bl	8000288 <__aeabi_dsub>
 8009e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e22:	4606      	mov	r6, r0
 8009e24:	460f      	mov	r7, r1
 8009e26:	b933      	cbnz	r3, 8009e36 <_strtod_l+0xace>
 8009e28:	f1ba 0f00 	cmp.w	sl, #0
 8009e2c:	d103      	bne.n	8009e36 <_strtod_l+0xace>
 8009e2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	d06d      	beq.n	8009f12 <_strtod_l+0xbaa>
 8009e36:	a30a      	add	r3, pc, #40	; (adr r3, 8009e60 <_strtod_l+0xaf8>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f47f acb8 	bne.w	80097ba <_strtod_l+0x452>
 8009e4a:	a307      	add	r3, pc, #28	; (adr r3, 8009e68 <_strtod_l+0xb00>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 fe60 	bl	8000b18 <__aeabi_dcmpgt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f af79 	beq.w	8009d50 <_strtod_l+0x9e8>
 8009e5e:	e4ac      	b.n	80097ba <_strtod_l+0x452>
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fdfffff 	.word	0x3fdfffff
 8009e68:	35afe535 	.word	0x35afe535
 8009e6c:	3fe00000 	.word	0x3fe00000
 8009e70:	000fffff 	.word	0x000fffff
 8009e74:	7ff00000 	.word	0x7ff00000
 8009e78:	7fefffff 	.word	0x7fefffff
 8009e7c:	39500000 	.word	0x39500000
 8009e80:	3ff00000 	.word	0x3ff00000
 8009e84:	7fe00000 	.word	0x7fe00000
 8009e88:	7c9fffff 	.word	0x7c9fffff
 8009e8c:	3fe00000 	.word	0x3fe00000
 8009e90:	bff00000 	.word	0xbff00000
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	b333      	cbz	r3, 8009ee6 <_strtod_l+0xb7e>
 8009e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e9e:	d822      	bhi.n	8009ee6 <_strtod_l+0xb7e>
 8009ea0:	a327      	add	r3, pc, #156	; (adr r3, 8009f40 <_strtod_l+0xbd8>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	f7f6 fe21 	bl	8000af0 <__aeabi_dcmple>
 8009eae:	b1a0      	cbz	r0, 8009eda <_strtod_l+0xb72>
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7f6 fe78 	bl	8000ba8 <__aeabi_d2uiz>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	bf08      	it	eq
 8009ebc:	2001      	moveq	r0, #1
 8009ebe:	f7f6 fb21 	bl	8000504 <__aeabi_ui2d>
 8009ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	bb03      	cbnz	r3, 8009f0c <_strtod_l+0xba4>
 8009eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ece:	9012      	str	r0, [sp, #72]	; 0x48
 8009ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ed2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009ed6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009edc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ede:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009eea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009eee:	f001 ffd1 	bl	800be94 <__ulp>
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	ec53 2b10 	vmov	r2, r3, d0
 8009ef8:	4659      	mov	r1, fp
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f02:	f7f6 f9c3 	bl	800028c <__adddf3>
 8009f06:	4682      	mov	sl, r0
 8009f08:	468b      	mov	fp, r1
 8009f0a:	e772      	b.n	8009df2 <_strtod_l+0xa8a>
 8009f0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009f10:	e7df      	b.n	8009ed2 <_strtod_l+0xb6a>
 8009f12:	a30d      	add	r3, pc, #52	; (adr r3, 8009f48 <_strtod_l+0xbe0>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 fde0 	bl	8000adc <__aeabi_dcmplt>
 8009f1c:	e79c      	b.n	8009e58 <_strtod_l+0xaf0>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	930d      	str	r3, [sp, #52]	; 0x34
 8009f22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	f7ff ba61 	b.w	80093ee <_strtod_l+0x86>
 8009f2c:	2b65      	cmp	r3, #101	; 0x65
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	f43f ab4e 	beq.w	80095d2 <_strtod_l+0x26a>
 8009f36:	2101      	movs	r1, #1
 8009f38:	4614      	mov	r4, r2
 8009f3a:	9104      	str	r1, [sp, #16]
 8009f3c:	f7ff bacb 	b.w	80094d6 <_strtod_l+0x16e>
 8009f40:	ffc00000 	.word	0xffc00000
 8009f44:	41dfffff 	.word	0x41dfffff
 8009f48:	94a03595 	.word	0x94a03595
 8009f4c:	3fcfffff 	.word	0x3fcfffff

08009f50 <_strtod_r>:
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <_strtod_r+0x18>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	b410      	push	{r4}
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	4c04      	ldr	r4, [pc, #16]	; (8009f6c <_strtod_r+0x1c>)
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bf08      	it	eq
 8009f5e:	4623      	moveq	r3, r4
 8009f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f64:	f7ff ba00 	b.w	8009368 <_strtod_l>
 8009f68:	20000024 	.word	0x20000024
 8009f6c:	20000088 	.word	0x20000088

08009f70 <_strtol_l.isra.0>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	4680      	mov	r8, r0
 8009f76:	4689      	mov	r9, r1
 8009f78:	4692      	mov	sl, r2
 8009f7a:	461e      	mov	r6, r3
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	463d      	mov	r5, r7
 8009f80:	9808      	ldr	r0, [sp, #32]
 8009f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f86:	f001 fc27 	bl	800b7d8 <__locale_ctype_ptr_l>
 8009f8a:	4420      	add	r0, r4
 8009f8c:	7843      	ldrb	r3, [r0, #1]
 8009f8e:	f013 0308 	ands.w	r3, r3, #8
 8009f92:	d132      	bne.n	8009ffa <_strtol_l.isra.0+0x8a>
 8009f94:	2c2d      	cmp	r4, #45	; 0x2d
 8009f96:	d132      	bne.n	8009ffe <_strtol_l.isra.0+0x8e>
 8009f98:	787c      	ldrb	r4, [r7, #1]
 8009f9a:	1cbd      	adds	r5, r7, #2
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d05d      	beq.n	800a05e <_strtol_l.isra.0+0xee>
 8009fa2:	2e10      	cmp	r6, #16
 8009fa4:	d109      	bne.n	8009fba <_strtol_l.isra.0+0x4a>
 8009fa6:	2c30      	cmp	r4, #48	; 0x30
 8009fa8:	d107      	bne.n	8009fba <_strtol_l.isra.0+0x4a>
 8009faa:	782b      	ldrb	r3, [r5, #0]
 8009fac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fb0:	2b58      	cmp	r3, #88	; 0x58
 8009fb2:	d14f      	bne.n	800a054 <_strtol_l.isra.0+0xe4>
 8009fb4:	786c      	ldrb	r4, [r5, #1]
 8009fb6:	2610      	movs	r6, #16
 8009fb8:	3502      	adds	r5, #2
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	bf14      	ite	ne
 8009fbe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009fc2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009fc6:	2700      	movs	r7, #0
 8009fc8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009fcc:	4638      	mov	r0, r7
 8009fce:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009fd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009fd6:	2b09      	cmp	r3, #9
 8009fd8:	d817      	bhi.n	800a00a <_strtol_l.isra.0+0x9a>
 8009fda:	461c      	mov	r4, r3
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	dd23      	ble.n	800a028 <_strtol_l.isra.0+0xb8>
 8009fe0:	1c7b      	adds	r3, r7, #1
 8009fe2:	d007      	beq.n	8009ff4 <_strtol_l.isra.0+0x84>
 8009fe4:	4584      	cmp	ip, r0
 8009fe6:	d31c      	bcc.n	800a022 <_strtol_l.isra.0+0xb2>
 8009fe8:	d101      	bne.n	8009fee <_strtol_l.isra.0+0x7e>
 8009fea:	45a6      	cmp	lr, r4
 8009fec:	db19      	blt.n	800a022 <_strtol_l.isra.0+0xb2>
 8009fee:	fb00 4006 	mla	r0, r0, r6, r4
 8009ff2:	2701      	movs	r7, #1
 8009ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff8:	e7eb      	b.n	8009fd2 <_strtol_l.isra.0+0x62>
 8009ffa:	462f      	mov	r7, r5
 8009ffc:	e7bf      	b.n	8009f7e <_strtol_l.isra.0+0xe>
 8009ffe:	2c2b      	cmp	r4, #43	; 0x2b
 800a000:	bf04      	itt	eq
 800a002:	1cbd      	addeq	r5, r7, #2
 800a004:	787c      	ldrbeq	r4, [r7, #1]
 800a006:	461a      	mov	r2, r3
 800a008:	e7c9      	b.n	8009f9e <_strtol_l.isra.0+0x2e>
 800a00a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a00e:	2b19      	cmp	r3, #25
 800a010:	d801      	bhi.n	800a016 <_strtol_l.isra.0+0xa6>
 800a012:	3c37      	subs	r4, #55	; 0x37
 800a014:	e7e2      	b.n	8009fdc <_strtol_l.isra.0+0x6c>
 800a016:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a01a:	2b19      	cmp	r3, #25
 800a01c:	d804      	bhi.n	800a028 <_strtol_l.isra.0+0xb8>
 800a01e:	3c57      	subs	r4, #87	; 0x57
 800a020:	e7dc      	b.n	8009fdc <_strtol_l.isra.0+0x6c>
 800a022:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a026:	e7e5      	b.n	8009ff4 <_strtol_l.isra.0+0x84>
 800a028:	1c7b      	adds	r3, r7, #1
 800a02a:	d108      	bne.n	800a03e <_strtol_l.isra.0+0xce>
 800a02c:	2322      	movs	r3, #34	; 0x22
 800a02e:	f8c8 3000 	str.w	r3, [r8]
 800a032:	4608      	mov	r0, r1
 800a034:	f1ba 0f00 	cmp.w	sl, #0
 800a038:	d107      	bne.n	800a04a <_strtol_l.isra.0+0xda>
 800a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03e:	b102      	cbz	r2, 800a042 <_strtol_l.isra.0+0xd2>
 800a040:	4240      	negs	r0, r0
 800a042:	f1ba 0f00 	cmp.w	sl, #0
 800a046:	d0f8      	beq.n	800a03a <_strtol_l.isra.0+0xca>
 800a048:	b10f      	cbz	r7, 800a04e <_strtol_l.isra.0+0xde>
 800a04a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a04e:	f8ca 9000 	str.w	r9, [sl]
 800a052:	e7f2      	b.n	800a03a <_strtol_l.isra.0+0xca>
 800a054:	2430      	movs	r4, #48	; 0x30
 800a056:	2e00      	cmp	r6, #0
 800a058:	d1af      	bne.n	8009fba <_strtol_l.isra.0+0x4a>
 800a05a:	2608      	movs	r6, #8
 800a05c:	e7ad      	b.n	8009fba <_strtol_l.isra.0+0x4a>
 800a05e:	2c30      	cmp	r4, #48	; 0x30
 800a060:	d0a3      	beq.n	8009faa <_strtol_l.isra.0+0x3a>
 800a062:	260a      	movs	r6, #10
 800a064:	e7a9      	b.n	8009fba <_strtol_l.isra.0+0x4a>
	...

0800a068 <_strtol_r>:
 800a068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06a:	4c06      	ldr	r4, [pc, #24]	; (800a084 <_strtol_r+0x1c>)
 800a06c:	4d06      	ldr	r5, [pc, #24]	; (800a088 <_strtol_r+0x20>)
 800a06e:	6824      	ldr	r4, [r4, #0]
 800a070:	6a24      	ldr	r4, [r4, #32]
 800a072:	2c00      	cmp	r4, #0
 800a074:	bf08      	it	eq
 800a076:	462c      	moveq	r4, r5
 800a078:	9400      	str	r4, [sp, #0]
 800a07a:	f7ff ff79 	bl	8009f70 <_strtol_l.isra.0>
 800a07e:	b003      	add	sp, #12
 800a080:	bd30      	pop	{r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	20000024 	.word	0x20000024
 800a088:	20000088 	.word	0x20000088

0800a08c <__swbuf_r>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	460e      	mov	r6, r1
 800a090:	4614      	mov	r4, r2
 800a092:	4605      	mov	r5, r0
 800a094:	b118      	cbz	r0, 800a09e <__swbuf_r+0x12>
 800a096:	6983      	ldr	r3, [r0, #24]
 800a098:	b90b      	cbnz	r3, 800a09e <__swbuf_r+0x12>
 800a09a:	f000 ffed 	bl	800b078 <__sinit>
 800a09e:	4b21      	ldr	r3, [pc, #132]	; (800a124 <__swbuf_r+0x98>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	d12a      	bne.n	800a0fa <__swbuf_r+0x6e>
 800a0a4:	686c      	ldr	r4, [r5, #4]
 800a0a6:	69a3      	ldr	r3, [r4, #24]
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	071a      	lsls	r2, r3, #28
 800a0ae:	d52e      	bpl.n	800a10e <__swbuf_r+0x82>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	b363      	cbz	r3, 800a10e <__swbuf_r+0x82>
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	6820      	ldr	r0, [r4, #0]
 800a0b8:	1ac0      	subs	r0, r0, r3
 800a0ba:	6963      	ldr	r3, [r4, #20]
 800a0bc:	b2f6      	uxtb	r6, r6
 800a0be:	4283      	cmp	r3, r0
 800a0c0:	4637      	mov	r7, r6
 800a0c2:	dc04      	bgt.n	800a0ce <__swbuf_r+0x42>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 ff6c 	bl	800afa4 <_fflush_r>
 800a0cc:	bb28      	cbnz	r0, 800a11a <__swbuf_r+0x8e>
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	60a3      	str	r3, [r4, #8]
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	6022      	str	r2, [r4, #0]
 800a0da:	701e      	strb	r6, [r3, #0]
 800a0dc:	6963      	ldr	r3, [r4, #20]
 800a0de:	3001      	adds	r0, #1
 800a0e0:	4283      	cmp	r3, r0
 800a0e2:	d004      	beq.n	800a0ee <__swbuf_r+0x62>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	07db      	lsls	r3, r3, #31
 800a0e8:	d519      	bpl.n	800a11e <__swbuf_r+0x92>
 800a0ea:	2e0a      	cmp	r6, #10
 800a0ec:	d117      	bne.n	800a11e <__swbuf_r+0x92>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 ff57 	bl	800afa4 <_fflush_r>
 800a0f6:	b190      	cbz	r0, 800a11e <__swbuf_r+0x92>
 800a0f8:	e00f      	b.n	800a11a <__swbuf_r+0x8e>
 800a0fa:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <__swbuf_r+0x9c>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	d101      	bne.n	800a104 <__swbuf_r+0x78>
 800a100:	68ac      	ldr	r4, [r5, #8]
 800a102:	e7d0      	b.n	800a0a6 <__swbuf_r+0x1a>
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <__swbuf_r+0xa0>)
 800a106:	429c      	cmp	r4, r3
 800a108:	bf08      	it	eq
 800a10a:	68ec      	ldreq	r4, [r5, #12]
 800a10c:	e7cb      	b.n	800a0a6 <__swbuf_r+0x1a>
 800a10e:	4621      	mov	r1, r4
 800a110:	4628      	mov	r0, r5
 800a112:	f000 f80d 	bl	800a130 <__swsetup_r>
 800a116:	2800      	cmp	r0, #0
 800a118:	d0cc      	beq.n	800a0b4 <__swbuf_r+0x28>
 800a11a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a11e:	4638      	mov	r0, r7
 800a120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a122:	bf00      	nop
 800a124:	0800e340 	.word	0x0800e340
 800a128:	0800e360 	.word	0x0800e360
 800a12c:	0800e320 	.word	0x0800e320

0800a130 <__swsetup_r>:
 800a130:	4b32      	ldr	r3, [pc, #200]	; (800a1fc <__swsetup_r+0xcc>)
 800a132:	b570      	push	{r4, r5, r6, lr}
 800a134:	681d      	ldr	r5, [r3, #0]
 800a136:	4606      	mov	r6, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	b125      	cbz	r5, 800a146 <__swsetup_r+0x16>
 800a13c:	69ab      	ldr	r3, [r5, #24]
 800a13e:	b913      	cbnz	r3, 800a146 <__swsetup_r+0x16>
 800a140:	4628      	mov	r0, r5
 800a142:	f000 ff99 	bl	800b078 <__sinit>
 800a146:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <__swsetup_r+0xd0>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	d10f      	bne.n	800a16c <__swsetup_r+0x3c>
 800a14c:	686c      	ldr	r4, [r5, #4]
 800a14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a152:	b29a      	uxth	r2, r3
 800a154:	0715      	lsls	r5, r2, #28
 800a156:	d42c      	bmi.n	800a1b2 <__swsetup_r+0x82>
 800a158:	06d0      	lsls	r0, r2, #27
 800a15a:	d411      	bmi.n	800a180 <__swsetup_r+0x50>
 800a15c:	2209      	movs	r2, #9
 800a15e:	6032      	str	r2, [r6, #0]
 800a160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a164:	81a3      	strh	r3, [r4, #12]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a16a:	e03e      	b.n	800a1ea <__swsetup_r+0xba>
 800a16c:	4b25      	ldr	r3, [pc, #148]	; (800a204 <__swsetup_r+0xd4>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	d101      	bne.n	800a176 <__swsetup_r+0x46>
 800a172:	68ac      	ldr	r4, [r5, #8]
 800a174:	e7eb      	b.n	800a14e <__swsetup_r+0x1e>
 800a176:	4b24      	ldr	r3, [pc, #144]	; (800a208 <__swsetup_r+0xd8>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	bf08      	it	eq
 800a17c:	68ec      	ldreq	r4, [r5, #12]
 800a17e:	e7e6      	b.n	800a14e <__swsetup_r+0x1e>
 800a180:	0751      	lsls	r1, r2, #29
 800a182:	d512      	bpl.n	800a1aa <__swsetup_r+0x7a>
 800a184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a186:	b141      	cbz	r1, 800a19a <__swsetup_r+0x6a>
 800a188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a18c:	4299      	cmp	r1, r3
 800a18e:	d002      	beq.n	800a196 <__swsetup_r+0x66>
 800a190:	4630      	mov	r0, r6
 800a192:	f001 ffc1 	bl	800c118 <_free_r>
 800a196:	2300      	movs	r3, #0
 800a198:	6363      	str	r3, [r4, #52]	; 0x34
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1a0:	81a3      	strh	r3, [r4, #12]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6063      	str	r3, [r4, #4]
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f043 0308 	orr.w	r3, r3, #8
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	b94b      	cbnz	r3, 800a1ca <__swsetup_r+0x9a>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c0:	d003      	beq.n	800a1ca <__swsetup_r+0x9a>
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f001 fb3f 	bl	800b848 <__smakebuf_r>
 800a1ca:	89a2      	ldrh	r2, [r4, #12]
 800a1cc:	f012 0301 	ands.w	r3, r2, #1
 800a1d0:	d00c      	beq.n	800a1ec <__swsetup_r+0xbc>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	6963      	ldr	r3, [r4, #20]
 800a1d8:	425b      	negs	r3, r3
 800a1da:	61a3      	str	r3, [r4, #24]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	b953      	cbnz	r3, 800a1f6 <__swsetup_r+0xc6>
 800a1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a1e8:	d1ba      	bne.n	800a160 <__swsetup_r+0x30>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	0792      	lsls	r2, r2, #30
 800a1ee:	bf58      	it	pl
 800a1f0:	6963      	ldrpl	r3, [r4, #20]
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	e7f2      	b.n	800a1dc <__swsetup_r+0xac>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e7f7      	b.n	800a1ea <__swsetup_r+0xba>
 800a1fa:	bf00      	nop
 800a1fc:	20000024 	.word	0x20000024
 800a200:	0800e340 	.word	0x0800e340
 800a204:	0800e360 	.word	0x0800e360
 800a208:	0800e320 	.word	0x0800e320

0800a20c <quorem>:
 800a20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	6903      	ldr	r3, [r0, #16]
 800a212:	690c      	ldr	r4, [r1, #16]
 800a214:	42a3      	cmp	r3, r4
 800a216:	4680      	mov	r8, r0
 800a218:	f2c0 8082 	blt.w	800a320 <quorem+0x114>
 800a21c:	3c01      	subs	r4, #1
 800a21e:	f101 0714 	add.w	r7, r1, #20
 800a222:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a226:	f100 0614 	add.w	r6, r0, #20
 800a22a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a22e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a232:	eb06 030c 	add.w	r3, r6, ip
 800a236:	3501      	adds	r5, #1
 800a238:	eb07 090c 	add.w	r9, r7, ip
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a242:	b395      	cbz	r5, 800a2aa <quorem+0x9e>
 800a244:	f04f 0a00 	mov.w	sl, #0
 800a248:	4638      	mov	r0, r7
 800a24a:	46b6      	mov	lr, r6
 800a24c:	46d3      	mov	fp, sl
 800a24e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a252:	b293      	uxth	r3, r2
 800a254:	fb05 a303 	mla	r3, r5, r3, sl
 800a258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ebab 0303 	sub.w	r3, fp, r3
 800a262:	0c12      	lsrs	r2, r2, #16
 800a264:	f8de b000 	ldr.w	fp, [lr]
 800a268:	fb05 a202 	mla	r2, r5, r2, sl
 800a26c:	fa13 f38b 	uxtah	r3, r3, fp
 800a270:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a274:	fa1f fb82 	uxth.w	fp, r2
 800a278:	f8de 2000 	ldr.w	r2, [lr]
 800a27c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a284:	b29b      	uxth	r3, r3
 800a286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a28a:	4581      	cmp	r9, r0
 800a28c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a290:	f84e 3b04 	str.w	r3, [lr], #4
 800a294:	d2db      	bcs.n	800a24e <quorem+0x42>
 800a296:	f856 300c 	ldr.w	r3, [r6, ip]
 800a29a:	b933      	cbnz	r3, 800a2aa <quorem+0x9e>
 800a29c:	9b01      	ldr	r3, [sp, #4]
 800a29e:	3b04      	subs	r3, #4
 800a2a0:	429e      	cmp	r6, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	d330      	bcc.n	800a308 <quorem+0xfc>
 800a2a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f001 fd7a 	bl	800bda4 <__mcmp>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	db25      	blt.n	800a300 <quorem+0xf4>
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f04f 0c00 	mov.w	ip, #0
 800a2bc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a2c0:	f8d0 e000 	ldr.w	lr, [r0]
 800a2c4:	b293      	uxth	r3, r2
 800a2c6:	ebac 0303 	sub.w	r3, ip, r3
 800a2ca:	0c12      	lsrs	r2, r2, #16
 800a2cc:	fa13 f38e 	uxtah	r3, r3, lr
 800a2d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2de:	45b9      	cmp	r9, r7
 800a2e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2e4:	f840 3b04 	str.w	r3, [r0], #4
 800a2e8:	d2e8      	bcs.n	800a2bc <quorem+0xb0>
 800a2ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a2ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a2f2:	b92a      	cbnz	r2, 800a300 <quorem+0xf4>
 800a2f4:	3b04      	subs	r3, #4
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	d30b      	bcc.n	800a314 <quorem+0x108>
 800a2fc:	f8c8 4010 	str.w	r4, [r8, #16]
 800a300:	4628      	mov	r0, r5
 800a302:	b003      	add	sp, #12
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	3b04      	subs	r3, #4
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	d1ca      	bne.n	800a2a6 <quorem+0x9a>
 800a310:	3c01      	subs	r4, #1
 800a312:	e7c5      	b.n	800a2a0 <quorem+0x94>
 800a314:	6812      	ldr	r2, [r2, #0]
 800a316:	3b04      	subs	r3, #4
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d1ef      	bne.n	800a2fc <quorem+0xf0>
 800a31c:	3c01      	subs	r4, #1
 800a31e:	e7ea      	b.n	800a2f6 <quorem+0xea>
 800a320:	2000      	movs	r0, #0
 800a322:	e7ee      	b.n	800a302 <quorem+0xf6>
 800a324:	0000      	movs	r0, r0
	...

0800a328 <_dtoa_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	ec57 6b10 	vmov	r6, r7, d0
 800a330:	b097      	sub	sp, #92	; 0x5c
 800a332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a334:	9106      	str	r1, [sp, #24]
 800a336:	4604      	mov	r4, r0
 800a338:	920b      	str	r2, [sp, #44]	; 0x2c
 800a33a:	9312      	str	r3, [sp, #72]	; 0x48
 800a33c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a340:	e9cd 6700 	strd	r6, r7, [sp]
 800a344:	b93d      	cbnz	r5, 800a356 <_dtoa_r+0x2e>
 800a346:	2010      	movs	r0, #16
 800a348:	f001 fabe 	bl	800b8c8 <malloc>
 800a34c:	6260      	str	r0, [r4, #36]	; 0x24
 800a34e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a352:	6005      	str	r5, [r0, #0]
 800a354:	60c5      	str	r5, [r0, #12]
 800a356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a358:	6819      	ldr	r1, [r3, #0]
 800a35a:	b151      	cbz	r1, 800a372 <_dtoa_r+0x4a>
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	604a      	str	r2, [r1, #4]
 800a360:	2301      	movs	r3, #1
 800a362:	4093      	lsls	r3, r2
 800a364:	608b      	str	r3, [r1, #8]
 800a366:	4620      	mov	r0, r4
 800a368:	f001 fafc 	bl	800b964 <_Bfree>
 800a36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	1e3b      	subs	r3, r7, #0
 800a374:	bfbb      	ittet	lt
 800a376:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a37a:	9301      	strlt	r3, [sp, #4]
 800a37c:	2300      	movge	r3, #0
 800a37e:	2201      	movlt	r2, #1
 800a380:	bfac      	ite	ge
 800a382:	f8c8 3000 	strge.w	r3, [r8]
 800a386:	f8c8 2000 	strlt.w	r2, [r8]
 800a38a:	4baf      	ldr	r3, [pc, #700]	; (800a648 <_dtoa_r+0x320>)
 800a38c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a390:	ea33 0308 	bics.w	r3, r3, r8
 800a394:	d114      	bne.n	800a3c0 <_dtoa_r+0x98>
 800a396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a398:	f242 730f 	movw	r3, #9999	; 0x270f
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	b923      	cbnz	r3, 800a3ac <_dtoa_r+0x84>
 800a3a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f000 8542 	beq.w	800ae30 <_dtoa_r+0xb08>
 800a3ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a65c <_dtoa_r+0x334>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 8544 	beq.w	800ae40 <_dtoa_r+0xb18>
 800a3b8:	f10b 0303 	add.w	r3, fp, #3
 800a3bc:	f000 bd3e 	b.w	800ae3c <_dtoa_r+0xb14>
 800a3c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f6 fb7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3d0:	4681      	mov	r9, r0
 800a3d2:	b168      	cbz	r0, 800a3f0 <_dtoa_r+0xc8>
 800a3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 8524 	beq.w	800ae2a <_dtoa_r+0xb02>
 800a3e2:	4b9a      	ldr	r3, [pc, #616]	; (800a64c <_dtoa_r+0x324>)
 800a3e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3e6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	f000 bd28 	b.w	800ae40 <_dtoa_r+0xb18>
 800a3f0:	aa14      	add	r2, sp, #80	; 0x50
 800a3f2:	a915      	add	r1, sp, #84	; 0x54
 800a3f4:	ec47 6b10 	vmov	d0, r6, r7
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f001 fdc1 	bl	800bf80 <__d2b>
 800a3fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a402:	9004      	str	r0, [sp, #16]
 800a404:	2d00      	cmp	r5, #0
 800a406:	d07c      	beq.n	800a502 <_dtoa_r+0x1da>
 800a408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a40c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a410:	46b2      	mov	sl, r6
 800a412:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a41a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a41e:	2200      	movs	r2, #0
 800a420:	4b8b      	ldr	r3, [pc, #556]	; (800a650 <_dtoa_r+0x328>)
 800a422:	4650      	mov	r0, sl
 800a424:	4659      	mov	r1, fp
 800a426:	f7f5 ff2f 	bl	8000288 <__aeabi_dsub>
 800a42a:	a381      	add	r3, pc, #516	; (adr r3, 800a630 <_dtoa_r+0x308>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	a380      	add	r3, pc, #512	; (adr r3, 800a638 <_dtoa_r+0x310>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f5 ff27 	bl	800028c <__adddf3>
 800a43e:	4606      	mov	r6, r0
 800a440:	4628      	mov	r0, r5
 800a442:	460f      	mov	r7, r1
 800a444:	f7f6 f86e 	bl	8000524 <__aeabi_i2d>
 800a448:	a37d      	add	r3, pc, #500	; (adr r3, 800a640 <_dtoa_r+0x318>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f6 f8d3 	bl	80005f8 <__aeabi_dmul>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f5 ff17 	bl	800028c <__adddf3>
 800a45e:	4606      	mov	r6, r0
 800a460:	460f      	mov	r7, r1
 800a462:	f7f6 fb79 	bl	8000b58 <__aeabi_d2iz>
 800a466:	2200      	movs	r2, #0
 800a468:	4682      	mov	sl, r0
 800a46a:	2300      	movs	r3, #0
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f6 fb34 	bl	8000adc <__aeabi_dcmplt>
 800a474:	b148      	cbz	r0, 800a48a <_dtoa_r+0x162>
 800a476:	4650      	mov	r0, sl
 800a478:	f7f6 f854 	bl	8000524 <__aeabi_i2d>
 800a47c:	4632      	mov	r2, r6
 800a47e:	463b      	mov	r3, r7
 800a480:	f7f6 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a484:	b908      	cbnz	r0, 800a48a <_dtoa_r+0x162>
 800a486:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a48a:	f1ba 0f16 	cmp.w	sl, #22
 800a48e:	d859      	bhi.n	800a544 <_dtoa_r+0x21c>
 800a490:	4970      	ldr	r1, [pc, #448]	; (800a654 <_dtoa_r+0x32c>)
 800a492:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a49a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a49e:	f7f6 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d050      	beq.n	800a548 <_dtoa_r+0x220>
 800a4a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b0:	1b5d      	subs	r5, r3, r5
 800a4b2:	f1b5 0801 	subs.w	r8, r5, #1
 800a4b6:	bf49      	itett	mi
 800a4b8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4bc:	2300      	movpl	r3, #0
 800a4be:	9305      	strmi	r3, [sp, #20]
 800a4c0:	f04f 0800 	movmi.w	r8, #0
 800a4c4:	bf58      	it	pl
 800a4c6:	9305      	strpl	r3, [sp, #20]
 800a4c8:	f1ba 0f00 	cmp.w	sl, #0
 800a4cc:	db3e      	blt.n	800a54c <_dtoa_r+0x224>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	44d0      	add	r8, sl
 800a4d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	9b06      	ldr	r3, [sp, #24]
 800a4da:	2b09      	cmp	r3, #9
 800a4dc:	f200 8090 	bhi.w	800a600 <_dtoa_r+0x2d8>
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	bfc4      	itt	gt
 800a4e4:	3b04      	subgt	r3, #4
 800a4e6:	9306      	strgt	r3, [sp, #24]
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a4ee:	bfcc      	ite	gt
 800a4f0:	2500      	movgt	r5, #0
 800a4f2:	2501      	movle	r5, #1
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	f200 808f 	bhi.w	800a618 <_dtoa_r+0x2f0>
 800a4fa:	e8df f003 	tbb	[pc, r3]
 800a4fe:	7f7d      	.short	0x7f7d
 800a500:	7131      	.short	0x7131
 800a502:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a506:	441d      	add	r5, r3
 800a508:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a50c:	2820      	cmp	r0, #32
 800a50e:	dd13      	ble.n	800a538 <_dtoa_r+0x210>
 800a510:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a514:	9b00      	ldr	r3, [sp, #0]
 800a516:	fa08 f800 	lsl.w	r8, r8, r0
 800a51a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a51e:	fa23 f000 	lsr.w	r0, r3, r0
 800a522:	ea48 0000 	orr.w	r0, r8, r0
 800a526:	f7f5 ffed 	bl	8000504 <__aeabi_ui2d>
 800a52a:	2301      	movs	r3, #1
 800a52c:	4682      	mov	sl, r0
 800a52e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a532:	3d01      	subs	r5, #1
 800a534:	9313      	str	r3, [sp, #76]	; 0x4c
 800a536:	e772      	b.n	800a41e <_dtoa_r+0xf6>
 800a538:	9b00      	ldr	r3, [sp, #0]
 800a53a:	f1c0 0020 	rsb	r0, r0, #32
 800a53e:	fa03 f000 	lsl.w	r0, r3, r0
 800a542:	e7f0      	b.n	800a526 <_dtoa_r+0x1fe>
 800a544:	2301      	movs	r3, #1
 800a546:	e7b1      	b.n	800a4ac <_dtoa_r+0x184>
 800a548:	900f      	str	r0, [sp, #60]	; 0x3c
 800a54a:	e7b0      	b.n	800a4ae <_dtoa_r+0x186>
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	eba3 030a 	sub.w	r3, r3, sl
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	f1ca 0300 	rsb	r3, sl, #0
 800a558:	9307      	str	r3, [sp, #28]
 800a55a:	2300      	movs	r3, #0
 800a55c:	930e      	str	r3, [sp, #56]	; 0x38
 800a55e:	e7bb      	b.n	800a4d8 <_dtoa_r+0x1b0>
 800a560:	2301      	movs	r3, #1
 800a562:	930a      	str	r3, [sp, #40]	; 0x28
 800a564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd59      	ble.n	800a61e <_dtoa_r+0x2f6>
 800a56a:	9302      	str	r3, [sp, #8]
 800a56c:	4699      	mov	r9, r3
 800a56e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a570:	2200      	movs	r2, #0
 800a572:	6072      	str	r2, [r6, #4]
 800a574:	2204      	movs	r2, #4
 800a576:	f102 0014 	add.w	r0, r2, #20
 800a57a:	4298      	cmp	r0, r3
 800a57c:	6871      	ldr	r1, [r6, #4]
 800a57e:	d953      	bls.n	800a628 <_dtoa_r+0x300>
 800a580:	4620      	mov	r0, r4
 800a582:	f001 f9bb 	bl	800b8fc <_Balloc>
 800a586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	f1b9 0f0e 	cmp.w	r9, #14
 800a58e:	f8d3 b000 	ldr.w	fp, [r3]
 800a592:	f200 80e6 	bhi.w	800a762 <_dtoa_r+0x43a>
 800a596:	2d00      	cmp	r5, #0
 800a598:	f000 80e3 	beq.w	800a762 <_dtoa_r+0x43a>
 800a59c:	ed9d 7b00 	vldr	d7, [sp]
 800a5a0:	f1ba 0f00 	cmp.w	sl, #0
 800a5a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a5a8:	dd74      	ble.n	800a694 <_dtoa_r+0x36c>
 800a5aa:	4a2a      	ldr	r2, [pc, #168]	; (800a654 <_dtoa_r+0x32c>)
 800a5ac:	f00a 030f 	and.w	r3, sl, #15
 800a5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5b4:	ed93 7b00 	vldr	d7, [r3]
 800a5b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a5bc:	06f0      	lsls	r0, r6, #27
 800a5be:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a5c2:	d565      	bpl.n	800a690 <_dtoa_r+0x368>
 800a5c4:	4b24      	ldr	r3, [pc, #144]	; (800a658 <_dtoa_r+0x330>)
 800a5c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5ce:	f7f6 f93d 	bl	800084c <__aeabi_ddiv>
 800a5d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a5d6:	f006 060f 	and.w	r6, r6, #15
 800a5da:	2503      	movs	r5, #3
 800a5dc:	4f1e      	ldr	r7, [pc, #120]	; (800a658 <_dtoa_r+0x330>)
 800a5de:	e04c      	b.n	800a67a <_dtoa_r+0x352>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e6:	4453      	add	r3, sl
 800a5e8:	f103 0901 	add.w	r9, r3, #1
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	bfb8      	it	lt
 800a5f4:	2301      	movlt	r3, #1
 800a5f6:	e7ba      	b.n	800a56e <_dtoa_r+0x246>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e7b2      	b.n	800a562 <_dtoa_r+0x23a>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e7f0      	b.n	800a5e2 <_dtoa_r+0x2ba>
 800a600:	2501      	movs	r5, #1
 800a602:	2300      	movs	r3, #0
 800a604:	9306      	str	r3, [sp, #24]
 800a606:	950a      	str	r5, [sp, #40]	; 0x28
 800a608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a60c:	9302      	str	r3, [sp, #8]
 800a60e:	4699      	mov	r9, r3
 800a610:	2200      	movs	r2, #0
 800a612:	2312      	movs	r3, #18
 800a614:	920b      	str	r2, [sp, #44]	; 0x2c
 800a616:	e7aa      	b.n	800a56e <_dtoa_r+0x246>
 800a618:	2301      	movs	r3, #1
 800a61a:	930a      	str	r3, [sp, #40]	; 0x28
 800a61c:	e7f4      	b.n	800a608 <_dtoa_r+0x2e0>
 800a61e:	2301      	movs	r3, #1
 800a620:	9302      	str	r3, [sp, #8]
 800a622:	4699      	mov	r9, r3
 800a624:	461a      	mov	r2, r3
 800a626:	e7f5      	b.n	800a614 <_dtoa_r+0x2ec>
 800a628:	3101      	adds	r1, #1
 800a62a:	6071      	str	r1, [r6, #4]
 800a62c:	0052      	lsls	r2, r2, #1
 800a62e:	e7a2      	b.n	800a576 <_dtoa_r+0x24e>
 800a630:	636f4361 	.word	0x636f4361
 800a634:	3fd287a7 	.word	0x3fd287a7
 800a638:	8b60c8b3 	.word	0x8b60c8b3
 800a63c:	3fc68a28 	.word	0x3fc68a28
 800a640:	509f79fb 	.word	0x509f79fb
 800a644:	3fd34413 	.word	0x3fd34413
 800a648:	7ff00000 	.word	0x7ff00000
 800a64c:	0800e295 	.word	0x0800e295
 800a650:	3ff80000 	.word	0x3ff80000
 800a654:	0800e3b8 	.word	0x0800e3b8
 800a658:	0800e390 	.word	0x0800e390
 800a65c:	0800e319 	.word	0x0800e319
 800a660:	07f1      	lsls	r1, r6, #31
 800a662:	d508      	bpl.n	800a676 <_dtoa_r+0x34e>
 800a664:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a66c:	f7f5 ffc4 	bl	80005f8 <__aeabi_dmul>
 800a670:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a674:	3501      	adds	r5, #1
 800a676:	1076      	asrs	r6, r6, #1
 800a678:	3708      	adds	r7, #8
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d1f0      	bne.n	800a660 <_dtoa_r+0x338>
 800a67e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a682:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a686:	f7f6 f8e1 	bl	800084c <__aeabi_ddiv>
 800a68a:	e9cd 0100 	strd	r0, r1, [sp]
 800a68e:	e01a      	b.n	800a6c6 <_dtoa_r+0x39e>
 800a690:	2502      	movs	r5, #2
 800a692:	e7a3      	b.n	800a5dc <_dtoa_r+0x2b4>
 800a694:	f000 80a0 	beq.w	800a7d8 <_dtoa_r+0x4b0>
 800a698:	f1ca 0600 	rsb	r6, sl, #0
 800a69c:	4b9f      	ldr	r3, [pc, #636]	; (800a91c <_dtoa_r+0x5f4>)
 800a69e:	4fa0      	ldr	r7, [pc, #640]	; (800a920 <_dtoa_r+0x5f8>)
 800a6a0:	f006 020f 	and.w	r2, r6, #15
 800a6a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a6b8:	1136      	asrs	r6, r6, #4
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2502      	movs	r5, #2
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	d17f      	bne.n	800a7c2 <_dtoa_r+0x49a>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e1      	bne.n	800a68a <_dtoa_r+0x362>
 800a6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 8087 	beq.w	800a7dc <_dtoa_r+0x4b4>
 800a6ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4b93      	ldr	r3, [pc, #588]	; (800a924 <_dtoa_r+0x5fc>)
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f6 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d07c      	beq.n	800a7dc <_dtoa_r+0x4b4>
 800a6e2:	f1b9 0f00 	cmp.w	r9, #0
 800a6e6:	d079      	beq.n	800a7dc <_dtoa_r+0x4b4>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dd35      	ble.n	800a75a <_dtoa_r+0x432>
 800a6ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a6f2:	9308      	str	r3, [sp, #32]
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4b8b      	ldr	r3, [pc, #556]	; (800a928 <_dtoa_r+0x600>)
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7f5 ff7c 	bl	80005f8 <__aeabi_dmul>
 800a700:	e9cd 0100 	strd	r0, r1, [sp]
 800a704:	9f02      	ldr	r7, [sp, #8]
 800a706:	3501      	adds	r5, #1
 800a708:	4628      	mov	r0, r5
 800a70a:	f7f5 ff0b 	bl	8000524 <__aeabi_i2d>
 800a70e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a712:	f7f5 ff71 	bl	80005f8 <__aeabi_dmul>
 800a716:	2200      	movs	r2, #0
 800a718:	4b84      	ldr	r3, [pc, #528]	; (800a92c <_dtoa_r+0x604>)
 800a71a:	f7f5 fdb7 	bl	800028c <__adddf3>
 800a71e:	4605      	mov	r5, r0
 800a720:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a724:	2f00      	cmp	r7, #0
 800a726:	d15d      	bne.n	800a7e4 <_dtoa_r+0x4bc>
 800a728:	2200      	movs	r2, #0
 800a72a:	4b81      	ldr	r3, [pc, #516]	; (800a930 <_dtoa_r+0x608>)
 800a72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a730:	f7f5 fdaa 	bl	8000288 <__aeabi_dsub>
 800a734:	462a      	mov	r2, r5
 800a736:	4633      	mov	r3, r6
 800a738:	e9cd 0100 	strd	r0, r1, [sp]
 800a73c:	f7f6 f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 800a740:	2800      	cmp	r0, #0
 800a742:	f040 8288 	bne.w	800ac56 <_dtoa_r+0x92e>
 800a746:	462a      	mov	r2, r5
 800a748:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a750:	f7f6 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	f040 827c 	bne.w	800ac52 <_dtoa_r+0x92a>
 800a75a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a75e:	e9cd 2300 	strd	r2, r3, [sp]
 800a762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a764:	2b00      	cmp	r3, #0
 800a766:	f2c0 8150 	blt.w	800aa0a <_dtoa_r+0x6e2>
 800a76a:	f1ba 0f0e 	cmp.w	sl, #14
 800a76e:	f300 814c 	bgt.w	800aa0a <_dtoa_r+0x6e2>
 800a772:	4b6a      	ldr	r3, [pc, #424]	; (800a91c <_dtoa_r+0x5f4>)
 800a774:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a778:	ed93 7b00 	vldr	d7, [r3]
 800a77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a784:	f280 80d8 	bge.w	800a938 <_dtoa_r+0x610>
 800a788:	f1b9 0f00 	cmp.w	r9, #0
 800a78c:	f300 80d4 	bgt.w	800a938 <_dtoa_r+0x610>
 800a790:	f040 825e 	bne.w	800ac50 <_dtoa_r+0x928>
 800a794:	2200      	movs	r2, #0
 800a796:	4b66      	ldr	r3, [pc, #408]	; (800a930 <_dtoa_r+0x608>)
 800a798:	ec51 0b17 	vmov	r0, r1, d7
 800a79c:	f7f5 ff2c 	bl	80005f8 <__aeabi_dmul>
 800a7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7a4:	f7f6 f9ae 	bl	8000b04 <__aeabi_dcmpge>
 800a7a8:	464f      	mov	r7, r9
 800a7aa:	464e      	mov	r6, r9
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 8234 	bne.w	800ac1a <_dtoa_r+0x8f2>
 800a7b2:	2331      	movs	r3, #49	; 0x31
 800a7b4:	f10b 0501 	add.w	r5, fp, #1
 800a7b8:	f88b 3000 	strb.w	r3, [fp]
 800a7bc:	f10a 0a01 	add.w	sl, sl, #1
 800a7c0:	e22f      	b.n	800ac22 <_dtoa_r+0x8fa>
 800a7c2:	07f2      	lsls	r2, r6, #31
 800a7c4:	d505      	bpl.n	800a7d2 <_dtoa_r+0x4aa>
 800a7c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ca:	f7f5 ff15 	bl	80005f8 <__aeabi_dmul>
 800a7ce:	3501      	adds	r5, #1
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	1076      	asrs	r6, r6, #1
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	e772      	b.n	800a6be <_dtoa_r+0x396>
 800a7d8:	2502      	movs	r5, #2
 800a7da:	e774      	b.n	800a6c6 <_dtoa_r+0x39e>
 800a7dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a7e0:	464f      	mov	r7, r9
 800a7e2:	e791      	b.n	800a708 <_dtoa_r+0x3e0>
 800a7e4:	4b4d      	ldr	r3, [pc, #308]	; (800a91c <_dtoa_r+0x5f4>)
 800a7e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d047      	beq.n	800a884 <_dtoa_r+0x55c>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	494e      	ldr	r1, [pc, #312]	; (800a934 <_dtoa_r+0x60c>)
 800a7fc:	f7f6 f826 	bl	800084c <__aeabi_ddiv>
 800a800:	462a      	mov	r2, r5
 800a802:	4633      	mov	r3, r6
 800a804:	f7f5 fd40 	bl	8000288 <__aeabi_dsub>
 800a808:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a80c:	465d      	mov	r5, fp
 800a80e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a812:	f7f6 f9a1 	bl	8000b58 <__aeabi_d2iz>
 800a816:	4606      	mov	r6, r0
 800a818:	f7f5 fe84 	bl	8000524 <__aeabi_i2d>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	f7f5 fd30 	bl	8000288 <__aeabi_dsub>
 800a828:	3630      	adds	r6, #48	; 0x30
 800a82a:	f805 6b01 	strb.w	r6, [r5], #1
 800a82e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a832:	e9cd 0100 	strd	r0, r1, [sp]
 800a836:	f7f6 f951 	bl	8000adc <__aeabi_dcmplt>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d163      	bne.n	800a906 <_dtoa_r+0x5de>
 800a83e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a842:	2000      	movs	r0, #0
 800a844:	4937      	ldr	r1, [pc, #220]	; (800a924 <_dtoa_r+0x5fc>)
 800a846:	f7f5 fd1f 	bl	8000288 <__aeabi_dsub>
 800a84a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a84e:	f7f6 f945 	bl	8000adc <__aeabi_dcmplt>
 800a852:	2800      	cmp	r0, #0
 800a854:	f040 80b7 	bne.w	800a9c6 <_dtoa_r+0x69e>
 800a858:	eba5 030b 	sub.w	r3, r5, fp
 800a85c:	429f      	cmp	r7, r3
 800a85e:	f77f af7c 	ble.w	800a75a <_dtoa_r+0x432>
 800a862:	2200      	movs	r2, #0
 800a864:	4b30      	ldr	r3, [pc, #192]	; (800a928 <_dtoa_r+0x600>)
 800a866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	2200      	movs	r2, #0
 800a870:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a874:	4b2c      	ldr	r3, [pc, #176]	; (800a928 <_dtoa_r+0x600>)
 800a876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	e9cd 0100 	strd	r0, r1, [sp]
 800a882:	e7c4      	b.n	800a80e <_dtoa_r+0x4e6>
 800a884:	462a      	mov	r2, r5
 800a886:	4633      	mov	r3, r6
 800a888:	f7f5 feb6 	bl	80005f8 <__aeabi_dmul>
 800a88c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a890:	eb0b 0507 	add.w	r5, fp, r7
 800a894:	465e      	mov	r6, fp
 800a896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a89a:	f7f6 f95d 	bl	8000b58 <__aeabi_d2iz>
 800a89e:	4607      	mov	r7, r0
 800a8a0:	f7f5 fe40 	bl	8000524 <__aeabi_i2d>
 800a8a4:	3730      	adds	r7, #48	; 0x30
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ae:	f7f5 fceb 	bl	8000288 <__aeabi_dsub>
 800a8b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a8b6:	42ae      	cmp	r6, r5
 800a8b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	d126      	bne.n	800a910 <_dtoa_r+0x5e8>
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <_dtoa_r+0x60c>)
 800a8c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8c8:	f7f5 fce0 	bl	800028c <__adddf3>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d4:	f7f6 f920 	bl	8000b18 <__aeabi_dcmpgt>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d174      	bne.n	800a9c6 <_dtoa_r+0x69e>
 800a8dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	4914      	ldr	r1, [pc, #80]	; (800a934 <_dtoa_r+0x60c>)
 800a8e4:	f7f5 fcd0 	bl	8000288 <__aeabi_dsub>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f0:	f7f6 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f43f af30 	beq.w	800a75a <_dtoa_r+0x432>
 800a8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a904:	d002      	beq.n	800a90c <_dtoa_r+0x5e4>
 800a906:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a90a:	e04a      	b.n	800a9a2 <_dtoa_r+0x67a>
 800a90c:	4615      	mov	r5, r2
 800a90e:	e7f4      	b.n	800a8fa <_dtoa_r+0x5d2>
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <_dtoa_r+0x600>)
 800a912:	f7f5 fe71 	bl	80005f8 <__aeabi_dmul>
 800a916:	e9cd 0100 	strd	r0, r1, [sp]
 800a91a:	e7bc      	b.n	800a896 <_dtoa_r+0x56e>
 800a91c:	0800e3b8 	.word	0x0800e3b8
 800a920:	0800e390 	.word	0x0800e390
 800a924:	3ff00000 	.word	0x3ff00000
 800a928:	40240000 	.word	0x40240000
 800a92c:	401c0000 	.word	0x401c0000
 800a930:	40140000 	.word	0x40140000
 800a934:	3fe00000 	.word	0x3fe00000
 800a938:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a93c:	465d      	mov	r5, fp
 800a93e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	f7f5 ff81 	bl	800084c <__aeabi_ddiv>
 800a94a:	f7f6 f905 	bl	8000b58 <__aeabi_d2iz>
 800a94e:	4680      	mov	r8, r0
 800a950:	f7f5 fde8 	bl	8000524 <__aeabi_i2d>
 800a954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a958:	f7f5 fe4e 	bl	80005f8 <__aeabi_dmul>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4630      	mov	r0, r6
 800a962:	4639      	mov	r1, r7
 800a964:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a968:	f7f5 fc8e 	bl	8000288 <__aeabi_dsub>
 800a96c:	f805 6b01 	strb.w	r6, [r5], #1
 800a970:	eba5 060b 	sub.w	r6, r5, fp
 800a974:	45b1      	cmp	r9, r6
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	d139      	bne.n	800a9f0 <_dtoa_r+0x6c8>
 800a97c:	f7f5 fc86 	bl	800028c <__adddf3>
 800a980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	f7f6 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800a98c:	b9c8      	cbnz	r0, 800a9c2 <_dtoa_r+0x69a>
 800a98e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f6 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800a99a:	b110      	cbz	r0, 800a9a2 <_dtoa_r+0x67a>
 800a99c:	f018 0f01 	tst.w	r8, #1
 800a9a0:	d10f      	bne.n	800a9c2 <_dtoa_r+0x69a>
 800a9a2:	9904      	ldr	r1, [sp, #16]
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 ffdd 	bl	800b964 <_Bfree>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9ae:	702b      	strb	r3, [r5, #0]
 800a9b0:	f10a 0301 	add.w	r3, sl, #1
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8241 	beq.w	800ae40 <_dtoa_r+0xb18>
 800a9be:	601d      	str	r5, [r3, #0]
 800a9c0:	e23e      	b.n	800ae40 <_dtoa_r+0xb18>
 800a9c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a9c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9ca:	2a39      	cmp	r2, #57	; 0x39
 800a9cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a9d0:	d108      	bne.n	800a9e4 <_dtoa_r+0x6bc>
 800a9d2:	459b      	cmp	fp, r3
 800a9d4:	d10a      	bne.n	800a9ec <_dtoa_r+0x6c4>
 800a9d6:	9b08      	ldr	r3, [sp, #32]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	9308      	str	r3, [sp, #32]
 800a9dc:	2330      	movs	r3, #48	; 0x30
 800a9de:	f88b 3000 	strb.w	r3, [fp]
 800a9e2:	465b      	mov	r3, fp
 800a9e4:	781a      	ldrb	r2, [r3, #0]
 800a9e6:	3201      	adds	r2, #1
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e78c      	b.n	800a906 <_dtoa_r+0x5de>
 800a9ec:	461d      	mov	r5, r3
 800a9ee:	e7ea      	b.n	800a9c6 <_dtoa_r+0x69e>
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4b9b      	ldr	r3, [pc, #620]	; (800ac60 <_dtoa_r+0x938>)
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	f7f6 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d09a      	beq.n	800a93e <_dtoa_r+0x616>
 800aa08:	e7cb      	b.n	800a9a2 <_dtoa_r+0x67a>
 800aa0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	f000 808b 	beq.w	800ab28 <_dtoa_r+0x800>
 800aa12:	9a06      	ldr	r2, [sp, #24]
 800aa14:	2a01      	cmp	r2, #1
 800aa16:	dc6e      	bgt.n	800aaf6 <_dtoa_r+0x7ce>
 800aa18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d067      	beq.n	800aaee <_dtoa_r+0x7c6>
 800aa1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa22:	9f07      	ldr	r7, [sp, #28]
 800aa24:	9d05      	ldr	r5, [sp, #20]
 800aa26:	9a05      	ldr	r2, [sp, #20]
 800aa28:	2101      	movs	r1, #1
 800aa2a:	441a      	add	r2, r3
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	9205      	str	r2, [sp, #20]
 800aa30:	4498      	add	r8, r3
 800aa32:	f001 f875 	bl	800bb20 <__i2b>
 800aa36:	4606      	mov	r6, r0
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	dd0c      	ble.n	800aa56 <_dtoa_r+0x72e>
 800aa3c:	f1b8 0f00 	cmp.w	r8, #0
 800aa40:	dd09      	ble.n	800aa56 <_dtoa_r+0x72e>
 800aa42:	4545      	cmp	r5, r8
 800aa44:	9a05      	ldr	r2, [sp, #20]
 800aa46:	462b      	mov	r3, r5
 800aa48:	bfa8      	it	ge
 800aa4a:	4643      	movge	r3, r8
 800aa4c:	1ad2      	subs	r2, r2, r3
 800aa4e:	9205      	str	r2, [sp, #20]
 800aa50:	1aed      	subs	r5, r5, r3
 800aa52:	eba8 0803 	sub.w	r8, r8, r3
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	b1eb      	cbz	r3, 800aa96 <_dtoa_r+0x76e>
 800aa5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d067      	beq.n	800ab30 <_dtoa_r+0x808>
 800aa60:	b18f      	cbz	r7, 800aa86 <_dtoa_r+0x75e>
 800aa62:	4631      	mov	r1, r6
 800aa64:	463a      	mov	r2, r7
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 f8fa 	bl	800bc60 <__pow5mult>
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	4601      	mov	r1, r0
 800aa70:	4606      	mov	r6, r0
 800aa72:	4620      	mov	r0, r4
 800aa74:	f001 f85d 	bl	800bb32 <__multiply>
 800aa78:	9904      	ldr	r1, [sp, #16]
 800aa7a:	9008      	str	r0, [sp, #32]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 ff71 	bl	800b964 <_Bfree>
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	1bda      	subs	r2, r3, r7
 800aa8a:	d004      	beq.n	800aa96 <_dtoa_r+0x76e>
 800aa8c:	9904      	ldr	r1, [sp, #16]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f001 f8e6 	bl	800bc60 <__pow5mult>
 800aa94:	9004      	str	r0, [sp, #16]
 800aa96:	2101      	movs	r1, #1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 f841 	bl	800bb20 <__i2b>
 800aa9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 81d0 	beq.w	800ae48 <_dtoa_r+0xb20>
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4601      	mov	r1, r0
 800aaac:	4620      	mov	r0, r4
 800aaae:	f001 f8d7 	bl	800bc60 <__pow5mult>
 800aab2:	9b06      	ldr	r3, [sp, #24]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	4607      	mov	r7, r0
 800aab8:	dc40      	bgt.n	800ab3c <_dtoa_r+0x814>
 800aaba:	9b00      	ldr	r3, [sp, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d139      	bne.n	800ab34 <_dtoa_r+0x80c>
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d136      	bne.n	800ab38 <_dtoa_r+0x810>
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aad0:	0d1b      	lsrs	r3, r3, #20
 800aad2:	051b      	lsls	r3, r3, #20
 800aad4:	b12b      	cbz	r3, 800aae2 <_dtoa_r+0x7ba>
 800aad6:	9b05      	ldr	r3, [sp, #20]
 800aad8:	3301      	adds	r3, #1
 800aada:	9305      	str	r3, [sp, #20]
 800aadc:	f108 0801 	add.w	r8, r8, #1
 800aae0:	2301      	movs	r3, #1
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d12a      	bne.n	800ab40 <_dtoa_r+0x818>
 800aaea:	2001      	movs	r0, #1
 800aaec:	e030      	b.n	800ab50 <_dtoa_r+0x828>
 800aaee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaf4:	e795      	b.n	800aa22 <_dtoa_r+0x6fa>
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800aafc:	42bb      	cmp	r3, r7
 800aafe:	bfbf      	itttt	lt
 800ab00:	9b07      	ldrlt	r3, [sp, #28]
 800ab02:	9707      	strlt	r7, [sp, #28]
 800ab04:	1afa      	sublt	r2, r7, r3
 800ab06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ab08:	bfbb      	ittet	lt
 800ab0a:	189b      	addlt	r3, r3, r2
 800ab0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ab0e:	1bdf      	subge	r7, r3, r7
 800ab10:	2700      	movlt	r7, #0
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	bfb5      	itete	lt
 800ab18:	9b05      	ldrlt	r3, [sp, #20]
 800ab1a:	9d05      	ldrge	r5, [sp, #20]
 800ab1c:	eba3 0509 	sublt.w	r5, r3, r9
 800ab20:	464b      	movge	r3, r9
 800ab22:	bfb8      	it	lt
 800ab24:	2300      	movlt	r3, #0
 800ab26:	e77e      	b.n	800aa26 <_dtoa_r+0x6fe>
 800ab28:	9f07      	ldr	r7, [sp, #28]
 800ab2a:	9d05      	ldr	r5, [sp, #20]
 800ab2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ab2e:	e783      	b.n	800aa38 <_dtoa_r+0x710>
 800ab30:	9a07      	ldr	r2, [sp, #28]
 800ab32:	e7ab      	b.n	800aa8c <_dtoa_r+0x764>
 800ab34:	2300      	movs	r3, #0
 800ab36:	e7d4      	b.n	800aae2 <_dtoa_r+0x7ba>
 800ab38:	9b00      	ldr	r3, [sp, #0]
 800ab3a:	e7d2      	b.n	800aae2 <_dtoa_r+0x7ba>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9307      	str	r3, [sp, #28]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ab46:	6918      	ldr	r0, [r3, #16]
 800ab48:	f000 ff9c 	bl	800ba84 <__hi0bits>
 800ab4c:	f1c0 0020 	rsb	r0, r0, #32
 800ab50:	4440      	add	r0, r8
 800ab52:	f010 001f 	ands.w	r0, r0, #31
 800ab56:	d047      	beq.n	800abe8 <_dtoa_r+0x8c0>
 800ab58:	f1c0 0320 	rsb	r3, r0, #32
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	dd3b      	ble.n	800abd8 <_dtoa_r+0x8b0>
 800ab60:	9b05      	ldr	r3, [sp, #20]
 800ab62:	f1c0 001c 	rsb	r0, r0, #28
 800ab66:	4403      	add	r3, r0
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	4405      	add	r5, r0
 800ab6c:	4480      	add	r8, r0
 800ab6e:	9b05      	ldr	r3, [sp, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dd05      	ble.n	800ab80 <_dtoa_r+0x858>
 800ab74:	461a      	mov	r2, r3
 800ab76:	9904      	ldr	r1, [sp, #16]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f001 f8bf 	bl	800bcfc <__lshift>
 800ab7e:	9004      	str	r0, [sp, #16]
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	dd05      	ble.n	800ab92 <_dtoa_r+0x86a>
 800ab86:	4639      	mov	r1, r7
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f001 f8b6 	bl	800bcfc <__lshift>
 800ab90:	4607      	mov	r7, r0
 800ab92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab94:	b353      	cbz	r3, 800abec <_dtoa_r+0x8c4>
 800ab96:	4639      	mov	r1, r7
 800ab98:	9804      	ldr	r0, [sp, #16]
 800ab9a:	f001 f903 	bl	800bda4 <__mcmp>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	da24      	bge.n	800abec <_dtoa_r+0x8c4>
 800aba2:	2300      	movs	r3, #0
 800aba4:	220a      	movs	r2, #10
 800aba6:	9904      	ldr	r1, [sp, #16]
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 fef2 	bl	800b992 <__multadd>
 800abae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb0:	9004      	str	r0, [sp, #16]
 800abb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 814d 	beq.w	800ae56 <_dtoa_r+0xb2e>
 800abbc:	2300      	movs	r3, #0
 800abbe:	4631      	mov	r1, r6
 800abc0:	220a      	movs	r2, #10
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fee5 	bl	800b992 <__multadd>
 800abc8:	9b02      	ldr	r3, [sp, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	4606      	mov	r6, r0
 800abce:	dc4f      	bgt.n	800ac70 <_dtoa_r+0x948>
 800abd0:	9b06      	ldr	r3, [sp, #24]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	dd4c      	ble.n	800ac70 <_dtoa_r+0x948>
 800abd6:	e011      	b.n	800abfc <_dtoa_r+0x8d4>
 800abd8:	d0c9      	beq.n	800ab6e <_dtoa_r+0x846>
 800abda:	9a05      	ldr	r2, [sp, #20]
 800abdc:	331c      	adds	r3, #28
 800abde:	441a      	add	r2, r3
 800abe0:	9205      	str	r2, [sp, #20]
 800abe2:	441d      	add	r5, r3
 800abe4:	4498      	add	r8, r3
 800abe6:	e7c2      	b.n	800ab6e <_dtoa_r+0x846>
 800abe8:	4603      	mov	r3, r0
 800abea:	e7f6      	b.n	800abda <_dtoa_r+0x8b2>
 800abec:	f1b9 0f00 	cmp.w	r9, #0
 800abf0:	dc38      	bgt.n	800ac64 <_dtoa_r+0x93c>
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	dd35      	ble.n	800ac64 <_dtoa_r+0x93c>
 800abf8:	f8cd 9008 	str.w	r9, [sp, #8]
 800abfc:	9b02      	ldr	r3, [sp, #8]
 800abfe:	b963      	cbnz	r3, 800ac1a <_dtoa_r+0x8f2>
 800ac00:	4639      	mov	r1, r7
 800ac02:	2205      	movs	r2, #5
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fec4 	bl	800b992 <__multadd>
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	9804      	ldr	r0, [sp, #16]
 800ac10:	f001 f8c8 	bl	800bda4 <__mcmp>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f73f adcc 	bgt.w	800a7b2 <_dtoa_r+0x48a>
 800ac1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1c:	465d      	mov	r5, fp
 800ac1e:	ea6f 0a03 	mvn.w	sl, r3
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	4639      	mov	r1, r7
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fe9b 	bl	800b964 <_Bfree>
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	f43f aeb7 	beq.w	800a9a2 <_dtoa_r+0x67a>
 800ac34:	f1b9 0f00 	cmp.w	r9, #0
 800ac38:	d005      	beq.n	800ac46 <_dtoa_r+0x91e>
 800ac3a:	45b1      	cmp	r9, r6
 800ac3c:	d003      	beq.n	800ac46 <_dtoa_r+0x91e>
 800ac3e:	4649      	mov	r1, r9
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fe8f 	bl	800b964 <_Bfree>
 800ac46:	4631      	mov	r1, r6
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fe8b 	bl	800b964 <_Bfree>
 800ac4e:	e6a8      	b.n	800a9a2 <_dtoa_r+0x67a>
 800ac50:	2700      	movs	r7, #0
 800ac52:	463e      	mov	r6, r7
 800ac54:	e7e1      	b.n	800ac1a <_dtoa_r+0x8f2>
 800ac56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ac5a:	463e      	mov	r6, r7
 800ac5c:	e5a9      	b.n	800a7b2 <_dtoa_r+0x48a>
 800ac5e:	bf00      	nop
 800ac60:	40240000 	.word	0x40240000
 800ac64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac66:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 80fa 	beq.w	800ae64 <_dtoa_r+0xb3c>
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	dd05      	ble.n	800ac80 <_dtoa_r+0x958>
 800ac74:	4631      	mov	r1, r6
 800ac76:	462a      	mov	r2, r5
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f001 f83f 	bl	800bcfc <__lshift>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	9b07      	ldr	r3, [sp, #28]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d04c      	beq.n	800ad20 <_dtoa_r+0x9f8>
 800ac86:	6871      	ldr	r1, [r6, #4]
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fe37 	bl	800b8fc <_Balloc>
 800ac8e:	6932      	ldr	r2, [r6, #16]
 800ac90:	3202      	adds	r2, #2
 800ac92:	4605      	mov	r5, r0
 800ac94:	0092      	lsls	r2, r2, #2
 800ac96:	f106 010c 	add.w	r1, r6, #12
 800ac9a:	300c      	adds	r0, #12
 800ac9c:	f7fd fb9c 	bl	80083d8 <memcpy>
 800aca0:	2201      	movs	r2, #1
 800aca2:	4629      	mov	r1, r5
 800aca4:	4620      	mov	r0, r4
 800aca6:	f001 f829 	bl	800bcfc <__lshift>
 800acaa:	9b00      	ldr	r3, [sp, #0]
 800acac:	f8cd b014 	str.w	fp, [sp, #20]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	46b1      	mov	r9, r6
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	4606      	mov	r6, r0
 800acba:	4639      	mov	r1, r7
 800acbc:	9804      	ldr	r0, [sp, #16]
 800acbe:	f7ff faa5 	bl	800a20c <quorem>
 800acc2:	4649      	mov	r1, r9
 800acc4:	4605      	mov	r5, r0
 800acc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acca:	9804      	ldr	r0, [sp, #16]
 800accc:	f001 f86a 	bl	800bda4 <__mcmp>
 800acd0:	4632      	mov	r2, r6
 800acd2:	9000      	str	r0, [sp, #0]
 800acd4:	4639      	mov	r1, r7
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 f87e 	bl	800bdd8 <__mdiff>
 800acdc:	68c3      	ldr	r3, [r0, #12]
 800acde:	4602      	mov	r2, r0
 800ace0:	bb03      	cbnz	r3, 800ad24 <_dtoa_r+0x9fc>
 800ace2:	4601      	mov	r1, r0
 800ace4:	9008      	str	r0, [sp, #32]
 800ace6:	9804      	ldr	r0, [sp, #16]
 800ace8:	f001 f85c 	bl	800bda4 <__mcmp>
 800acec:	9a08      	ldr	r2, [sp, #32]
 800acee:	4603      	mov	r3, r0
 800acf0:	4611      	mov	r1, r2
 800acf2:	4620      	mov	r0, r4
 800acf4:	9308      	str	r3, [sp, #32]
 800acf6:	f000 fe35 	bl	800b964 <_Bfree>
 800acfa:	9b08      	ldr	r3, [sp, #32]
 800acfc:	b9a3      	cbnz	r3, 800ad28 <_dtoa_r+0xa00>
 800acfe:	9a06      	ldr	r2, [sp, #24]
 800ad00:	b992      	cbnz	r2, 800ad28 <_dtoa_r+0xa00>
 800ad02:	9a07      	ldr	r2, [sp, #28]
 800ad04:	b982      	cbnz	r2, 800ad28 <_dtoa_r+0xa00>
 800ad06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad0a:	d029      	beq.n	800ad60 <_dtoa_r+0xa38>
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	dd01      	ble.n	800ad16 <_dtoa_r+0x9ee>
 800ad12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	1c5d      	adds	r5, r3, #1
 800ad1a:	f883 8000 	strb.w	r8, [r3]
 800ad1e:	e782      	b.n	800ac26 <_dtoa_r+0x8fe>
 800ad20:	4630      	mov	r0, r6
 800ad22:	e7c2      	b.n	800acaa <_dtoa_r+0x982>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e7e3      	b.n	800acf0 <_dtoa_r+0x9c8>
 800ad28:	9a00      	ldr	r2, [sp, #0]
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	db04      	blt.n	800ad38 <_dtoa_r+0xa10>
 800ad2e:	d125      	bne.n	800ad7c <_dtoa_r+0xa54>
 800ad30:	9a06      	ldr	r2, [sp, #24]
 800ad32:	bb1a      	cbnz	r2, 800ad7c <_dtoa_r+0xa54>
 800ad34:	9a07      	ldr	r2, [sp, #28]
 800ad36:	bb0a      	cbnz	r2, 800ad7c <_dtoa_r+0xa54>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	ddec      	ble.n	800ad16 <_dtoa_r+0x9ee>
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	9904      	ldr	r1, [sp, #16]
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 ffdb 	bl	800bcfc <__lshift>
 800ad46:	4639      	mov	r1, r7
 800ad48:	9004      	str	r0, [sp, #16]
 800ad4a:	f001 f82b 	bl	800bda4 <__mcmp>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	dc03      	bgt.n	800ad5a <_dtoa_r+0xa32>
 800ad52:	d1e0      	bne.n	800ad16 <_dtoa_r+0x9ee>
 800ad54:	f018 0f01 	tst.w	r8, #1
 800ad58:	d0dd      	beq.n	800ad16 <_dtoa_r+0x9ee>
 800ad5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad5e:	d1d8      	bne.n	800ad12 <_dtoa_r+0x9ea>
 800ad60:	9b05      	ldr	r3, [sp, #20]
 800ad62:	9a05      	ldr	r2, [sp, #20]
 800ad64:	1c5d      	adds	r5, r3, #1
 800ad66:	2339      	movs	r3, #57	; 0x39
 800ad68:	7013      	strb	r3, [r2, #0]
 800ad6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad6e:	2b39      	cmp	r3, #57	; 0x39
 800ad70:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ad74:	d04f      	beq.n	800ae16 <_dtoa_r+0xaee>
 800ad76:	3301      	adds	r3, #1
 800ad78:	7013      	strb	r3, [r2, #0]
 800ad7a:	e754      	b.n	800ac26 <_dtoa_r+0x8fe>
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f102 0501 	add.w	r5, r2, #1
 800ad84:	dd06      	ble.n	800ad94 <_dtoa_r+0xa6c>
 800ad86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad8a:	d0e9      	beq.n	800ad60 <_dtoa_r+0xa38>
 800ad8c:	f108 0801 	add.w	r8, r8, #1
 800ad90:	9b05      	ldr	r3, [sp, #20]
 800ad92:	e7c2      	b.n	800ad1a <_dtoa_r+0x9f2>
 800ad94:	9a02      	ldr	r2, [sp, #8]
 800ad96:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ad9a:	eba5 030b 	sub.w	r3, r5, fp
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d021      	beq.n	800ade6 <_dtoa_r+0xabe>
 800ada2:	2300      	movs	r3, #0
 800ada4:	220a      	movs	r2, #10
 800ada6:	9904      	ldr	r1, [sp, #16]
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 fdf2 	bl	800b992 <__multadd>
 800adae:	45b1      	cmp	r9, r6
 800adb0:	9004      	str	r0, [sp, #16]
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	f04f 020a 	mov.w	r2, #10
 800adba:	4649      	mov	r1, r9
 800adbc:	4620      	mov	r0, r4
 800adbe:	d105      	bne.n	800adcc <_dtoa_r+0xaa4>
 800adc0:	f000 fde7 	bl	800b992 <__multadd>
 800adc4:	4681      	mov	r9, r0
 800adc6:	4606      	mov	r6, r0
 800adc8:	9505      	str	r5, [sp, #20]
 800adca:	e776      	b.n	800acba <_dtoa_r+0x992>
 800adcc:	f000 fde1 	bl	800b992 <__multadd>
 800add0:	4631      	mov	r1, r6
 800add2:	4681      	mov	r9, r0
 800add4:	2300      	movs	r3, #0
 800add6:	220a      	movs	r2, #10
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fdda 	bl	800b992 <__multadd>
 800adde:	4606      	mov	r6, r0
 800ade0:	e7f2      	b.n	800adc8 <_dtoa_r+0xaa0>
 800ade2:	f04f 0900 	mov.w	r9, #0
 800ade6:	2201      	movs	r2, #1
 800ade8:	9904      	ldr	r1, [sp, #16]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 ff86 	bl	800bcfc <__lshift>
 800adf0:	4639      	mov	r1, r7
 800adf2:	9004      	str	r0, [sp, #16]
 800adf4:	f000 ffd6 	bl	800bda4 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dcb6      	bgt.n	800ad6a <_dtoa_r+0xa42>
 800adfc:	d102      	bne.n	800ae04 <_dtoa_r+0xadc>
 800adfe:	f018 0f01 	tst.w	r8, #1
 800ae02:	d1b2      	bne.n	800ad6a <_dtoa_r+0xa42>
 800ae04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae08:	2b30      	cmp	r3, #48	; 0x30
 800ae0a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ae0e:	f47f af0a 	bne.w	800ac26 <_dtoa_r+0x8fe>
 800ae12:	4615      	mov	r5, r2
 800ae14:	e7f6      	b.n	800ae04 <_dtoa_r+0xadc>
 800ae16:	4593      	cmp	fp, r2
 800ae18:	d105      	bne.n	800ae26 <_dtoa_r+0xafe>
 800ae1a:	2331      	movs	r3, #49	; 0x31
 800ae1c:	f10a 0a01 	add.w	sl, sl, #1
 800ae20:	f88b 3000 	strb.w	r3, [fp]
 800ae24:	e6ff      	b.n	800ac26 <_dtoa_r+0x8fe>
 800ae26:	4615      	mov	r5, r2
 800ae28:	e79f      	b.n	800ad6a <_dtoa_r+0xa42>
 800ae2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ae90 <_dtoa_r+0xb68>
 800ae2e:	e007      	b.n	800ae40 <_dtoa_r+0xb18>
 800ae30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae32:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ae94 <_dtoa_r+0xb6c>
 800ae36:	b11b      	cbz	r3, 800ae40 <_dtoa_r+0xb18>
 800ae38:	f10b 0308 	add.w	r3, fp, #8
 800ae3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	4658      	mov	r0, fp
 800ae42:	b017      	add	sp, #92	; 0x5c
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	9b06      	ldr	r3, [sp, #24]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	f77f ae35 	ble.w	800aaba <_dtoa_r+0x792>
 800ae50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae52:	9307      	str	r3, [sp, #28]
 800ae54:	e649      	b.n	800aaea <_dtoa_r+0x7c2>
 800ae56:	9b02      	ldr	r3, [sp, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dc03      	bgt.n	800ae64 <_dtoa_r+0xb3c>
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	f73f aecc 	bgt.w	800abfc <_dtoa_r+0x8d4>
 800ae64:	465d      	mov	r5, fp
 800ae66:	4639      	mov	r1, r7
 800ae68:	9804      	ldr	r0, [sp, #16]
 800ae6a:	f7ff f9cf 	bl	800a20c <quorem>
 800ae6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae72:	f805 8b01 	strb.w	r8, [r5], #1
 800ae76:	9a02      	ldr	r2, [sp, #8]
 800ae78:	eba5 030b 	sub.w	r3, r5, fp
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	ddb0      	ble.n	800ade2 <_dtoa_r+0xaba>
 800ae80:	2300      	movs	r3, #0
 800ae82:	220a      	movs	r2, #10
 800ae84:	9904      	ldr	r1, [sp, #16]
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 fd83 	bl	800b992 <__multadd>
 800ae8c:	9004      	str	r0, [sp, #16]
 800ae8e:	e7ea      	b.n	800ae66 <_dtoa_r+0xb3e>
 800ae90:	0800e294 	.word	0x0800e294
 800ae94:	0800e310 	.word	0x0800e310

0800ae98 <__sflush_r>:
 800ae98:	898a      	ldrh	r2, [r1, #12]
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	4605      	mov	r5, r0
 800aea0:	0710      	lsls	r0, r2, #28
 800aea2:	460c      	mov	r4, r1
 800aea4:	d458      	bmi.n	800af58 <__sflush_r+0xc0>
 800aea6:	684b      	ldr	r3, [r1, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc05      	bgt.n	800aeb8 <__sflush_r+0x20>
 800aeac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dc02      	bgt.n	800aeb8 <__sflush_r+0x20>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeba:	2e00      	cmp	r6, #0
 800aebc:	d0f9      	beq.n	800aeb2 <__sflush_r+0x1a>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aec4:	682f      	ldr	r7, [r5, #0]
 800aec6:	6a21      	ldr	r1, [r4, #32]
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	d032      	beq.n	800af32 <__sflush_r+0x9a>
 800aecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	075a      	lsls	r2, r3, #29
 800aed2:	d505      	bpl.n	800aee0 <__sflush_r+0x48>
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	1ac0      	subs	r0, r0, r3
 800aed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeda:	b10b      	cbz	r3, 800aee0 <__sflush_r+0x48>
 800aedc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aede:	1ac0      	subs	r0, r0, r3
 800aee0:	2300      	movs	r3, #0
 800aee2:	4602      	mov	r2, r0
 800aee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aee6:	6a21      	ldr	r1, [r4, #32]
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b0      	blx	r6
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	d106      	bne.n	800af00 <__sflush_r+0x68>
 800aef2:	6829      	ldr	r1, [r5, #0]
 800aef4:	291d      	cmp	r1, #29
 800aef6:	d848      	bhi.n	800af8a <__sflush_r+0xf2>
 800aef8:	4a29      	ldr	r2, [pc, #164]	; (800afa0 <__sflush_r+0x108>)
 800aefa:	40ca      	lsrs	r2, r1
 800aefc:	07d6      	lsls	r6, r2, #31
 800aefe:	d544      	bpl.n	800af8a <__sflush_r+0xf2>
 800af00:	2200      	movs	r2, #0
 800af02:	6062      	str	r2, [r4, #4]
 800af04:	04d9      	lsls	r1, r3, #19
 800af06:	6922      	ldr	r2, [r4, #16]
 800af08:	6022      	str	r2, [r4, #0]
 800af0a:	d504      	bpl.n	800af16 <__sflush_r+0x7e>
 800af0c:	1c42      	adds	r2, r0, #1
 800af0e:	d101      	bne.n	800af14 <__sflush_r+0x7c>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b903      	cbnz	r3, 800af16 <__sflush_r+0x7e>
 800af14:	6560      	str	r0, [r4, #84]	; 0x54
 800af16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af18:	602f      	str	r7, [r5, #0]
 800af1a:	2900      	cmp	r1, #0
 800af1c:	d0c9      	beq.n	800aeb2 <__sflush_r+0x1a>
 800af1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af22:	4299      	cmp	r1, r3
 800af24:	d002      	beq.n	800af2c <__sflush_r+0x94>
 800af26:	4628      	mov	r0, r5
 800af28:	f001 f8f6 	bl	800c118 <_free_r>
 800af2c:	2000      	movs	r0, #0
 800af2e:	6360      	str	r0, [r4, #52]	; 0x34
 800af30:	e7c0      	b.n	800aeb4 <__sflush_r+0x1c>
 800af32:	2301      	movs	r3, #1
 800af34:	4628      	mov	r0, r5
 800af36:	47b0      	blx	r6
 800af38:	1c41      	adds	r1, r0, #1
 800af3a:	d1c8      	bne.n	800aece <__sflush_r+0x36>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0c5      	beq.n	800aece <__sflush_r+0x36>
 800af42:	2b1d      	cmp	r3, #29
 800af44:	d001      	beq.n	800af4a <__sflush_r+0xb2>
 800af46:	2b16      	cmp	r3, #22
 800af48:	d101      	bne.n	800af4e <__sflush_r+0xb6>
 800af4a:	602f      	str	r7, [r5, #0]
 800af4c:	e7b1      	b.n	800aeb2 <__sflush_r+0x1a>
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	e7ad      	b.n	800aeb4 <__sflush_r+0x1c>
 800af58:	690f      	ldr	r7, [r1, #16]
 800af5a:	2f00      	cmp	r7, #0
 800af5c:	d0a9      	beq.n	800aeb2 <__sflush_r+0x1a>
 800af5e:	0793      	lsls	r3, r2, #30
 800af60:	680e      	ldr	r6, [r1, #0]
 800af62:	bf08      	it	eq
 800af64:	694b      	ldreq	r3, [r1, #20]
 800af66:	600f      	str	r7, [r1, #0]
 800af68:	bf18      	it	ne
 800af6a:	2300      	movne	r3, #0
 800af6c:	eba6 0807 	sub.w	r8, r6, r7
 800af70:	608b      	str	r3, [r1, #8]
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	dd9c      	ble.n	800aeb2 <__sflush_r+0x1a>
 800af78:	4643      	mov	r3, r8
 800af7a:	463a      	mov	r2, r7
 800af7c:	6a21      	ldr	r1, [r4, #32]
 800af7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	2800      	cmp	r0, #0
 800af86:	dc06      	bgt.n	800af96 <__sflush_r+0xfe>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af94:	e78e      	b.n	800aeb4 <__sflush_r+0x1c>
 800af96:	4407      	add	r7, r0
 800af98:	eba8 0800 	sub.w	r8, r8, r0
 800af9c:	e7e9      	b.n	800af72 <__sflush_r+0xda>
 800af9e:	bf00      	nop
 800afa0:	20400001 	.word	0x20400001

0800afa4 <_fflush_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	690b      	ldr	r3, [r1, #16]
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b1db      	cbz	r3, 800afe6 <_fflush_r+0x42>
 800afae:	b118      	cbz	r0, 800afb8 <_fflush_r+0x14>
 800afb0:	6983      	ldr	r3, [r0, #24]
 800afb2:	b90b      	cbnz	r3, 800afb8 <_fflush_r+0x14>
 800afb4:	f000 f860 	bl	800b078 <__sinit>
 800afb8:	4b0c      	ldr	r3, [pc, #48]	; (800afec <_fflush_r+0x48>)
 800afba:	429c      	cmp	r4, r3
 800afbc:	d109      	bne.n	800afd2 <_fflush_r+0x2e>
 800afbe:	686c      	ldr	r4, [r5, #4]
 800afc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc4:	b17b      	cbz	r3, 800afe6 <_fflush_r+0x42>
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afce:	f7ff bf63 	b.w	800ae98 <__sflush_r>
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <_fflush_r+0x4c>)
 800afd4:	429c      	cmp	r4, r3
 800afd6:	d101      	bne.n	800afdc <_fflush_r+0x38>
 800afd8:	68ac      	ldr	r4, [r5, #8]
 800afda:	e7f1      	b.n	800afc0 <_fflush_r+0x1c>
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <_fflush_r+0x50>)
 800afde:	429c      	cmp	r4, r3
 800afe0:	bf08      	it	eq
 800afe2:	68ec      	ldreq	r4, [r5, #12]
 800afe4:	e7ec      	b.n	800afc0 <_fflush_r+0x1c>
 800afe6:	2000      	movs	r0, #0
 800afe8:	bd38      	pop	{r3, r4, r5, pc}
 800afea:	bf00      	nop
 800afec:	0800e340 	.word	0x0800e340
 800aff0:	0800e360 	.word	0x0800e360
 800aff4:	0800e320 	.word	0x0800e320

0800aff8 <std>:
 800aff8:	2300      	movs	r3, #0
 800affa:	b510      	push	{r4, lr}
 800affc:	4604      	mov	r4, r0
 800affe:	e9c0 3300 	strd	r3, r3, [r0]
 800b002:	6083      	str	r3, [r0, #8]
 800b004:	8181      	strh	r1, [r0, #12]
 800b006:	6643      	str	r3, [r0, #100]	; 0x64
 800b008:	81c2      	strh	r2, [r0, #14]
 800b00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b00e:	6183      	str	r3, [r0, #24]
 800b010:	4619      	mov	r1, r3
 800b012:	2208      	movs	r2, #8
 800b014:	305c      	adds	r0, #92	; 0x5c
 800b016:	f7fd f9ea 	bl	80083ee <memset>
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <std+0x38>)
 800b01c:	6263      	str	r3, [r4, #36]	; 0x24
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <std+0x3c>)
 800b020:	62a3      	str	r3, [r4, #40]	; 0x28
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <std+0x40>)
 800b024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <std+0x44>)
 800b028:	6224      	str	r4, [r4, #32]
 800b02a:	6323      	str	r3, [r4, #48]	; 0x30
 800b02c:	bd10      	pop	{r4, pc}
 800b02e:	bf00      	nop
 800b030:	0800c7ad 	.word	0x0800c7ad
 800b034:	0800c7cf 	.word	0x0800c7cf
 800b038:	0800c807 	.word	0x0800c807
 800b03c:	0800c82b 	.word	0x0800c82b

0800b040 <_cleanup_r>:
 800b040:	4901      	ldr	r1, [pc, #4]	; (800b048 <_cleanup_r+0x8>)
 800b042:	f000 b885 	b.w	800b150 <_fwalk_reent>
 800b046:	bf00      	nop
 800b048:	0800afa5 	.word	0x0800afa5

0800b04c <__sfmoreglue>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	1e4a      	subs	r2, r1, #1
 800b050:	2568      	movs	r5, #104	; 0x68
 800b052:	4355      	muls	r5, r2
 800b054:	460e      	mov	r6, r1
 800b056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b05a:	f001 f8ab 	bl	800c1b4 <_malloc_r>
 800b05e:	4604      	mov	r4, r0
 800b060:	b140      	cbz	r0, 800b074 <__sfmoreglue+0x28>
 800b062:	2100      	movs	r1, #0
 800b064:	e9c0 1600 	strd	r1, r6, [r0]
 800b068:	300c      	adds	r0, #12
 800b06a:	60a0      	str	r0, [r4, #8]
 800b06c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b070:	f7fd f9bd 	bl	80083ee <memset>
 800b074:	4620      	mov	r0, r4
 800b076:	bd70      	pop	{r4, r5, r6, pc}

0800b078 <__sinit>:
 800b078:	6983      	ldr	r3, [r0, #24]
 800b07a:	b510      	push	{r4, lr}
 800b07c:	4604      	mov	r4, r0
 800b07e:	bb33      	cbnz	r3, 800b0ce <__sinit+0x56>
 800b080:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b084:	6503      	str	r3, [r0, #80]	; 0x50
 800b086:	4b12      	ldr	r3, [pc, #72]	; (800b0d0 <__sinit+0x58>)
 800b088:	4a12      	ldr	r2, [pc, #72]	; (800b0d4 <__sinit+0x5c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6282      	str	r2, [r0, #40]	; 0x28
 800b08e:	4298      	cmp	r0, r3
 800b090:	bf04      	itt	eq
 800b092:	2301      	moveq	r3, #1
 800b094:	6183      	streq	r3, [r0, #24]
 800b096:	f000 f81f 	bl	800b0d8 <__sfp>
 800b09a:	6060      	str	r0, [r4, #4]
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 f81b 	bl	800b0d8 <__sfp>
 800b0a2:	60a0      	str	r0, [r4, #8]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 f817 	bl	800b0d8 <__sfp>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	60e0      	str	r0, [r4, #12]
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	6860      	ldr	r0, [r4, #4]
 800b0b2:	f7ff ffa1 	bl	800aff8 <std>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	2109      	movs	r1, #9
 800b0ba:	68a0      	ldr	r0, [r4, #8]
 800b0bc:	f7ff ff9c 	bl	800aff8 <std>
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	2112      	movs	r1, #18
 800b0c4:	68e0      	ldr	r0, [r4, #12]
 800b0c6:	f7ff ff97 	bl	800aff8 <std>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	61a3      	str	r3, [r4, #24]
 800b0ce:	bd10      	pop	{r4, pc}
 800b0d0:	0800e280 	.word	0x0800e280
 800b0d4:	0800b041 	.word	0x0800b041

0800b0d8 <__sfp>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <__sfp+0x70>)
 800b0dc:	681e      	ldr	r6, [r3, #0]
 800b0de:	69b3      	ldr	r3, [r6, #24]
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	b913      	cbnz	r3, 800b0ea <__sfp+0x12>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ffc7 	bl	800b078 <__sinit>
 800b0ea:	3648      	adds	r6, #72	; 0x48
 800b0ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	d503      	bpl.n	800b0fc <__sfp+0x24>
 800b0f4:	6833      	ldr	r3, [r6, #0]
 800b0f6:	b133      	cbz	r3, 800b106 <__sfp+0x2e>
 800b0f8:	6836      	ldr	r6, [r6, #0]
 800b0fa:	e7f7      	b.n	800b0ec <__sfp+0x14>
 800b0fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b100:	b16d      	cbz	r5, 800b11e <__sfp+0x46>
 800b102:	3468      	adds	r4, #104	; 0x68
 800b104:	e7f4      	b.n	800b0f0 <__sfp+0x18>
 800b106:	2104      	movs	r1, #4
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff ff9f 	bl	800b04c <__sfmoreglue>
 800b10e:	6030      	str	r0, [r6, #0]
 800b110:	2800      	cmp	r0, #0
 800b112:	d1f1      	bne.n	800b0f8 <__sfp+0x20>
 800b114:	230c      	movs	r3, #12
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	4604      	mov	r4, r0
 800b11a:	4620      	mov	r0, r4
 800b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b11e:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <__sfp+0x74>)
 800b120:	6665      	str	r5, [r4, #100]	; 0x64
 800b122:	e9c4 5500 	strd	r5, r5, [r4]
 800b126:	60a5      	str	r5, [r4, #8]
 800b128:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b12c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b130:	2208      	movs	r2, #8
 800b132:	4629      	mov	r1, r5
 800b134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b138:	f7fd f959 	bl	80083ee <memset>
 800b13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b144:	e7e9      	b.n	800b11a <__sfp+0x42>
 800b146:	bf00      	nop
 800b148:	0800e280 	.word	0x0800e280
 800b14c:	ffff0001 	.word	0xffff0001

0800b150 <_fwalk_reent>:
 800b150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b15c:	2600      	movs	r6, #0
 800b15e:	b914      	cbnz	r4, 800b166 <_fwalk_reent+0x16>
 800b160:	4630      	mov	r0, r6
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b16a:	3f01      	subs	r7, #1
 800b16c:	d501      	bpl.n	800b172 <_fwalk_reent+0x22>
 800b16e:	6824      	ldr	r4, [r4, #0]
 800b170:	e7f5      	b.n	800b15e <_fwalk_reent+0xe>
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d907      	bls.n	800b188 <_fwalk_reent+0x38>
 800b178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b17c:	3301      	adds	r3, #1
 800b17e:	d003      	beq.n	800b188 <_fwalk_reent+0x38>
 800b180:	4629      	mov	r1, r5
 800b182:	4640      	mov	r0, r8
 800b184:	47c8      	blx	r9
 800b186:	4306      	orrs	r6, r0
 800b188:	3568      	adds	r5, #104	; 0x68
 800b18a:	e7ee      	b.n	800b16a <_fwalk_reent+0x1a>

0800b18c <rshift>:
 800b18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18e:	6906      	ldr	r6, [r0, #16]
 800b190:	114b      	asrs	r3, r1, #5
 800b192:	429e      	cmp	r6, r3
 800b194:	f100 0414 	add.w	r4, r0, #20
 800b198:	dd30      	ble.n	800b1fc <rshift+0x70>
 800b19a:	f011 011f 	ands.w	r1, r1, #31
 800b19e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b1a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b1a6:	d108      	bne.n	800b1ba <rshift+0x2e>
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	42b2      	cmp	r2, r6
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	d211      	bcs.n	800b1d4 <rshift+0x48>
 800b1b0:	f852 3b04 	ldr.w	r3, [r2], #4
 800b1b4:	f841 3b04 	str.w	r3, [r1], #4
 800b1b8:	e7f7      	b.n	800b1aa <rshift+0x1e>
 800b1ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b1be:	f1c1 0c20 	rsb	ip, r1, #32
 800b1c2:	40cd      	lsrs	r5, r1
 800b1c4:	3204      	adds	r2, #4
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	42b2      	cmp	r2, r6
 800b1ca:	4617      	mov	r7, r2
 800b1cc:	d30c      	bcc.n	800b1e8 <rshift+0x5c>
 800b1ce:	601d      	str	r5, [r3, #0]
 800b1d0:	b105      	cbz	r5, 800b1d4 <rshift+0x48>
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	1b1a      	subs	r2, r3, r4
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1dc:	bf08      	it	eq
 800b1de:	2300      	moveq	r3, #0
 800b1e0:	6102      	str	r2, [r0, #16]
 800b1e2:	bf08      	it	eq
 800b1e4:	6143      	streq	r3, [r0, #20]
 800b1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e8:	683f      	ldr	r7, [r7, #0]
 800b1ea:	fa07 f70c 	lsl.w	r7, r7, ip
 800b1ee:	433d      	orrs	r5, r7
 800b1f0:	f843 5b04 	str.w	r5, [r3], #4
 800b1f4:	f852 5b04 	ldr.w	r5, [r2], #4
 800b1f8:	40cd      	lsrs	r5, r1
 800b1fa:	e7e5      	b.n	800b1c8 <rshift+0x3c>
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	e7e9      	b.n	800b1d4 <rshift+0x48>

0800b200 <__hexdig_fun>:
 800b200:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b204:	2b09      	cmp	r3, #9
 800b206:	d802      	bhi.n	800b20e <__hexdig_fun+0xe>
 800b208:	3820      	subs	r0, #32
 800b20a:	b2c0      	uxtb	r0, r0
 800b20c:	4770      	bx	lr
 800b20e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b212:	2b05      	cmp	r3, #5
 800b214:	d801      	bhi.n	800b21a <__hexdig_fun+0x1a>
 800b216:	3847      	subs	r0, #71	; 0x47
 800b218:	e7f7      	b.n	800b20a <__hexdig_fun+0xa>
 800b21a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b21e:	2b05      	cmp	r3, #5
 800b220:	d801      	bhi.n	800b226 <__hexdig_fun+0x26>
 800b222:	3827      	subs	r0, #39	; 0x27
 800b224:	e7f1      	b.n	800b20a <__hexdig_fun+0xa>
 800b226:	2000      	movs	r0, #0
 800b228:	4770      	bx	lr

0800b22a <__gethex>:
 800b22a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22e:	b08b      	sub	sp, #44	; 0x2c
 800b230:	468a      	mov	sl, r1
 800b232:	9002      	str	r0, [sp, #8]
 800b234:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b236:	9306      	str	r3, [sp, #24]
 800b238:	4690      	mov	r8, r2
 800b23a:	f000 fad0 	bl	800b7de <__localeconv_l>
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	4618      	mov	r0, r3
 800b244:	f7f4 ffc4 	bl	80001d0 <strlen>
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	9001      	str	r0, [sp, #4]
 800b24c:	4403      	add	r3, r0
 800b24e:	f04f 0b00 	mov.w	fp, #0
 800b252:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b256:	9307      	str	r3, [sp, #28]
 800b258:	f8da 3000 	ldr.w	r3, [sl]
 800b25c:	3302      	adds	r3, #2
 800b25e:	461f      	mov	r7, r3
 800b260:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b264:	2830      	cmp	r0, #48	; 0x30
 800b266:	d06c      	beq.n	800b342 <__gethex+0x118>
 800b268:	f7ff ffca 	bl	800b200 <__hexdig_fun>
 800b26c:	4604      	mov	r4, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	d16a      	bne.n	800b348 <__gethex+0x11e>
 800b272:	9a01      	ldr	r2, [sp, #4]
 800b274:	9903      	ldr	r1, [sp, #12]
 800b276:	4638      	mov	r0, r7
 800b278:	f001 fadb 	bl	800c832 <strncmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d166      	bne.n	800b34e <__gethex+0x124>
 800b280:	9b01      	ldr	r3, [sp, #4]
 800b282:	5cf8      	ldrb	r0, [r7, r3]
 800b284:	18fe      	adds	r6, r7, r3
 800b286:	f7ff ffbb 	bl	800b200 <__hexdig_fun>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d062      	beq.n	800b354 <__gethex+0x12a>
 800b28e:	4633      	mov	r3, r6
 800b290:	7818      	ldrb	r0, [r3, #0]
 800b292:	2830      	cmp	r0, #48	; 0x30
 800b294:	461f      	mov	r7, r3
 800b296:	f103 0301 	add.w	r3, r3, #1
 800b29a:	d0f9      	beq.n	800b290 <__gethex+0x66>
 800b29c:	f7ff ffb0 	bl	800b200 <__hexdig_fun>
 800b2a0:	fab0 f580 	clz	r5, r0
 800b2a4:	096d      	lsrs	r5, r5, #5
 800b2a6:	4634      	mov	r4, r6
 800b2a8:	f04f 0b01 	mov.w	fp, #1
 800b2ac:	463a      	mov	r2, r7
 800b2ae:	4616      	mov	r6, r2
 800b2b0:	3201      	adds	r2, #1
 800b2b2:	7830      	ldrb	r0, [r6, #0]
 800b2b4:	f7ff ffa4 	bl	800b200 <__hexdig_fun>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1f8      	bne.n	800b2ae <__gethex+0x84>
 800b2bc:	9a01      	ldr	r2, [sp, #4]
 800b2be:	9903      	ldr	r1, [sp, #12]
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f001 fab6 	bl	800c832 <strncmp>
 800b2c6:	b950      	cbnz	r0, 800b2de <__gethex+0xb4>
 800b2c8:	b954      	cbnz	r4, 800b2e0 <__gethex+0xb6>
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	18f4      	adds	r4, r6, r3
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	3201      	adds	r2, #1
 800b2d4:	7830      	ldrb	r0, [r6, #0]
 800b2d6:	f7ff ff93 	bl	800b200 <__hexdig_fun>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d1f8      	bne.n	800b2d0 <__gethex+0xa6>
 800b2de:	b10c      	cbz	r4, 800b2e4 <__gethex+0xba>
 800b2e0:	1ba4      	subs	r4, r4, r6
 800b2e2:	00a4      	lsls	r4, r4, #2
 800b2e4:	7833      	ldrb	r3, [r6, #0]
 800b2e6:	2b50      	cmp	r3, #80	; 0x50
 800b2e8:	d001      	beq.n	800b2ee <__gethex+0xc4>
 800b2ea:	2b70      	cmp	r3, #112	; 0x70
 800b2ec:	d140      	bne.n	800b370 <__gethex+0x146>
 800b2ee:	7873      	ldrb	r3, [r6, #1]
 800b2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2f2:	d031      	beq.n	800b358 <__gethex+0x12e>
 800b2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f6:	d033      	beq.n	800b360 <__gethex+0x136>
 800b2f8:	1c71      	adds	r1, r6, #1
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	7808      	ldrb	r0, [r1, #0]
 800b300:	f7ff ff7e 	bl	800b200 <__hexdig_fun>
 800b304:	1e43      	subs	r3, r0, #1
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b18      	cmp	r3, #24
 800b30a:	d831      	bhi.n	800b370 <__gethex+0x146>
 800b30c:	f1a0 0210 	sub.w	r2, r0, #16
 800b310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b314:	f7ff ff74 	bl	800b200 <__hexdig_fun>
 800b318:	1e43      	subs	r3, r0, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b18      	cmp	r3, #24
 800b31e:	d922      	bls.n	800b366 <__gethex+0x13c>
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	d000      	beq.n	800b328 <__gethex+0xfe>
 800b326:	4252      	negs	r2, r2
 800b328:	4414      	add	r4, r2
 800b32a:	f8ca 1000 	str.w	r1, [sl]
 800b32e:	b30d      	cbz	r5, 800b374 <__gethex+0x14a>
 800b330:	f1bb 0f00 	cmp.w	fp, #0
 800b334:	bf0c      	ite	eq
 800b336:	2706      	moveq	r7, #6
 800b338:	2700      	movne	r7, #0
 800b33a:	4638      	mov	r0, r7
 800b33c:	b00b      	add	sp, #44	; 0x2c
 800b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b342:	f10b 0b01 	add.w	fp, fp, #1
 800b346:	e78a      	b.n	800b25e <__gethex+0x34>
 800b348:	2500      	movs	r5, #0
 800b34a:	462c      	mov	r4, r5
 800b34c:	e7ae      	b.n	800b2ac <__gethex+0x82>
 800b34e:	463e      	mov	r6, r7
 800b350:	2501      	movs	r5, #1
 800b352:	e7c7      	b.n	800b2e4 <__gethex+0xba>
 800b354:	4604      	mov	r4, r0
 800b356:	e7fb      	b.n	800b350 <__gethex+0x126>
 800b358:	f04f 0900 	mov.w	r9, #0
 800b35c:	1cb1      	adds	r1, r6, #2
 800b35e:	e7ce      	b.n	800b2fe <__gethex+0xd4>
 800b360:	f04f 0901 	mov.w	r9, #1
 800b364:	e7fa      	b.n	800b35c <__gethex+0x132>
 800b366:	230a      	movs	r3, #10
 800b368:	fb03 0202 	mla	r2, r3, r2, r0
 800b36c:	3a10      	subs	r2, #16
 800b36e:	e7cf      	b.n	800b310 <__gethex+0xe6>
 800b370:	4631      	mov	r1, r6
 800b372:	e7da      	b.n	800b32a <__gethex+0x100>
 800b374:	1bf3      	subs	r3, r6, r7
 800b376:	3b01      	subs	r3, #1
 800b378:	4629      	mov	r1, r5
 800b37a:	2b07      	cmp	r3, #7
 800b37c:	dc49      	bgt.n	800b412 <__gethex+0x1e8>
 800b37e:	9802      	ldr	r0, [sp, #8]
 800b380:	f000 fabc 	bl	800b8fc <_Balloc>
 800b384:	9b01      	ldr	r3, [sp, #4]
 800b386:	f100 0914 	add.w	r9, r0, #20
 800b38a:	f04f 0b00 	mov.w	fp, #0
 800b38e:	f1c3 0301 	rsb	r3, r3, #1
 800b392:	4605      	mov	r5, r0
 800b394:	f8cd 9010 	str.w	r9, [sp, #16]
 800b398:	46da      	mov	sl, fp
 800b39a:	9308      	str	r3, [sp, #32]
 800b39c:	42b7      	cmp	r7, r6
 800b39e:	d33b      	bcc.n	800b418 <__gethex+0x1ee>
 800b3a0:	9804      	ldr	r0, [sp, #16]
 800b3a2:	f840 ab04 	str.w	sl, [r0], #4
 800b3a6:	eba0 0009 	sub.w	r0, r0, r9
 800b3aa:	1080      	asrs	r0, r0, #2
 800b3ac:	6128      	str	r0, [r5, #16]
 800b3ae:	0147      	lsls	r7, r0, #5
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	f000 fb67 	bl	800ba84 <__hi0bits>
 800b3b6:	f8d8 6000 	ldr.w	r6, [r8]
 800b3ba:	1a3f      	subs	r7, r7, r0
 800b3bc:	42b7      	cmp	r7, r6
 800b3be:	dd64      	ble.n	800b48a <__gethex+0x260>
 800b3c0:	1bbf      	subs	r7, r7, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f000 fe77 	bl	800c0b8 <__any_on>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	b178      	cbz	r0, 800b3ee <__gethex+0x1c4>
 800b3ce:	1e7b      	subs	r3, r7, #1
 800b3d0:	1159      	asrs	r1, r3, #5
 800b3d2:	f003 021f 	and.w	r2, r3, #31
 800b3d6:	f04f 0a01 	mov.w	sl, #1
 800b3da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3de:	fa0a f202 	lsl.w	r2, sl, r2
 800b3e2:	420a      	tst	r2, r1
 800b3e4:	d003      	beq.n	800b3ee <__gethex+0x1c4>
 800b3e6:	4553      	cmp	r3, sl
 800b3e8:	dc46      	bgt.n	800b478 <__gethex+0x24e>
 800b3ea:	f04f 0a02 	mov.w	sl, #2
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7ff fecb 	bl	800b18c <rshift>
 800b3f6:	443c      	add	r4, r7
 800b3f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	da52      	bge.n	800b4a6 <__gethex+0x27c>
 800b400:	4629      	mov	r1, r5
 800b402:	9802      	ldr	r0, [sp, #8]
 800b404:	f000 faae 	bl	800b964 <_Bfree>
 800b408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b40a:	2300      	movs	r3, #0
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	27a3      	movs	r7, #163	; 0xa3
 800b410:	e793      	b.n	800b33a <__gethex+0x110>
 800b412:	3101      	adds	r1, #1
 800b414:	105b      	asrs	r3, r3, #1
 800b416:	e7b0      	b.n	800b37a <__gethex+0x150>
 800b418:	1e73      	subs	r3, r6, #1
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	9a07      	ldr	r2, [sp, #28]
 800b41e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b422:	4293      	cmp	r3, r2
 800b424:	d018      	beq.n	800b458 <__gethex+0x22e>
 800b426:	f1bb 0f20 	cmp.w	fp, #32
 800b42a:	d107      	bne.n	800b43c <__gethex+0x212>
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	f8c3 a000 	str.w	sl, [r3]
 800b432:	3304      	adds	r3, #4
 800b434:	f04f 0a00 	mov.w	sl, #0
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	46d3      	mov	fp, sl
 800b43c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b440:	f7ff fede 	bl	800b200 <__hexdig_fun>
 800b444:	f000 000f 	and.w	r0, r0, #15
 800b448:	fa00 f00b 	lsl.w	r0, r0, fp
 800b44c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b450:	f10b 0b04 	add.w	fp, fp, #4
 800b454:	9b05      	ldr	r3, [sp, #20]
 800b456:	e00d      	b.n	800b474 <__gethex+0x24a>
 800b458:	9b05      	ldr	r3, [sp, #20]
 800b45a:	9a08      	ldr	r2, [sp, #32]
 800b45c:	4413      	add	r3, r2
 800b45e:	42bb      	cmp	r3, r7
 800b460:	d3e1      	bcc.n	800b426 <__gethex+0x1fc>
 800b462:	4618      	mov	r0, r3
 800b464:	9a01      	ldr	r2, [sp, #4]
 800b466:	9903      	ldr	r1, [sp, #12]
 800b468:	9309      	str	r3, [sp, #36]	; 0x24
 800b46a:	f001 f9e2 	bl	800c832 <strncmp>
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	2800      	cmp	r0, #0
 800b472:	d1d8      	bne.n	800b426 <__gethex+0x1fc>
 800b474:	461e      	mov	r6, r3
 800b476:	e791      	b.n	800b39c <__gethex+0x172>
 800b478:	1eb9      	subs	r1, r7, #2
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 fe1c 	bl	800c0b8 <__any_on>
 800b480:	2800      	cmp	r0, #0
 800b482:	d0b2      	beq.n	800b3ea <__gethex+0x1c0>
 800b484:	f04f 0a03 	mov.w	sl, #3
 800b488:	e7b1      	b.n	800b3ee <__gethex+0x1c4>
 800b48a:	da09      	bge.n	800b4a0 <__gethex+0x276>
 800b48c:	1bf7      	subs	r7, r6, r7
 800b48e:	4629      	mov	r1, r5
 800b490:	463a      	mov	r2, r7
 800b492:	9802      	ldr	r0, [sp, #8]
 800b494:	f000 fc32 	bl	800bcfc <__lshift>
 800b498:	1be4      	subs	r4, r4, r7
 800b49a:	4605      	mov	r5, r0
 800b49c:	f100 0914 	add.w	r9, r0, #20
 800b4a0:	f04f 0a00 	mov.w	sl, #0
 800b4a4:	e7a8      	b.n	800b3f8 <__gethex+0x1ce>
 800b4a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4aa:	42a0      	cmp	r0, r4
 800b4ac:	dd6a      	ble.n	800b584 <__gethex+0x35a>
 800b4ae:	1b04      	subs	r4, r0, r4
 800b4b0:	42a6      	cmp	r6, r4
 800b4b2:	dc2e      	bgt.n	800b512 <__gethex+0x2e8>
 800b4b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d022      	beq.n	800b502 <__gethex+0x2d8>
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d024      	beq.n	800b50a <__gethex+0x2e0>
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d115      	bne.n	800b4f0 <__gethex+0x2c6>
 800b4c4:	42a6      	cmp	r6, r4
 800b4c6:	d113      	bne.n	800b4f0 <__gethex+0x2c6>
 800b4c8:	2e01      	cmp	r6, #1
 800b4ca:	dc0b      	bgt.n	800b4e4 <__gethex+0x2ba>
 800b4cc:	9a06      	ldr	r2, [sp, #24]
 800b4ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	612b      	str	r3, [r5, #16]
 800b4d8:	f8c9 3000 	str.w	r3, [r9]
 800b4dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4de:	2762      	movs	r7, #98	; 0x62
 800b4e0:	601d      	str	r5, [r3, #0]
 800b4e2:	e72a      	b.n	800b33a <__gethex+0x110>
 800b4e4:	1e71      	subs	r1, r6, #1
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 fde6 	bl	800c0b8 <__any_on>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d1ed      	bne.n	800b4cc <__gethex+0x2a2>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	9802      	ldr	r0, [sp, #8]
 800b4f4:	f000 fa36 	bl	800b964 <_Bfree>
 800b4f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6013      	str	r3, [r2, #0]
 800b4fe:	2750      	movs	r7, #80	; 0x50
 800b500:	e71b      	b.n	800b33a <__gethex+0x110>
 800b502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b504:	2b00      	cmp	r3, #0
 800b506:	d0e1      	beq.n	800b4cc <__gethex+0x2a2>
 800b508:	e7f2      	b.n	800b4f0 <__gethex+0x2c6>
 800b50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1dd      	bne.n	800b4cc <__gethex+0x2a2>
 800b510:	e7ee      	b.n	800b4f0 <__gethex+0x2c6>
 800b512:	1e67      	subs	r7, r4, #1
 800b514:	f1ba 0f00 	cmp.w	sl, #0
 800b518:	d131      	bne.n	800b57e <__gethex+0x354>
 800b51a:	b127      	cbz	r7, 800b526 <__gethex+0x2fc>
 800b51c:	4639      	mov	r1, r7
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 fdca 	bl	800c0b8 <__any_on>
 800b524:	4682      	mov	sl, r0
 800b526:	117a      	asrs	r2, r7, #5
 800b528:	2301      	movs	r3, #1
 800b52a:	f007 071f 	and.w	r7, r7, #31
 800b52e:	fa03 f707 	lsl.w	r7, r3, r7
 800b532:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b536:	4621      	mov	r1, r4
 800b538:	421f      	tst	r7, r3
 800b53a:	4628      	mov	r0, r5
 800b53c:	bf18      	it	ne
 800b53e:	f04a 0a02 	orrne.w	sl, sl, #2
 800b542:	1b36      	subs	r6, r6, r4
 800b544:	f7ff fe22 	bl	800b18c <rshift>
 800b548:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b54c:	2702      	movs	r7, #2
 800b54e:	f1ba 0f00 	cmp.w	sl, #0
 800b552:	d048      	beq.n	800b5e6 <__gethex+0x3bc>
 800b554:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d015      	beq.n	800b588 <__gethex+0x35e>
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d017      	beq.n	800b590 <__gethex+0x366>
 800b560:	2b01      	cmp	r3, #1
 800b562:	d109      	bne.n	800b578 <__gethex+0x34e>
 800b564:	f01a 0f02 	tst.w	sl, #2
 800b568:	d006      	beq.n	800b578 <__gethex+0x34e>
 800b56a:	f8d9 3000 	ldr.w	r3, [r9]
 800b56e:	ea4a 0a03 	orr.w	sl, sl, r3
 800b572:	f01a 0f01 	tst.w	sl, #1
 800b576:	d10e      	bne.n	800b596 <__gethex+0x36c>
 800b578:	f047 0710 	orr.w	r7, r7, #16
 800b57c:	e033      	b.n	800b5e6 <__gethex+0x3bc>
 800b57e:	f04f 0a01 	mov.w	sl, #1
 800b582:	e7d0      	b.n	800b526 <__gethex+0x2fc>
 800b584:	2701      	movs	r7, #1
 800b586:	e7e2      	b.n	800b54e <__gethex+0x324>
 800b588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b58a:	f1c3 0301 	rsb	r3, r3, #1
 800b58e:	9315      	str	r3, [sp, #84]	; 0x54
 800b590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0f0      	beq.n	800b578 <__gethex+0x34e>
 800b596:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b59a:	f105 0314 	add.w	r3, r5, #20
 800b59e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b5a2:	eb03 010a 	add.w	r1, r3, sl
 800b5a6:	f04f 0c00 	mov.w	ip, #0
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b5b4:	d01c      	beq.n	800b5f0 <__gethex+0x3c6>
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	6002      	str	r2, [r0, #0]
 800b5ba:	2f02      	cmp	r7, #2
 800b5bc:	f105 0314 	add.w	r3, r5, #20
 800b5c0:	d138      	bne.n	800b634 <__gethex+0x40a>
 800b5c2:	f8d8 2000 	ldr.w	r2, [r8]
 800b5c6:	3a01      	subs	r2, #1
 800b5c8:	42b2      	cmp	r2, r6
 800b5ca:	d10a      	bne.n	800b5e2 <__gethex+0x3b8>
 800b5cc:	1171      	asrs	r1, r6, #5
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f006 061f 	and.w	r6, r6, #31
 800b5d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5d8:	fa02 f606 	lsl.w	r6, r2, r6
 800b5dc:	421e      	tst	r6, r3
 800b5de:	bf18      	it	ne
 800b5e0:	4617      	movne	r7, r2
 800b5e2:	f047 0720 	orr.w	r7, r7, #32
 800b5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5e8:	601d      	str	r5, [r3, #0]
 800b5ea:	9b06      	ldr	r3, [sp, #24]
 800b5ec:	601c      	str	r4, [r3, #0]
 800b5ee:	e6a4      	b.n	800b33a <__gethex+0x110>
 800b5f0:	4299      	cmp	r1, r3
 800b5f2:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5f6:	d8d8      	bhi.n	800b5aa <__gethex+0x380>
 800b5f8:	68ab      	ldr	r3, [r5, #8]
 800b5fa:	4599      	cmp	r9, r3
 800b5fc:	db12      	blt.n	800b624 <__gethex+0x3fa>
 800b5fe:	6869      	ldr	r1, [r5, #4]
 800b600:	9802      	ldr	r0, [sp, #8]
 800b602:	3101      	adds	r1, #1
 800b604:	f000 f97a 	bl	800b8fc <_Balloc>
 800b608:	692a      	ldr	r2, [r5, #16]
 800b60a:	3202      	adds	r2, #2
 800b60c:	f105 010c 	add.w	r1, r5, #12
 800b610:	4683      	mov	fp, r0
 800b612:	0092      	lsls	r2, r2, #2
 800b614:	300c      	adds	r0, #12
 800b616:	f7fc fedf 	bl	80083d8 <memcpy>
 800b61a:	4629      	mov	r1, r5
 800b61c:	9802      	ldr	r0, [sp, #8]
 800b61e:	f000 f9a1 	bl	800b964 <_Bfree>
 800b622:	465d      	mov	r5, fp
 800b624:	692b      	ldr	r3, [r5, #16]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b62c:	612a      	str	r2, [r5, #16]
 800b62e:	2201      	movs	r2, #1
 800b630:	615a      	str	r2, [r3, #20]
 800b632:	e7c2      	b.n	800b5ba <__gethex+0x390>
 800b634:	692a      	ldr	r2, [r5, #16]
 800b636:	454a      	cmp	r2, r9
 800b638:	dd0b      	ble.n	800b652 <__gethex+0x428>
 800b63a:	2101      	movs	r1, #1
 800b63c:	4628      	mov	r0, r5
 800b63e:	f7ff fda5 	bl	800b18c <rshift>
 800b642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b646:	3401      	adds	r4, #1
 800b648:	42a3      	cmp	r3, r4
 800b64a:	f6ff aed9 	blt.w	800b400 <__gethex+0x1d6>
 800b64e:	2701      	movs	r7, #1
 800b650:	e7c7      	b.n	800b5e2 <__gethex+0x3b8>
 800b652:	f016 061f 	ands.w	r6, r6, #31
 800b656:	d0fa      	beq.n	800b64e <__gethex+0x424>
 800b658:	449a      	add	sl, r3
 800b65a:	f1c6 0620 	rsb	r6, r6, #32
 800b65e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b662:	f000 fa0f 	bl	800ba84 <__hi0bits>
 800b666:	42b0      	cmp	r0, r6
 800b668:	dbe7      	blt.n	800b63a <__gethex+0x410>
 800b66a:	e7f0      	b.n	800b64e <__gethex+0x424>

0800b66c <L_shift>:
 800b66c:	f1c2 0208 	rsb	r2, r2, #8
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	b570      	push	{r4, r5, r6, lr}
 800b674:	f1c2 0620 	rsb	r6, r2, #32
 800b678:	6843      	ldr	r3, [r0, #4]
 800b67a:	6804      	ldr	r4, [r0, #0]
 800b67c:	fa03 f506 	lsl.w	r5, r3, r6
 800b680:	432c      	orrs	r4, r5
 800b682:	40d3      	lsrs	r3, r2
 800b684:	6004      	str	r4, [r0, #0]
 800b686:	f840 3f04 	str.w	r3, [r0, #4]!
 800b68a:	4288      	cmp	r0, r1
 800b68c:	d3f4      	bcc.n	800b678 <L_shift+0xc>
 800b68e:	bd70      	pop	{r4, r5, r6, pc}

0800b690 <__match>:
 800b690:	b530      	push	{r4, r5, lr}
 800b692:	6803      	ldr	r3, [r0, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b69a:	b914      	cbnz	r4, 800b6a2 <__match+0x12>
 800b69c:	6003      	str	r3, [r0, #0]
 800b69e:	2001      	movs	r0, #1
 800b6a0:	bd30      	pop	{r4, r5, pc}
 800b6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6aa:	2d19      	cmp	r5, #25
 800b6ac:	bf98      	it	ls
 800b6ae:	3220      	addls	r2, #32
 800b6b0:	42a2      	cmp	r2, r4
 800b6b2:	d0f0      	beq.n	800b696 <__match+0x6>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	e7f3      	b.n	800b6a0 <__match+0x10>

0800b6b8 <__hexnan>:
 800b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	680b      	ldr	r3, [r1, #0]
 800b6be:	6801      	ldr	r1, [r0, #0]
 800b6c0:	115f      	asrs	r7, r3, #5
 800b6c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b6c6:	f013 031f 	ands.w	r3, r3, #31
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	bf18      	it	ne
 800b6ce:	3704      	addne	r7, #4
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	1f3e      	subs	r6, r7, #4
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	4690      	mov	r8, r2
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	f847 5c04 	str.w	r5, [r7, #-4]
 800b6de:	46b1      	mov	r9, r6
 800b6e0:	4634      	mov	r4, r6
 800b6e2:	9502      	str	r5, [sp, #8]
 800b6e4:	46ab      	mov	fp, r5
 800b6e6:	784a      	ldrb	r2, [r1, #1]
 800b6e8:	1c4b      	adds	r3, r1, #1
 800b6ea:	9303      	str	r3, [sp, #12]
 800b6ec:	b342      	cbz	r2, 800b740 <__hexnan+0x88>
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	9105      	str	r1, [sp, #20]
 800b6f2:	9204      	str	r2, [sp, #16]
 800b6f4:	f7ff fd84 	bl	800b200 <__hexdig_fun>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d143      	bne.n	800b784 <__hexnan+0xcc>
 800b6fc:	9a04      	ldr	r2, [sp, #16]
 800b6fe:	9905      	ldr	r1, [sp, #20]
 800b700:	2a20      	cmp	r2, #32
 800b702:	d818      	bhi.n	800b736 <__hexnan+0x7e>
 800b704:	9b02      	ldr	r3, [sp, #8]
 800b706:	459b      	cmp	fp, r3
 800b708:	dd13      	ble.n	800b732 <__hexnan+0x7a>
 800b70a:	454c      	cmp	r4, r9
 800b70c:	d206      	bcs.n	800b71c <__hexnan+0x64>
 800b70e:	2d07      	cmp	r5, #7
 800b710:	dc04      	bgt.n	800b71c <__hexnan+0x64>
 800b712:	462a      	mov	r2, r5
 800b714:	4649      	mov	r1, r9
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff ffa8 	bl	800b66c <L_shift>
 800b71c:	4544      	cmp	r4, r8
 800b71e:	d944      	bls.n	800b7aa <__hexnan+0xf2>
 800b720:	2300      	movs	r3, #0
 800b722:	f1a4 0904 	sub.w	r9, r4, #4
 800b726:	f844 3c04 	str.w	r3, [r4, #-4]
 800b72a:	f8cd b008 	str.w	fp, [sp, #8]
 800b72e:	464c      	mov	r4, r9
 800b730:	461d      	mov	r5, r3
 800b732:	9903      	ldr	r1, [sp, #12]
 800b734:	e7d7      	b.n	800b6e6 <__hexnan+0x2e>
 800b736:	2a29      	cmp	r2, #41	; 0x29
 800b738:	d14a      	bne.n	800b7d0 <__hexnan+0x118>
 800b73a:	3102      	adds	r1, #2
 800b73c:	f8ca 1000 	str.w	r1, [sl]
 800b740:	f1bb 0f00 	cmp.w	fp, #0
 800b744:	d044      	beq.n	800b7d0 <__hexnan+0x118>
 800b746:	454c      	cmp	r4, r9
 800b748:	d206      	bcs.n	800b758 <__hexnan+0xa0>
 800b74a:	2d07      	cmp	r5, #7
 800b74c:	dc04      	bgt.n	800b758 <__hexnan+0xa0>
 800b74e:	462a      	mov	r2, r5
 800b750:	4649      	mov	r1, r9
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff ff8a 	bl	800b66c <L_shift>
 800b758:	4544      	cmp	r4, r8
 800b75a:	d928      	bls.n	800b7ae <__hexnan+0xf6>
 800b75c:	4643      	mov	r3, r8
 800b75e:	f854 2b04 	ldr.w	r2, [r4], #4
 800b762:	f843 2b04 	str.w	r2, [r3], #4
 800b766:	42a6      	cmp	r6, r4
 800b768:	d2f9      	bcs.n	800b75e <__hexnan+0xa6>
 800b76a:	2200      	movs	r2, #0
 800b76c:	f843 2b04 	str.w	r2, [r3], #4
 800b770:	429e      	cmp	r6, r3
 800b772:	d2fb      	bcs.n	800b76c <__hexnan+0xb4>
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	b91b      	cbnz	r3, 800b780 <__hexnan+0xc8>
 800b778:	4546      	cmp	r6, r8
 800b77a:	d127      	bne.n	800b7cc <__hexnan+0x114>
 800b77c:	2301      	movs	r3, #1
 800b77e:	6033      	str	r3, [r6, #0]
 800b780:	2005      	movs	r0, #5
 800b782:	e026      	b.n	800b7d2 <__hexnan+0x11a>
 800b784:	3501      	adds	r5, #1
 800b786:	2d08      	cmp	r5, #8
 800b788:	f10b 0b01 	add.w	fp, fp, #1
 800b78c:	dd06      	ble.n	800b79c <__hexnan+0xe4>
 800b78e:	4544      	cmp	r4, r8
 800b790:	d9cf      	bls.n	800b732 <__hexnan+0x7a>
 800b792:	2300      	movs	r3, #0
 800b794:	f844 3c04 	str.w	r3, [r4, #-4]
 800b798:	2501      	movs	r5, #1
 800b79a:	3c04      	subs	r4, #4
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	f000 000f 	and.w	r0, r0, #15
 800b7a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7a6:	6020      	str	r0, [r4, #0]
 800b7a8:	e7c3      	b.n	800b732 <__hexnan+0x7a>
 800b7aa:	2508      	movs	r5, #8
 800b7ac:	e7c1      	b.n	800b732 <__hexnan+0x7a>
 800b7ae:	9b01      	ldr	r3, [sp, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d0df      	beq.n	800b774 <__hexnan+0xbc>
 800b7b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7b8:	f1c3 0320 	rsb	r3, r3, #32
 800b7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b7c4:	401a      	ands	r2, r3
 800b7c6:	f847 2c04 	str.w	r2, [r7, #-4]
 800b7ca:	e7d3      	b.n	800b774 <__hexnan+0xbc>
 800b7cc:	3e04      	subs	r6, #4
 800b7ce:	e7d1      	b.n	800b774 <__hexnan+0xbc>
 800b7d0:	2004      	movs	r0, #4
 800b7d2:	b007      	add	sp, #28
 800b7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7d8 <__locale_ctype_ptr_l>:
 800b7d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b7dc:	4770      	bx	lr

0800b7de <__localeconv_l>:
 800b7de:	30f0      	adds	r0, #240	; 0xf0
 800b7e0:	4770      	bx	lr
	...

0800b7e4 <_localeconv_r>:
 800b7e4:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <_localeconv_r+0x14>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6a18      	ldr	r0, [r3, #32]
 800b7ea:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <_localeconv_r+0x18>)
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	bf08      	it	eq
 800b7f0:	4618      	moveq	r0, r3
 800b7f2:	30f0      	adds	r0, #240	; 0xf0
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	20000024 	.word	0x20000024
 800b7fc:	20000088 	.word	0x20000088

0800b800 <__swhatbuf_r>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	460e      	mov	r6, r1
 800b804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b808:	2900      	cmp	r1, #0
 800b80a:	b096      	sub	sp, #88	; 0x58
 800b80c:	4614      	mov	r4, r2
 800b80e:	461d      	mov	r5, r3
 800b810:	da07      	bge.n	800b822 <__swhatbuf_r+0x22>
 800b812:	2300      	movs	r3, #0
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	89b3      	ldrh	r3, [r6, #12]
 800b818:	061a      	lsls	r2, r3, #24
 800b81a:	d410      	bmi.n	800b83e <__swhatbuf_r+0x3e>
 800b81c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b820:	e00e      	b.n	800b840 <__swhatbuf_r+0x40>
 800b822:	466a      	mov	r2, sp
 800b824:	f001 f846 	bl	800c8b4 <_fstat_r>
 800b828:	2800      	cmp	r0, #0
 800b82a:	dbf2      	blt.n	800b812 <__swhatbuf_r+0x12>
 800b82c:	9a01      	ldr	r2, [sp, #4]
 800b82e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b836:	425a      	negs	r2, r3
 800b838:	415a      	adcs	r2, r3
 800b83a:	602a      	str	r2, [r5, #0]
 800b83c:	e7ee      	b.n	800b81c <__swhatbuf_r+0x1c>
 800b83e:	2340      	movs	r3, #64	; 0x40
 800b840:	2000      	movs	r0, #0
 800b842:	6023      	str	r3, [r4, #0]
 800b844:	b016      	add	sp, #88	; 0x58
 800b846:	bd70      	pop	{r4, r5, r6, pc}

0800b848 <__smakebuf_r>:
 800b848:	898b      	ldrh	r3, [r1, #12]
 800b84a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b84c:	079d      	lsls	r5, r3, #30
 800b84e:	4606      	mov	r6, r0
 800b850:	460c      	mov	r4, r1
 800b852:	d507      	bpl.n	800b864 <__smakebuf_r+0x1c>
 800b854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	6123      	str	r3, [r4, #16]
 800b85c:	2301      	movs	r3, #1
 800b85e:	6163      	str	r3, [r4, #20]
 800b860:	b002      	add	sp, #8
 800b862:	bd70      	pop	{r4, r5, r6, pc}
 800b864:	ab01      	add	r3, sp, #4
 800b866:	466a      	mov	r2, sp
 800b868:	f7ff ffca 	bl	800b800 <__swhatbuf_r>
 800b86c:	9900      	ldr	r1, [sp, #0]
 800b86e:	4605      	mov	r5, r0
 800b870:	4630      	mov	r0, r6
 800b872:	f000 fc9f 	bl	800c1b4 <_malloc_r>
 800b876:	b948      	cbnz	r0, 800b88c <__smakebuf_r+0x44>
 800b878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87c:	059a      	lsls	r2, r3, #22
 800b87e:	d4ef      	bmi.n	800b860 <__smakebuf_r+0x18>
 800b880:	f023 0303 	bic.w	r3, r3, #3
 800b884:	f043 0302 	orr.w	r3, r3, #2
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	e7e3      	b.n	800b854 <__smakebuf_r+0xc>
 800b88c:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <__smakebuf_r+0x7c>)
 800b88e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	6020      	str	r0, [r4, #0]
 800b894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	9b00      	ldr	r3, [sp, #0]
 800b89c:	6163      	str	r3, [r4, #20]
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	6120      	str	r0, [r4, #16]
 800b8a2:	b15b      	cbz	r3, 800b8bc <__smakebuf_r+0x74>
 800b8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f001 f815 	bl	800c8d8 <_isatty_r>
 800b8ae:	b128      	cbz	r0, 800b8bc <__smakebuf_r+0x74>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f023 0303 	bic.w	r3, r3, #3
 800b8b6:	f043 0301 	orr.w	r3, r3, #1
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	431d      	orrs	r5, r3
 800b8c0:	81a5      	strh	r5, [r4, #12]
 800b8c2:	e7cd      	b.n	800b860 <__smakebuf_r+0x18>
 800b8c4:	0800b041 	.word	0x0800b041

0800b8c8 <malloc>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <malloc+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f000 bc71 	b.w	800c1b4 <_malloc_r>
 800b8d2:	bf00      	nop
 800b8d4:	20000024 	.word	0x20000024

0800b8d8 <__ascii_mbtowc>:
 800b8d8:	b082      	sub	sp, #8
 800b8da:	b901      	cbnz	r1, 800b8de <__ascii_mbtowc+0x6>
 800b8dc:	a901      	add	r1, sp, #4
 800b8de:	b142      	cbz	r2, 800b8f2 <__ascii_mbtowc+0x1a>
 800b8e0:	b14b      	cbz	r3, 800b8f6 <__ascii_mbtowc+0x1e>
 800b8e2:	7813      	ldrb	r3, [r2, #0]
 800b8e4:	600b      	str	r3, [r1, #0]
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	1c10      	adds	r0, r2, #0
 800b8ea:	bf18      	it	ne
 800b8ec:	2001      	movne	r0, #1
 800b8ee:	b002      	add	sp, #8
 800b8f0:	4770      	bx	lr
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	e7fb      	b.n	800b8ee <__ascii_mbtowc+0x16>
 800b8f6:	f06f 0001 	mvn.w	r0, #1
 800b8fa:	e7f8      	b.n	800b8ee <__ascii_mbtowc+0x16>

0800b8fc <_Balloc>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b900:	4604      	mov	r4, r0
 800b902:	460e      	mov	r6, r1
 800b904:	b93d      	cbnz	r5, 800b916 <_Balloc+0x1a>
 800b906:	2010      	movs	r0, #16
 800b908:	f7ff ffde 	bl	800b8c8 <malloc>
 800b90c:	6260      	str	r0, [r4, #36]	; 0x24
 800b90e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b912:	6005      	str	r5, [r0, #0]
 800b914:	60c5      	str	r5, [r0, #12]
 800b916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b918:	68eb      	ldr	r3, [r5, #12]
 800b91a:	b183      	cbz	r3, 800b93e <_Balloc+0x42>
 800b91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b924:	b9b8      	cbnz	r0, 800b956 <_Balloc+0x5a>
 800b926:	2101      	movs	r1, #1
 800b928:	fa01 f506 	lsl.w	r5, r1, r6
 800b92c:	1d6a      	adds	r2, r5, #5
 800b92e:	0092      	lsls	r2, r2, #2
 800b930:	4620      	mov	r0, r4
 800b932:	f000 fbe2 	bl	800c0fa <_calloc_r>
 800b936:	b160      	cbz	r0, 800b952 <_Balloc+0x56>
 800b938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b93c:	e00e      	b.n	800b95c <_Balloc+0x60>
 800b93e:	2221      	movs	r2, #33	; 0x21
 800b940:	2104      	movs	r1, #4
 800b942:	4620      	mov	r0, r4
 800b944:	f000 fbd9 	bl	800c0fa <_calloc_r>
 800b948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b94a:	60e8      	str	r0, [r5, #12]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e4      	bne.n	800b91c <_Balloc+0x20>
 800b952:	2000      	movs	r0, #0
 800b954:	bd70      	pop	{r4, r5, r6, pc}
 800b956:	6802      	ldr	r2, [r0, #0]
 800b958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b95c:	2300      	movs	r3, #0
 800b95e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b962:	e7f7      	b.n	800b954 <_Balloc+0x58>

0800b964 <_Bfree>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b968:	4606      	mov	r6, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	b93c      	cbnz	r4, 800b97e <_Bfree+0x1a>
 800b96e:	2010      	movs	r0, #16
 800b970:	f7ff ffaa 	bl	800b8c8 <malloc>
 800b974:	6270      	str	r0, [r6, #36]	; 0x24
 800b976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b97a:	6004      	str	r4, [r0, #0]
 800b97c:	60c4      	str	r4, [r0, #12]
 800b97e:	b13d      	cbz	r5, 800b990 <_Bfree+0x2c>
 800b980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b982:	686a      	ldr	r2, [r5, #4]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b98a:	6029      	str	r1, [r5, #0]
 800b98c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b990:	bd70      	pop	{r4, r5, r6, pc}

0800b992 <__multadd>:
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	690d      	ldr	r5, [r1, #16]
 800b998:	461f      	mov	r7, r3
 800b99a:	4606      	mov	r6, r0
 800b99c:	460c      	mov	r4, r1
 800b99e:	f101 0c14 	add.w	ip, r1, #20
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f8dc 0000 	ldr.w	r0, [ip]
 800b9a8:	b281      	uxth	r1, r0
 800b9aa:	fb02 7101 	mla	r1, r2, r1, r7
 800b9ae:	0c0f      	lsrs	r7, r1, #16
 800b9b0:	0c00      	lsrs	r0, r0, #16
 800b9b2:	fb02 7000 	mla	r0, r2, r0, r7
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b9be:	429d      	cmp	r5, r3
 800b9c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b9c4:	f84c 1b04 	str.w	r1, [ip], #4
 800b9c8:	dcec      	bgt.n	800b9a4 <__multadd+0x12>
 800b9ca:	b1d7      	cbz	r7, 800ba02 <__multadd+0x70>
 800b9cc:	68a3      	ldr	r3, [r4, #8]
 800b9ce:	42ab      	cmp	r3, r5
 800b9d0:	dc12      	bgt.n	800b9f8 <__multadd+0x66>
 800b9d2:	6861      	ldr	r1, [r4, #4]
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	3101      	adds	r1, #1
 800b9d8:	f7ff ff90 	bl	800b8fc <_Balloc>
 800b9dc:	6922      	ldr	r2, [r4, #16]
 800b9de:	3202      	adds	r2, #2
 800b9e0:	f104 010c 	add.w	r1, r4, #12
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	300c      	adds	r0, #12
 800b9ea:	f7fc fcf5 	bl	80083d8 <memcpy>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7ff ffb7 	bl	800b964 <_Bfree>
 800b9f6:	4644      	mov	r4, r8
 800b9f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	615f      	str	r7, [r3, #20]
 800ba00:	6125      	str	r5, [r4, #16]
 800ba02:	4620      	mov	r0, r4
 800ba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba08 <__s2b>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	4615      	mov	r5, r2
 800ba10:	461f      	mov	r7, r3
 800ba12:	2209      	movs	r2, #9
 800ba14:	3308      	adds	r3, #8
 800ba16:	4606      	mov	r6, r0
 800ba18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	2201      	movs	r2, #1
 800ba20:	429a      	cmp	r2, r3
 800ba22:	db20      	blt.n	800ba66 <__s2b+0x5e>
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff ff69 	bl	800b8fc <_Balloc>
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	6143      	str	r3, [r0, #20]
 800ba2e:	2d09      	cmp	r5, #9
 800ba30:	f04f 0301 	mov.w	r3, #1
 800ba34:	6103      	str	r3, [r0, #16]
 800ba36:	dd19      	ble.n	800ba6c <__s2b+0x64>
 800ba38:	f104 0809 	add.w	r8, r4, #9
 800ba3c:	46c1      	mov	r9, r8
 800ba3e:	442c      	add	r4, r5
 800ba40:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ba44:	4601      	mov	r1, r0
 800ba46:	3b30      	subs	r3, #48	; 0x30
 800ba48:	220a      	movs	r2, #10
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffa1 	bl	800b992 <__multadd>
 800ba50:	45a1      	cmp	r9, r4
 800ba52:	d1f5      	bne.n	800ba40 <__s2b+0x38>
 800ba54:	eb08 0405 	add.w	r4, r8, r5
 800ba58:	3c08      	subs	r4, #8
 800ba5a:	1b2d      	subs	r5, r5, r4
 800ba5c:	1963      	adds	r3, r4, r5
 800ba5e:	42bb      	cmp	r3, r7
 800ba60:	db07      	blt.n	800ba72 <__s2b+0x6a>
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	0052      	lsls	r2, r2, #1
 800ba68:	3101      	adds	r1, #1
 800ba6a:	e7d9      	b.n	800ba20 <__s2b+0x18>
 800ba6c:	340a      	adds	r4, #10
 800ba6e:	2509      	movs	r5, #9
 800ba70:	e7f3      	b.n	800ba5a <__s2b+0x52>
 800ba72:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba76:	4601      	mov	r1, r0
 800ba78:	3b30      	subs	r3, #48	; 0x30
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7ff ff88 	bl	800b992 <__multadd>
 800ba82:	e7eb      	b.n	800ba5c <__s2b+0x54>

0800ba84 <__hi0bits>:
 800ba84:	0c02      	lsrs	r2, r0, #16
 800ba86:	0412      	lsls	r2, r2, #16
 800ba88:	4603      	mov	r3, r0
 800ba8a:	b9b2      	cbnz	r2, 800baba <__hi0bits+0x36>
 800ba8c:	0403      	lsls	r3, r0, #16
 800ba8e:	2010      	movs	r0, #16
 800ba90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba94:	bf04      	itt	eq
 800ba96:	021b      	lsleq	r3, r3, #8
 800ba98:	3008      	addeq	r0, #8
 800ba9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba9e:	bf04      	itt	eq
 800baa0:	011b      	lsleq	r3, r3, #4
 800baa2:	3004      	addeq	r0, #4
 800baa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800baa8:	bf04      	itt	eq
 800baaa:	009b      	lsleq	r3, r3, #2
 800baac:	3002      	addeq	r0, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	db06      	blt.n	800bac0 <__hi0bits+0x3c>
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	d503      	bpl.n	800babe <__hi0bits+0x3a>
 800bab6:	3001      	adds	r0, #1
 800bab8:	4770      	bx	lr
 800baba:	2000      	movs	r0, #0
 800babc:	e7e8      	b.n	800ba90 <__hi0bits+0xc>
 800babe:	2020      	movs	r0, #32
 800bac0:	4770      	bx	lr

0800bac2 <__lo0bits>:
 800bac2:	6803      	ldr	r3, [r0, #0]
 800bac4:	f013 0207 	ands.w	r2, r3, #7
 800bac8:	4601      	mov	r1, r0
 800baca:	d00b      	beq.n	800bae4 <__lo0bits+0x22>
 800bacc:	07da      	lsls	r2, r3, #31
 800bace:	d423      	bmi.n	800bb18 <__lo0bits+0x56>
 800bad0:	0798      	lsls	r0, r3, #30
 800bad2:	bf49      	itett	mi
 800bad4:	085b      	lsrmi	r3, r3, #1
 800bad6:	089b      	lsrpl	r3, r3, #2
 800bad8:	2001      	movmi	r0, #1
 800bada:	600b      	strmi	r3, [r1, #0]
 800badc:	bf5c      	itt	pl
 800bade:	600b      	strpl	r3, [r1, #0]
 800bae0:	2002      	movpl	r0, #2
 800bae2:	4770      	bx	lr
 800bae4:	b298      	uxth	r0, r3
 800bae6:	b9a8      	cbnz	r0, 800bb14 <__lo0bits+0x52>
 800bae8:	0c1b      	lsrs	r3, r3, #16
 800baea:	2010      	movs	r0, #16
 800baec:	f013 0fff 	tst.w	r3, #255	; 0xff
 800baf0:	bf04      	itt	eq
 800baf2:	0a1b      	lsreq	r3, r3, #8
 800baf4:	3008      	addeq	r0, #8
 800baf6:	071a      	lsls	r2, r3, #28
 800baf8:	bf04      	itt	eq
 800bafa:	091b      	lsreq	r3, r3, #4
 800bafc:	3004      	addeq	r0, #4
 800bafe:	079a      	lsls	r2, r3, #30
 800bb00:	bf04      	itt	eq
 800bb02:	089b      	lsreq	r3, r3, #2
 800bb04:	3002      	addeq	r0, #2
 800bb06:	07da      	lsls	r2, r3, #31
 800bb08:	d402      	bmi.n	800bb10 <__lo0bits+0x4e>
 800bb0a:	085b      	lsrs	r3, r3, #1
 800bb0c:	d006      	beq.n	800bb1c <__lo0bits+0x5a>
 800bb0e:	3001      	adds	r0, #1
 800bb10:	600b      	str	r3, [r1, #0]
 800bb12:	4770      	bx	lr
 800bb14:	4610      	mov	r0, r2
 800bb16:	e7e9      	b.n	800baec <__lo0bits+0x2a>
 800bb18:	2000      	movs	r0, #0
 800bb1a:	4770      	bx	lr
 800bb1c:	2020      	movs	r0, #32
 800bb1e:	4770      	bx	lr

0800bb20 <__i2b>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	2101      	movs	r1, #1
 800bb26:	f7ff fee9 	bl	800b8fc <_Balloc>
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	6144      	str	r4, [r0, #20]
 800bb2e:	6102      	str	r2, [r0, #16]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__multiply>:
 800bb32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb36:	4614      	mov	r4, r2
 800bb38:	690a      	ldr	r2, [r1, #16]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	bfb8      	it	lt
 800bb40:	460b      	movlt	r3, r1
 800bb42:	4688      	mov	r8, r1
 800bb44:	bfbc      	itt	lt
 800bb46:	46a0      	movlt	r8, r4
 800bb48:	461c      	movlt	r4, r3
 800bb4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb5a:	eb07 0609 	add.w	r6, r7, r9
 800bb5e:	42b3      	cmp	r3, r6
 800bb60:	bfb8      	it	lt
 800bb62:	3101      	addlt	r1, #1
 800bb64:	f7ff feca 	bl	800b8fc <_Balloc>
 800bb68:	f100 0514 	add.w	r5, r0, #20
 800bb6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bb70:	462b      	mov	r3, r5
 800bb72:	2200      	movs	r2, #0
 800bb74:	4573      	cmp	r3, lr
 800bb76:	d316      	bcc.n	800bba6 <__multiply+0x74>
 800bb78:	f104 0214 	add.w	r2, r4, #20
 800bb7c:	f108 0114 	add.w	r1, r8, #20
 800bb80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bb84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	9b00      	ldr	r3, [sp, #0]
 800bb8c:	9201      	str	r2, [sp, #4]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d80c      	bhi.n	800bbac <__multiply+0x7a>
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	dd03      	ble.n	800bb9e <__multiply+0x6c>
 800bb96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d05d      	beq.n	800bc5a <__multiply+0x128>
 800bb9e:	6106      	str	r6, [r0, #16]
 800bba0:	b003      	add	sp, #12
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	f843 2b04 	str.w	r2, [r3], #4
 800bbaa:	e7e3      	b.n	800bb74 <__multiply+0x42>
 800bbac:	f8b2 b000 	ldrh.w	fp, [r2]
 800bbb0:	f1bb 0f00 	cmp.w	fp, #0
 800bbb4:	d023      	beq.n	800bbfe <__multiply+0xcc>
 800bbb6:	4689      	mov	r9, r1
 800bbb8:	46ac      	mov	ip, r5
 800bbba:	f04f 0800 	mov.w	r8, #0
 800bbbe:	f859 4b04 	ldr.w	r4, [r9], #4
 800bbc2:	f8dc a000 	ldr.w	sl, [ip]
 800bbc6:	b2a3      	uxth	r3, r4
 800bbc8:	fa1f fa8a 	uxth.w	sl, sl
 800bbcc:	fb0b a303 	mla	r3, fp, r3, sl
 800bbd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbd4:	f8dc 4000 	ldr.w	r4, [ip]
 800bbd8:	4443      	add	r3, r8
 800bbda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbde:	fb0b 840a 	mla	r4, fp, sl, r8
 800bbe2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bbe6:	46e2      	mov	sl, ip
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bbee:	454f      	cmp	r7, r9
 800bbf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbf4:	f84a 3b04 	str.w	r3, [sl], #4
 800bbf8:	d82b      	bhi.n	800bc52 <__multiply+0x120>
 800bbfa:	f8cc 8004 	str.w	r8, [ip, #4]
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bc04:	3204      	adds	r2, #4
 800bc06:	f1ba 0f00 	cmp.w	sl, #0
 800bc0a:	d020      	beq.n	800bc4e <__multiply+0x11c>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	4689      	mov	r9, r1
 800bc10:	46a8      	mov	r8, r5
 800bc12:	f04f 0b00 	mov.w	fp, #0
 800bc16:	f8b9 c000 	ldrh.w	ip, [r9]
 800bc1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bc1e:	fb0a 440c 	mla	r4, sl, ip, r4
 800bc22:	445c      	add	r4, fp
 800bc24:	46c4      	mov	ip, r8
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc2c:	f84c 3b04 	str.w	r3, [ip], #4
 800bc30:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bc38:	0c1b      	lsrs	r3, r3, #16
 800bc3a:	fb0a b303 	mla	r3, sl, r3, fp
 800bc3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bc42:	454f      	cmp	r7, r9
 800bc44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bc48:	d805      	bhi.n	800bc56 <__multiply+0x124>
 800bc4a:	f8c8 3004 	str.w	r3, [r8, #4]
 800bc4e:	3504      	adds	r5, #4
 800bc50:	e79b      	b.n	800bb8a <__multiply+0x58>
 800bc52:	46d4      	mov	ip, sl
 800bc54:	e7b3      	b.n	800bbbe <__multiply+0x8c>
 800bc56:	46e0      	mov	r8, ip
 800bc58:	e7dd      	b.n	800bc16 <__multiply+0xe4>
 800bc5a:	3e01      	subs	r6, #1
 800bc5c:	e799      	b.n	800bb92 <__multiply+0x60>
	...

0800bc60 <__pow5mult>:
 800bc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc64:	4615      	mov	r5, r2
 800bc66:	f012 0203 	ands.w	r2, r2, #3
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	460f      	mov	r7, r1
 800bc6e:	d007      	beq.n	800bc80 <__pow5mult+0x20>
 800bc70:	3a01      	subs	r2, #1
 800bc72:	4c21      	ldr	r4, [pc, #132]	; (800bcf8 <__pow5mult+0x98>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc7a:	f7ff fe8a 	bl	800b992 <__multadd>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	10ad      	asrs	r5, r5, #2
 800bc82:	d035      	beq.n	800bcf0 <__pow5mult+0x90>
 800bc84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc86:	b93c      	cbnz	r4, 800bc98 <__pow5mult+0x38>
 800bc88:	2010      	movs	r0, #16
 800bc8a:	f7ff fe1d 	bl	800b8c8 <malloc>
 800bc8e:	6270      	str	r0, [r6, #36]	; 0x24
 800bc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc94:	6004      	str	r4, [r0, #0]
 800bc96:	60c4      	str	r4, [r0, #12]
 800bc98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bca0:	b94c      	cbnz	r4, 800bcb6 <__pow5mult+0x56>
 800bca2:	f240 2171 	movw	r1, #625	; 0x271
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7ff ff3a 	bl	800bb20 <__i2b>
 800bcac:	2300      	movs	r3, #0
 800bcae:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	6003      	str	r3, [r0, #0]
 800bcb6:	f04f 0800 	mov.w	r8, #0
 800bcba:	07eb      	lsls	r3, r5, #31
 800bcbc:	d50a      	bpl.n	800bcd4 <__pow5mult+0x74>
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ff35 	bl	800bb32 <__multiply>
 800bcc8:	4639      	mov	r1, r7
 800bcca:	4681      	mov	r9, r0
 800bccc:	4630      	mov	r0, r6
 800bcce:	f7ff fe49 	bl	800b964 <_Bfree>
 800bcd2:	464f      	mov	r7, r9
 800bcd4:	106d      	asrs	r5, r5, #1
 800bcd6:	d00b      	beq.n	800bcf0 <__pow5mult+0x90>
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	b938      	cbnz	r0, 800bcec <__pow5mult+0x8c>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7ff ff26 	bl	800bb32 <__multiply>
 800bce6:	6020      	str	r0, [r4, #0]
 800bce8:	f8c0 8000 	str.w	r8, [r0]
 800bcec:	4604      	mov	r4, r0
 800bcee:	e7e4      	b.n	800bcba <__pow5mult+0x5a>
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0800e480 	.word	0x0800e480

0800bcfc <__lshift>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	6849      	ldr	r1, [r1, #4]
 800bd0a:	eb0a 0903 	add.w	r9, sl, r3
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	4607      	mov	r7, r0
 800bd12:	4616      	mov	r6, r2
 800bd14:	f109 0501 	add.w	r5, r9, #1
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	db32      	blt.n	800bd82 <__lshift+0x86>
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f7ff fded 	bl	800b8fc <_Balloc>
 800bd22:	2300      	movs	r3, #0
 800bd24:	4680      	mov	r8, r0
 800bd26:	f100 0114 	add.w	r1, r0, #20
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	4553      	cmp	r3, sl
 800bd2e:	db2b      	blt.n	800bd88 <__lshift+0x8c>
 800bd30:	6920      	ldr	r0, [r4, #16]
 800bd32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd36:	f104 0314 	add.w	r3, r4, #20
 800bd3a:	f016 021f 	ands.w	r2, r6, #31
 800bd3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd46:	d025      	beq.n	800bd94 <__lshift+0x98>
 800bd48:	f1c2 0e20 	rsb	lr, r2, #32
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	681e      	ldr	r6, [r3, #0]
 800bd50:	468a      	mov	sl, r1
 800bd52:	4096      	lsls	r6, r2
 800bd54:	4330      	orrs	r0, r6
 800bd56:	f84a 0b04 	str.w	r0, [sl], #4
 800bd5a:	f853 0b04 	ldr.w	r0, [r3], #4
 800bd5e:	459c      	cmp	ip, r3
 800bd60:	fa20 f00e 	lsr.w	r0, r0, lr
 800bd64:	d814      	bhi.n	800bd90 <__lshift+0x94>
 800bd66:	6048      	str	r0, [r1, #4]
 800bd68:	b108      	cbz	r0, 800bd6e <__lshift+0x72>
 800bd6a:	f109 0502 	add.w	r5, r9, #2
 800bd6e:	3d01      	subs	r5, #1
 800bd70:	4638      	mov	r0, r7
 800bd72:	f8c8 5010 	str.w	r5, [r8, #16]
 800bd76:	4621      	mov	r1, r4
 800bd78:	f7ff fdf4 	bl	800b964 <_Bfree>
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd82:	3101      	adds	r1, #1
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	e7c7      	b.n	800bd18 <__lshift+0x1c>
 800bd88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	e7cd      	b.n	800bd2c <__lshift+0x30>
 800bd90:	4651      	mov	r1, sl
 800bd92:	e7dc      	b.n	800bd4e <__lshift+0x52>
 800bd94:	3904      	subs	r1, #4
 800bd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd9e:	459c      	cmp	ip, r3
 800bda0:	d8f9      	bhi.n	800bd96 <__lshift+0x9a>
 800bda2:	e7e4      	b.n	800bd6e <__lshift+0x72>

0800bda4 <__mcmp>:
 800bda4:	6903      	ldr	r3, [r0, #16]
 800bda6:	690a      	ldr	r2, [r1, #16]
 800bda8:	1a9b      	subs	r3, r3, r2
 800bdaa:	b530      	push	{r4, r5, lr}
 800bdac:	d10c      	bne.n	800bdc8 <__mcmp+0x24>
 800bdae:	0092      	lsls	r2, r2, #2
 800bdb0:	3014      	adds	r0, #20
 800bdb2:	3114      	adds	r1, #20
 800bdb4:	1884      	adds	r4, r0, r2
 800bdb6:	4411      	add	r1, r2
 800bdb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdc0:	4295      	cmp	r5, r2
 800bdc2:	d003      	beq.n	800bdcc <__mcmp+0x28>
 800bdc4:	d305      	bcc.n	800bdd2 <__mcmp+0x2e>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4618      	mov	r0, r3
 800bdca:	bd30      	pop	{r4, r5, pc}
 800bdcc:	42a0      	cmp	r0, r4
 800bdce:	d3f3      	bcc.n	800bdb8 <__mcmp+0x14>
 800bdd0:	e7fa      	b.n	800bdc8 <__mcmp+0x24>
 800bdd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdd6:	e7f7      	b.n	800bdc8 <__mcmp+0x24>

0800bdd8 <__mdiff>:
 800bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bddc:	460d      	mov	r5, r1
 800bdde:	4607      	mov	r7, r0
 800bde0:	4611      	mov	r1, r2
 800bde2:	4628      	mov	r0, r5
 800bde4:	4614      	mov	r4, r2
 800bde6:	f7ff ffdd 	bl	800bda4 <__mcmp>
 800bdea:	1e06      	subs	r6, r0, #0
 800bdec:	d108      	bne.n	800be00 <__mdiff+0x28>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff fd83 	bl	800b8fc <_Balloc>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be00:	bfa4      	itt	ge
 800be02:	4623      	movge	r3, r4
 800be04:	462c      	movge	r4, r5
 800be06:	4638      	mov	r0, r7
 800be08:	6861      	ldr	r1, [r4, #4]
 800be0a:	bfa6      	itte	ge
 800be0c:	461d      	movge	r5, r3
 800be0e:	2600      	movge	r6, #0
 800be10:	2601      	movlt	r6, #1
 800be12:	f7ff fd73 	bl	800b8fc <_Balloc>
 800be16:	692b      	ldr	r3, [r5, #16]
 800be18:	60c6      	str	r6, [r0, #12]
 800be1a:	6926      	ldr	r6, [r4, #16]
 800be1c:	f105 0914 	add.w	r9, r5, #20
 800be20:	f104 0214 	add.w	r2, r4, #20
 800be24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800be28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800be2c:	f100 0514 	add.w	r5, r0, #20
 800be30:	f04f 0e00 	mov.w	lr, #0
 800be34:	f852 ab04 	ldr.w	sl, [r2], #4
 800be38:	f859 4b04 	ldr.w	r4, [r9], #4
 800be3c:	fa1e f18a 	uxtah	r1, lr, sl
 800be40:	b2a3      	uxth	r3, r4
 800be42:	1ac9      	subs	r1, r1, r3
 800be44:	0c23      	lsrs	r3, r4, #16
 800be46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800be4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800be4e:	b289      	uxth	r1, r1
 800be50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800be54:	45c8      	cmp	r8, r9
 800be56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800be5a:	4694      	mov	ip, r2
 800be5c:	f845 3b04 	str.w	r3, [r5], #4
 800be60:	d8e8      	bhi.n	800be34 <__mdiff+0x5c>
 800be62:	45bc      	cmp	ip, r7
 800be64:	d304      	bcc.n	800be70 <__mdiff+0x98>
 800be66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800be6a:	b183      	cbz	r3, 800be8e <__mdiff+0xb6>
 800be6c:	6106      	str	r6, [r0, #16]
 800be6e:	e7c5      	b.n	800bdfc <__mdiff+0x24>
 800be70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be74:	fa1e f381 	uxtah	r3, lr, r1
 800be78:	141a      	asrs	r2, r3, #16
 800be7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be7e:	b29b      	uxth	r3, r3
 800be80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800be88:	f845 3b04 	str.w	r3, [r5], #4
 800be8c:	e7e9      	b.n	800be62 <__mdiff+0x8a>
 800be8e:	3e01      	subs	r6, #1
 800be90:	e7e9      	b.n	800be66 <__mdiff+0x8e>
	...

0800be94 <__ulp>:
 800be94:	4b12      	ldr	r3, [pc, #72]	; (800bee0 <__ulp+0x4c>)
 800be96:	ee10 2a90 	vmov	r2, s1
 800be9a:	401a      	ands	r2, r3
 800be9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dd04      	ble.n	800beae <__ulp+0x1a>
 800bea4:	2000      	movs	r0, #0
 800bea6:	4619      	mov	r1, r3
 800bea8:	ec41 0b10 	vmov	d0, r0, r1
 800beac:	4770      	bx	lr
 800beae:	425b      	negs	r3, r3
 800beb0:	151b      	asrs	r3, r3, #20
 800beb2:	2b13      	cmp	r3, #19
 800beb4:	f04f 0000 	mov.w	r0, #0
 800beb8:	f04f 0100 	mov.w	r1, #0
 800bebc:	dc04      	bgt.n	800bec8 <__ulp+0x34>
 800bebe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bec2:	fa42 f103 	asr.w	r1, r2, r3
 800bec6:	e7ef      	b.n	800bea8 <__ulp+0x14>
 800bec8:	3b14      	subs	r3, #20
 800beca:	2b1e      	cmp	r3, #30
 800becc:	f04f 0201 	mov.w	r2, #1
 800bed0:	bfda      	itte	le
 800bed2:	f1c3 031f 	rsble	r3, r3, #31
 800bed6:	fa02 f303 	lslle.w	r3, r2, r3
 800beda:	4613      	movgt	r3, r2
 800bedc:	4618      	mov	r0, r3
 800bede:	e7e3      	b.n	800bea8 <__ulp+0x14>
 800bee0:	7ff00000 	.word	0x7ff00000

0800bee4 <__b2d>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	6905      	ldr	r5, [r0, #16]
 800bee8:	f100 0714 	add.w	r7, r0, #20
 800beec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bef0:	1f2e      	subs	r6, r5, #4
 800bef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7ff fdc4 	bl	800ba84 <__hi0bits>
 800befc:	f1c0 0320 	rsb	r3, r0, #32
 800bf00:	280a      	cmp	r0, #10
 800bf02:	600b      	str	r3, [r1, #0]
 800bf04:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bf7c <__b2d+0x98>
 800bf08:	dc14      	bgt.n	800bf34 <__b2d+0x50>
 800bf0a:	f1c0 0e0b 	rsb	lr, r0, #11
 800bf0e:	fa24 f10e 	lsr.w	r1, r4, lr
 800bf12:	42b7      	cmp	r7, r6
 800bf14:	ea41 030c 	orr.w	r3, r1, ip
 800bf18:	bf34      	ite	cc
 800bf1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf1e:	2100      	movcs	r1, #0
 800bf20:	3015      	adds	r0, #21
 800bf22:	fa04 f000 	lsl.w	r0, r4, r0
 800bf26:	fa21 f10e 	lsr.w	r1, r1, lr
 800bf2a:	ea40 0201 	orr.w	r2, r0, r1
 800bf2e:	ec43 2b10 	vmov	d0, r2, r3
 800bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf34:	42b7      	cmp	r7, r6
 800bf36:	bf3a      	itte	cc
 800bf38:	f1a5 0608 	subcc.w	r6, r5, #8
 800bf3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf40:	2100      	movcs	r1, #0
 800bf42:	380b      	subs	r0, #11
 800bf44:	d015      	beq.n	800bf72 <__b2d+0x8e>
 800bf46:	4084      	lsls	r4, r0
 800bf48:	f1c0 0520 	rsb	r5, r0, #32
 800bf4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bf50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bf54:	42be      	cmp	r6, r7
 800bf56:	fa21 fc05 	lsr.w	ip, r1, r5
 800bf5a:	ea44 030c 	orr.w	r3, r4, ip
 800bf5e:	bf8c      	ite	hi
 800bf60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf64:	2400      	movls	r4, #0
 800bf66:	fa01 f000 	lsl.w	r0, r1, r0
 800bf6a:	40ec      	lsrs	r4, r5
 800bf6c:	ea40 0204 	orr.w	r2, r0, r4
 800bf70:	e7dd      	b.n	800bf2e <__b2d+0x4a>
 800bf72:	ea44 030c 	orr.w	r3, r4, ip
 800bf76:	460a      	mov	r2, r1
 800bf78:	e7d9      	b.n	800bf2e <__b2d+0x4a>
 800bf7a:	bf00      	nop
 800bf7c:	3ff00000 	.word	0x3ff00000

0800bf80 <__d2b>:
 800bf80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	460e      	mov	r6, r1
 800bf86:	2101      	movs	r1, #1
 800bf88:	ec59 8b10 	vmov	r8, r9, d0
 800bf8c:	4615      	mov	r5, r2
 800bf8e:	f7ff fcb5 	bl	800b8fc <_Balloc>
 800bf92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bf96:	4607      	mov	r7, r0
 800bf98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf9c:	bb34      	cbnz	r4, 800bfec <__d2b+0x6c>
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	f1b8 0300 	subs.w	r3, r8, #0
 800bfa4:	d027      	beq.n	800bff6 <__d2b+0x76>
 800bfa6:	a802      	add	r0, sp, #8
 800bfa8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bfac:	f7ff fd89 	bl	800bac2 <__lo0bits>
 800bfb0:	9900      	ldr	r1, [sp, #0]
 800bfb2:	b1f0      	cbz	r0, 800bff2 <__d2b+0x72>
 800bfb4:	9a01      	ldr	r2, [sp, #4]
 800bfb6:	f1c0 0320 	rsb	r3, r0, #32
 800bfba:	fa02 f303 	lsl.w	r3, r2, r3
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	40c2      	lsrs	r2, r0
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	9201      	str	r2, [sp, #4]
 800bfc6:	9b01      	ldr	r3, [sp, #4]
 800bfc8:	61bb      	str	r3, [r7, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	bf14      	ite	ne
 800bfce:	2102      	movne	r1, #2
 800bfd0:	2101      	moveq	r1, #1
 800bfd2:	6139      	str	r1, [r7, #16]
 800bfd4:	b1c4      	cbz	r4, 800c008 <__d2b+0x88>
 800bfd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bfda:	4404      	add	r4, r0
 800bfdc:	6034      	str	r4, [r6, #0]
 800bfde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfe2:	6028      	str	r0, [r5, #0]
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	b003      	add	sp, #12
 800bfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bff0:	e7d5      	b.n	800bf9e <__d2b+0x1e>
 800bff2:	6179      	str	r1, [r7, #20]
 800bff4:	e7e7      	b.n	800bfc6 <__d2b+0x46>
 800bff6:	a801      	add	r0, sp, #4
 800bff8:	f7ff fd63 	bl	800bac2 <__lo0bits>
 800bffc:	9b01      	ldr	r3, [sp, #4]
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	2101      	movs	r1, #1
 800c002:	6139      	str	r1, [r7, #16]
 800c004:	3020      	adds	r0, #32
 800c006:	e7e5      	b.n	800bfd4 <__d2b+0x54>
 800c008:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c010:	6030      	str	r0, [r6, #0]
 800c012:	6918      	ldr	r0, [r3, #16]
 800c014:	f7ff fd36 	bl	800ba84 <__hi0bits>
 800c018:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c01c:	e7e1      	b.n	800bfe2 <__d2b+0x62>

0800c01e <__ratio>:
 800c01e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c022:	4688      	mov	r8, r1
 800c024:	4669      	mov	r1, sp
 800c026:	4681      	mov	r9, r0
 800c028:	f7ff ff5c 	bl	800bee4 <__b2d>
 800c02c:	a901      	add	r1, sp, #4
 800c02e:	4640      	mov	r0, r8
 800c030:	ec57 6b10 	vmov	r6, r7, d0
 800c034:	f7ff ff56 	bl	800bee4 <__b2d>
 800c038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c03c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c040:	eba3 0c02 	sub.w	ip, r3, r2
 800c044:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c04e:	ec5b ab10 	vmov	sl, fp, d0
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfce      	itee	gt
 800c056:	463a      	movgt	r2, r7
 800c058:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c05c:	465a      	movle	r2, fp
 800c05e:	4659      	mov	r1, fp
 800c060:	463d      	mov	r5, r7
 800c062:	bfd4      	ite	le
 800c064:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c068:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c06c:	4630      	mov	r0, r6
 800c06e:	ee10 2a10 	vmov	r2, s0
 800c072:	460b      	mov	r3, r1
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fbe9 	bl	800084c <__aeabi_ddiv>
 800c07a:	ec41 0b10 	vmov	d0, r0, r1
 800c07e:	b003      	add	sp, #12
 800c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c084 <__copybits>:
 800c084:	3901      	subs	r1, #1
 800c086:	b510      	push	{r4, lr}
 800c088:	1149      	asrs	r1, r1, #5
 800c08a:	6914      	ldr	r4, [r2, #16]
 800c08c:	3101      	adds	r1, #1
 800c08e:	f102 0314 	add.w	r3, r2, #20
 800c092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c09a:	42a3      	cmp	r3, r4
 800c09c:	4602      	mov	r2, r0
 800c09e:	d303      	bcc.n	800c0a8 <__copybits+0x24>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	428a      	cmp	r2, r1
 800c0a4:	d305      	bcc.n	800c0b2 <__copybits+0x2e>
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ac:	f840 2b04 	str.w	r2, [r0], #4
 800c0b0:	e7f3      	b.n	800c09a <__copybits+0x16>
 800c0b2:	f842 3b04 	str.w	r3, [r2], #4
 800c0b6:	e7f4      	b.n	800c0a2 <__copybits+0x1e>

0800c0b8 <__any_on>:
 800c0b8:	f100 0214 	add.w	r2, r0, #20
 800c0bc:	6900      	ldr	r0, [r0, #16]
 800c0be:	114b      	asrs	r3, r1, #5
 800c0c0:	4298      	cmp	r0, r3
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	db11      	blt.n	800c0ea <__any_on+0x32>
 800c0c6:	dd0a      	ble.n	800c0de <__any_on+0x26>
 800c0c8:	f011 011f 	ands.w	r1, r1, #31
 800c0cc:	d007      	beq.n	800c0de <__any_on+0x26>
 800c0ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0d2:	fa24 f001 	lsr.w	r0, r4, r1
 800c0d6:	fa00 f101 	lsl.w	r1, r0, r1
 800c0da:	428c      	cmp	r4, r1
 800c0dc:	d10b      	bne.n	800c0f6 <__any_on+0x3e>
 800c0de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d803      	bhi.n	800c0ee <__any_on+0x36>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	e7f7      	b.n	800c0de <__any_on+0x26>
 800c0ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	d0f5      	beq.n	800c0e2 <__any_on+0x2a>
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	e7f6      	b.n	800c0e8 <__any_on+0x30>

0800c0fa <_calloc_r>:
 800c0fa:	b538      	push	{r3, r4, r5, lr}
 800c0fc:	fb02 f401 	mul.w	r4, r2, r1
 800c100:	4621      	mov	r1, r4
 800c102:	f000 f857 	bl	800c1b4 <_malloc_r>
 800c106:	4605      	mov	r5, r0
 800c108:	b118      	cbz	r0, 800c112 <_calloc_r+0x18>
 800c10a:	4622      	mov	r2, r4
 800c10c:	2100      	movs	r1, #0
 800c10e:	f7fc f96e 	bl	80083ee <memset>
 800c112:	4628      	mov	r0, r5
 800c114:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c118 <_free_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4605      	mov	r5, r0
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d045      	beq.n	800c1ac <_free_r+0x94>
 800c120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c124:	1f0c      	subs	r4, r1, #4
 800c126:	2b00      	cmp	r3, #0
 800c128:	bfb8      	it	lt
 800c12a:	18e4      	addlt	r4, r4, r3
 800c12c:	f000 fc0f 	bl	800c94e <__malloc_lock>
 800c130:	4a1f      	ldr	r2, [pc, #124]	; (800c1b0 <_free_r+0x98>)
 800c132:	6813      	ldr	r3, [r2, #0]
 800c134:	4610      	mov	r0, r2
 800c136:	b933      	cbnz	r3, 800c146 <_free_r+0x2e>
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	6014      	str	r4, [r2, #0]
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c142:	f000 bc05 	b.w	800c950 <__malloc_unlock>
 800c146:	42a3      	cmp	r3, r4
 800c148:	d90c      	bls.n	800c164 <_free_r+0x4c>
 800c14a:	6821      	ldr	r1, [r4, #0]
 800c14c:	1862      	adds	r2, r4, r1
 800c14e:	4293      	cmp	r3, r2
 800c150:	bf04      	itt	eq
 800c152:	681a      	ldreq	r2, [r3, #0]
 800c154:	685b      	ldreq	r3, [r3, #4]
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	bf04      	itt	eq
 800c15a:	1852      	addeq	r2, r2, r1
 800c15c:	6022      	streq	r2, [r4, #0]
 800c15e:	6004      	str	r4, [r0, #0]
 800c160:	e7ec      	b.n	800c13c <_free_r+0x24>
 800c162:	4613      	mov	r3, r2
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	b10a      	cbz	r2, 800c16c <_free_r+0x54>
 800c168:	42a2      	cmp	r2, r4
 800c16a:	d9fa      	bls.n	800c162 <_free_r+0x4a>
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	1858      	adds	r0, r3, r1
 800c170:	42a0      	cmp	r0, r4
 800c172:	d10b      	bne.n	800c18c <_free_r+0x74>
 800c174:	6820      	ldr	r0, [r4, #0]
 800c176:	4401      	add	r1, r0
 800c178:	1858      	adds	r0, r3, r1
 800c17a:	4282      	cmp	r2, r0
 800c17c:	6019      	str	r1, [r3, #0]
 800c17e:	d1dd      	bne.n	800c13c <_free_r+0x24>
 800c180:	6810      	ldr	r0, [r2, #0]
 800c182:	6852      	ldr	r2, [r2, #4]
 800c184:	605a      	str	r2, [r3, #4]
 800c186:	4401      	add	r1, r0
 800c188:	6019      	str	r1, [r3, #0]
 800c18a:	e7d7      	b.n	800c13c <_free_r+0x24>
 800c18c:	d902      	bls.n	800c194 <_free_r+0x7c>
 800c18e:	230c      	movs	r3, #12
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	e7d3      	b.n	800c13c <_free_r+0x24>
 800c194:	6820      	ldr	r0, [r4, #0]
 800c196:	1821      	adds	r1, r4, r0
 800c198:	428a      	cmp	r2, r1
 800c19a:	bf04      	itt	eq
 800c19c:	6811      	ldreq	r1, [r2, #0]
 800c19e:	6852      	ldreq	r2, [r2, #4]
 800c1a0:	6062      	str	r2, [r4, #4]
 800c1a2:	bf04      	itt	eq
 800c1a4:	1809      	addeq	r1, r1, r0
 800c1a6:	6021      	streq	r1, [r4, #0]
 800c1a8:	605c      	str	r4, [r3, #4]
 800c1aa:	e7c7      	b.n	800c13c <_free_r+0x24>
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000238 	.word	0x20000238

0800c1b4 <_malloc_r>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	1ccd      	adds	r5, r1, #3
 800c1b8:	f025 0503 	bic.w	r5, r5, #3
 800c1bc:	3508      	adds	r5, #8
 800c1be:	2d0c      	cmp	r5, #12
 800c1c0:	bf38      	it	cc
 800c1c2:	250c      	movcc	r5, #12
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	db01      	blt.n	800c1ce <_malloc_r+0x1a>
 800c1ca:	42a9      	cmp	r1, r5
 800c1cc:	d903      	bls.n	800c1d6 <_malloc_r+0x22>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	6033      	str	r3, [r6, #0]
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	bd70      	pop	{r4, r5, r6, pc}
 800c1d6:	f000 fbba 	bl	800c94e <__malloc_lock>
 800c1da:	4a21      	ldr	r2, [pc, #132]	; (800c260 <_malloc_r+0xac>)
 800c1dc:	6814      	ldr	r4, [r2, #0]
 800c1de:	4621      	mov	r1, r4
 800c1e0:	b991      	cbnz	r1, 800c208 <_malloc_r+0x54>
 800c1e2:	4c20      	ldr	r4, [pc, #128]	; (800c264 <_malloc_r+0xb0>)
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	b91b      	cbnz	r3, 800c1f0 <_malloc_r+0x3c>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f000 facf 	bl	800c78c <_sbrk_r>
 800c1ee:	6020      	str	r0, [r4, #0]
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f000 faca 	bl	800c78c <_sbrk_r>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d124      	bne.n	800c246 <_malloc_r+0x92>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	6033      	str	r3, [r6, #0]
 800c200:	4630      	mov	r0, r6
 800c202:	f000 fba5 	bl	800c950 <__malloc_unlock>
 800c206:	e7e4      	b.n	800c1d2 <_malloc_r+0x1e>
 800c208:	680b      	ldr	r3, [r1, #0]
 800c20a:	1b5b      	subs	r3, r3, r5
 800c20c:	d418      	bmi.n	800c240 <_malloc_r+0x8c>
 800c20e:	2b0b      	cmp	r3, #11
 800c210:	d90f      	bls.n	800c232 <_malloc_r+0x7e>
 800c212:	600b      	str	r3, [r1, #0]
 800c214:	50cd      	str	r5, [r1, r3]
 800c216:	18cc      	adds	r4, r1, r3
 800c218:	4630      	mov	r0, r6
 800c21a:	f000 fb99 	bl	800c950 <__malloc_unlock>
 800c21e:	f104 000b 	add.w	r0, r4, #11
 800c222:	1d23      	adds	r3, r4, #4
 800c224:	f020 0007 	bic.w	r0, r0, #7
 800c228:	1ac3      	subs	r3, r0, r3
 800c22a:	d0d3      	beq.n	800c1d4 <_malloc_r+0x20>
 800c22c:	425a      	negs	r2, r3
 800c22e:	50e2      	str	r2, [r4, r3]
 800c230:	e7d0      	b.n	800c1d4 <_malloc_r+0x20>
 800c232:	428c      	cmp	r4, r1
 800c234:	684b      	ldr	r3, [r1, #4]
 800c236:	bf16      	itet	ne
 800c238:	6063      	strne	r3, [r4, #4]
 800c23a:	6013      	streq	r3, [r2, #0]
 800c23c:	460c      	movne	r4, r1
 800c23e:	e7eb      	b.n	800c218 <_malloc_r+0x64>
 800c240:	460c      	mov	r4, r1
 800c242:	6849      	ldr	r1, [r1, #4]
 800c244:	e7cc      	b.n	800c1e0 <_malloc_r+0x2c>
 800c246:	1cc4      	adds	r4, r0, #3
 800c248:	f024 0403 	bic.w	r4, r4, #3
 800c24c:	42a0      	cmp	r0, r4
 800c24e:	d005      	beq.n	800c25c <_malloc_r+0xa8>
 800c250:	1a21      	subs	r1, r4, r0
 800c252:	4630      	mov	r0, r6
 800c254:	f000 fa9a 	bl	800c78c <_sbrk_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	d0cf      	beq.n	800c1fc <_malloc_r+0x48>
 800c25c:	6025      	str	r5, [r4, #0]
 800c25e:	e7db      	b.n	800c218 <_malloc_r+0x64>
 800c260:	20000238 	.word	0x20000238
 800c264:	2000023c 	.word	0x2000023c

0800c268 <__ssputs_r>:
 800c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c26c:	688e      	ldr	r6, [r1, #8]
 800c26e:	429e      	cmp	r6, r3
 800c270:	4682      	mov	sl, r0
 800c272:	460c      	mov	r4, r1
 800c274:	4690      	mov	r8, r2
 800c276:	4699      	mov	r9, r3
 800c278:	d837      	bhi.n	800c2ea <__ssputs_r+0x82>
 800c27a:	898a      	ldrh	r2, [r1, #12]
 800c27c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c280:	d031      	beq.n	800c2e6 <__ssputs_r+0x7e>
 800c282:	6825      	ldr	r5, [r4, #0]
 800c284:	6909      	ldr	r1, [r1, #16]
 800c286:	1a6f      	subs	r7, r5, r1
 800c288:	6965      	ldr	r5, [r4, #20]
 800c28a:	2302      	movs	r3, #2
 800c28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c290:	fb95 f5f3 	sdiv	r5, r5, r3
 800c294:	f109 0301 	add.w	r3, r9, #1
 800c298:	443b      	add	r3, r7
 800c29a:	429d      	cmp	r5, r3
 800c29c:	bf38      	it	cc
 800c29e:	461d      	movcc	r5, r3
 800c2a0:	0553      	lsls	r3, r2, #21
 800c2a2:	d530      	bpl.n	800c306 <__ssputs_r+0x9e>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7ff ff85 	bl	800c1b4 <_malloc_r>
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	b950      	cbnz	r0, 800c2c4 <__ssputs_r+0x5c>
 800c2ae:	230c      	movs	r3, #12
 800c2b0:	f8ca 3000 	str.w	r3, [sl]
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c4:	463a      	mov	r2, r7
 800c2c6:	6921      	ldr	r1, [r4, #16]
 800c2c8:	f7fc f886 	bl	80083d8 <memcpy>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2d6:	81a3      	strh	r3, [r4, #12]
 800c2d8:	6126      	str	r6, [r4, #16]
 800c2da:	6165      	str	r5, [r4, #20]
 800c2dc:	443e      	add	r6, r7
 800c2de:	1bed      	subs	r5, r5, r7
 800c2e0:	6026      	str	r6, [r4, #0]
 800c2e2:	60a5      	str	r5, [r4, #8]
 800c2e4:	464e      	mov	r6, r9
 800c2e6:	454e      	cmp	r6, r9
 800c2e8:	d900      	bls.n	800c2ec <__ssputs_r+0x84>
 800c2ea:	464e      	mov	r6, r9
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	4641      	mov	r1, r8
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	f000 fb13 	bl	800c91c <memmove>
 800c2f6:	68a3      	ldr	r3, [r4, #8]
 800c2f8:	1b9b      	subs	r3, r3, r6
 800c2fa:	60a3      	str	r3, [r4, #8]
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	441e      	add	r6, r3
 800c300:	6026      	str	r6, [r4, #0]
 800c302:	2000      	movs	r0, #0
 800c304:	e7dc      	b.n	800c2c0 <__ssputs_r+0x58>
 800c306:	462a      	mov	r2, r5
 800c308:	f000 fb23 	bl	800c952 <_realloc_r>
 800c30c:	4606      	mov	r6, r0
 800c30e:	2800      	cmp	r0, #0
 800c310:	d1e2      	bne.n	800c2d8 <__ssputs_r+0x70>
 800c312:	6921      	ldr	r1, [r4, #16]
 800c314:	4650      	mov	r0, sl
 800c316:	f7ff feff 	bl	800c118 <_free_r>
 800c31a:	e7c8      	b.n	800c2ae <__ssputs_r+0x46>

0800c31c <_svfiprintf_r>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	461d      	mov	r5, r3
 800c322:	898b      	ldrh	r3, [r1, #12]
 800c324:	061f      	lsls	r7, r3, #24
 800c326:	b09d      	sub	sp, #116	; 0x74
 800c328:	4680      	mov	r8, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	4616      	mov	r6, r2
 800c32e:	d50f      	bpl.n	800c350 <_svfiprintf_r+0x34>
 800c330:	690b      	ldr	r3, [r1, #16]
 800c332:	b96b      	cbnz	r3, 800c350 <_svfiprintf_r+0x34>
 800c334:	2140      	movs	r1, #64	; 0x40
 800c336:	f7ff ff3d 	bl	800c1b4 <_malloc_r>
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	6120      	str	r0, [r4, #16]
 800c33e:	b928      	cbnz	r0, 800c34c <_svfiprintf_r+0x30>
 800c340:	230c      	movs	r3, #12
 800c342:	f8c8 3000 	str.w	r3, [r8]
 800c346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c34a:	e0c8      	b.n	800c4de <_svfiprintf_r+0x1c2>
 800c34c:	2340      	movs	r3, #64	; 0x40
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	2300      	movs	r3, #0
 800c352:	9309      	str	r3, [sp, #36]	; 0x24
 800c354:	2320      	movs	r3, #32
 800c356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c35a:	2330      	movs	r3, #48	; 0x30
 800c35c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c360:	9503      	str	r5, [sp, #12]
 800c362:	f04f 0b01 	mov.w	fp, #1
 800c366:	4637      	mov	r7, r6
 800c368:	463d      	mov	r5, r7
 800c36a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c36e:	b10b      	cbz	r3, 800c374 <_svfiprintf_r+0x58>
 800c370:	2b25      	cmp	r3, #37	; 0x25
 800c372:	d13e      	bne.n	800c3f2 <_svfiprintf_r+0xd6>
 800c374:	ebb7 0a06 	subs.w	sl, r7, r6
 800c378:	d00b      	beq.n	800c392 <_svfiprintf_r+0x76>
 800c37a:	4653      	mov	r3, sl
 800c37c:	4632      	mov	r2, r6
 800c37e:	4621      	mov	r1, r4
 800c380:	4640      	mov	r0, r8
 800c382:	f7ff ff71 	bl	800c268 <__ssputs_r>
 800c386:	3001      	adds	r0, #1
 800c388:	f000 80a4 	beq.w	800c4d4 <_svfiprintf_r+0x1b8>
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	4453      	add	r3, sl
 800c390:	9309      	str	r3, [sp, #36]	; 0x24
 800c392:	783b      	ldrb	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 809d 	beq.w	800c4d4 <_svfiprintf_r+0x1b8>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	9307      	str	r3, [sp, #28]
 800c3a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c3ae:	462f      	mov	r7, r5
 800c3b0:	2205      	movs	r2, #5
 800c3b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c3b6:	4850      	ldr	r0, [pc, #320]	; (800c4f8 <_svfiprintf_r+0x1dc>)
 800c3b8:	f7f3 ff12 	bl	80001e0 <memchr>
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	b9d0      	cbnz	r0, 800c3f6 <_svfiprintf_r+0xda>
 800c3c0:	06d9      	lsls	r1, r3, #27
 800c3c2:	bf44      	itt	mi
 800c3c4:	2220      	movmi	r2, #32
 800c3c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3ca:	071a      	lsls	r2, r3, #28
 800c3cc:	bf44      	itt	mi
 800c3ce:	222b      	movmi	r2, #43	; 0x2b
 800c3d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3d4:	782a      	ldrb	r2, [r5, #0]
 800c3d6:	2a2a      	cmp	r2, #42	; 0x2a
 800c3d8:	d015      	beq.n	800c406 <_svfiprintf_r+0xea>
 800c3da:	9a07      	ldr	r2, [sp, #28]
 800c3dc:	462f      	mov	r7, r5
 800c3de:	2000      	movs	r0, #0
 800c3e0:	250a      	movs	r5, #10
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e8:	3b30      	subs	r3, #48	; 0x30
 800c3ea:	2b09      	cmp	r3, #9
 800c3ec:	d94d      	bls.n	800c48a <_svfiprintf_r+0x16e>
 800c3ee:	b1b8      	cbz	r0, 800c420 <_svfiprintf_r+0x104>
 800c3f0:	e00f      	b.n	800c412 <_svfiprintf_r+0xf6>
 800c3f2:	462f      	mov	r7, r5
 800c3f4:	e7b8      	b.n	800c368 <_svfiprintf_r+0x4c>
 800c3f6:	4a40      	ldr	r2, [pc, #256]	; (800c4f8 <_svfiprintf_r+0x1dc>)
 800c3f8:	1a80      	subs	r0, r0, r2
 800c3fa:	fa0b f000 	lsl.w	r0, fp, r0
 800c3fe:	4318      	orrs	r0, r3
 800c400:	9004      	str	r0, [sp, #16]
 800c402:	463d      	mov	r5, r7
 800c404:	e7d3      	b.n	800c3ae <_svfiprintf_r+0x92>
 800c406:	9a03      	ldr	r2, [sp, #12]
 800c408:	1d11      	adds	r1, r2, #4
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	9103      	str	r1, [sp, #12]
 800c40e:	2a00      	cmp	r2, #0
 800c410:	db01      	blt.n	800c416 <_svfiprintf_r+0xfa>
 800c412:	9207      	str	r2, [sp, #28]
 800c414:	e004      	b.n	800c420 <_svfiprintf_r+0x104>
 800c416:	4252      	negs	r2, r2
 800c418:	f043 0302 	orr.w	r3, r3, #2
 800c41c:	9207      	str	r2, [sp, #28]
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	783b      	ldrb	r3, [r7, #0]
 800c422:	2b2e      	cmp	r3, #46	; 0x2e
 800c424:	d10c      	bne.n	800c440 <_svfiprintf_r+0x124>
 800c426:	787b      	ldrb	r3, [r7, #1]
 800c428:	2b2a      	cmp	r3, #42	; 0x2a
 800c42a:	d133      	bne.n	800c494 <_svfiprintf_r+0x178>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	1d1a      	adds	r2, r3, #4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	9203      	str	r2, [sp, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	bfb8      	it	lt
 800c438:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c43c:	3702      	adds	r7, #2
 800c43e:	9305      	str	r3, [sp, #20]
 800c440:	4d2e      	ldr	r5, [pc, #184]	; (800c4fc <_svfiprintf_r+0x1e0>)
 800c442:	7839      	ldrb	r1, [r7, #0]
 800c444:	2203      	movs	r2, #3
 800c446:	4628      	mov	r0, r5
 800c448:	f7f3 feca 	bl	80001e0 <memchr>
 800c44c:	b138      	cbz	r0, 800c45e <_svfiprintf_r+0x142>
 800c44e:	2340      	movs	r3, #64	; 0x40
 800c450:	1b40      	subs	r0, r0, r5
 800c452:	fa03 f000 	lsl.w	r0, r3, r0
 800c456:	9b04      	ldr	r3, [sp, #16]
 800c458:	4303      	orrs	r3, r0
 800c45a:	3701      	adds	r7, #1
 800c45c:	9304      	str	r3, [sp, #16]
 800c45e:	7839      	ldrb	r1, [r7, #0]
 800c460:	4827      	ldr	r0, [pc, #156]	; (800c500 <_svfiprintf_r+0x1e4>)
 800c462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c466:	2206      	movs	r2, #6
 800c468:	1c7e      	adds	r6, r7, #1
 800c46a:	f7f3 feb9 	bl	80001e0 <memchr>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d038      	beq.n	800c4e4 <_svfiprintf_r+0x1c8>
 800c472:	4b24      	ldr	r3, [pc, #144]	; (800c504 <_svfiprintf_r+0x1e8>)
 800c474:	bb13      	cbnz	r3, 800c4bc <_svfiprintf_r+0x1a0>
 800c476:	9b03      	ldr	r3, [sp, #12]
 800c478:	3307      	adds	r3, #7
 800c47a:	f023 0307 	bic.w	r3, r3, #7
 800c47e:	3308      	adds	r3, #8
 800c480:	9303      	str	r3, [sp, #12]
 800c482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c484:	444b      	add	r3, r9
 800c486:	9309      	str	r3, [sp, #36]	; 0x24
 800c488:	e76d      	b.n	800c366 <_svfiprintf_r+0x4a>
 800c48a:	fb05 3202 	mla	r2, r5, r2, r3
 800c48e:	2001      	movs	r0, #1
 800c490:	460f      	mov	r7, r1
 800c492:	e7a6      	b.n	800c3e2 <_svfiprintf_r+0xc6>
 800c494:	2300      	movs	r3, #0
 800c496:	3701      	adds	r7, #1
 800c498:	9305      	str	r3, [sp, #20]
 800c49a:	4619      	mov	r1, r3
 800c49c:	250a      	movs	r5, #10
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a4:	3a30      	subs	r2, #48	; 0x30
 800c4a6:	2a09      	cmp	r2, #9
 800c4a8:	d903      	bls.n	800c4b2 <_svfiprintf_r+0x196>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0c8      	beq.n	800c440 <_svfiprintf_r+0x124>
 800c4ae:	9105      	str	r1, [sp, #20]
 800c4b0:	e7c6      	b.n	800c440 <_svfiprintf_r+0x124>
 800c4b2:	fb05 2101 	mla	r1, r5, r1, r2
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	e7f0      	b.n	800c49e <_svfiprintf_r+0x182>
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4b11      	ldr	r3, [pc, #68]	; (800c508 <_svfiprintf_r+0x1ec>)
 800c4c4:	a904      	add	r1, sp, #16
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	f7fc f82e 	bl	8008528 <_printf_float>
 800c4cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c4d0:	4681      	mov	r9, r0
 800c4d2:	d1d6      	bne.n	800c482 <_svfiprintf_r+0x166>
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	065b      	lsls	r3, r3, #25
 800c4d8:	f53f af35 	bmi.w	800c346 <_svfiprintf_r+0x2a>
 800c4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4de:	b01d      	add	sp, #116	; 0x74
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	ab03      	add	r3, sp, #12
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4b07      	ldr	r3, [pc, #28]	; (800c508 <_svfiprintf_r+0x1ec>)
 800c4ec:	a904      	add	r1, sp, #16
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7fc fad0 	bl	8008a94 <_printf_i>
 800c4f4:	e7ea      	b.n	800c4cc <_svfiprintf_r+0x1b0>
 800c4f6:	bf00      	nop
 800c4f8:	0800e48c 	.word	0x0800e48c
 800c4fc:	0800e492 	.word	0x0800e492
 800c500:	0800e496 	.word	0x0800e496
 800c504:	08008529 	.word	0x08008529
 800c508:	0800c269 	.word	0x0800c269

0800c50c <__sfputc_r>:
 800c50c:	6893      	ldr	r3, [r2, #8]
 800c50e:	3b01      	subs	r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	b410      	push	{r4}
 800c514:	6093      	str	r3, [r2, #8]
 800c516:	da08      	bge.n	800c52a <__sfputc_r+0x1e>
 800c518:	6994      	ldr	r4, [r2, #24]
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	db01      	blt.n	800c522 <__sfputc_r+0x16>
 800c51e:	290a      	cmp	r1, #10
 800c520:	d103      	bne.n	800c52a <__sfputc_r+0x1e>
 800c522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c526:	f7fd bdb1 	b.w	800a08c <__swbuf_r>
 800c52a:	6813      	ldr	r3, [r2, #0]
 800c52c:	1c58      	adds	r0, r3, #1
 800c52e:	6010      	str	r0, [r2, #0]
 800c530:	7019      	strb	r1, [r3, #0]
 800c532:	4608      	mov	r0, r1
 800c534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <__sfputs_r>:
 800c53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	4614      	mov	r4, r2
 800c542:	18d5      	adds	r5, r2, r3
 800c544:	42ac      	cmp	r4, r5
 800c546:	d101      	bne.n	800c54c <__sfputs_r+0x12>
 800c548:	2000      	movs	r0, #0
 800c54a:	e007      	b.n	800c55c <__sfputs_r+0x22>
 800c54c:	463a      	mov	r2, r7
 800c54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c552:	4630      	mov	r0, r6
 800c554:	f7ff ffda 	bl	800c50c <__sfputc_r>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d1f3      	bne.n	800c544 <__sfputs_r+0xa>
 800c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c560 <_vfiprintf_r>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	460c      	mov	r4, r1
 800c566:	b09d      	sub	sp, #116	; 0x74
 800c568:	4617      	mov	r7, r2
 800c56a:	461d      	mov	r5, r3
 800c56c:	4606      	mov	r6, r0
 800c56e:	b118      	cbz	r0, 800c578 <_vfiprintf_r+0x18>
 800c570:	6983      	ldr	r3, [r0, #24]
 800c572:	b90b      	cbnz	r3, 800c578 <_vfiprintf_r+0x18>
 800c574:	f7fe fd80 	bl	800b078 <__sinit>
 800c578:	4b7c      	ldr	r3, [pc, #496]	; (800c76c <_vfiprintf_r+0x20c>)
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d158      	bne.n	800c630 <_vfiprintf_r+0xd0>
 800c57e:	6874      	ldr	r4, [r6, #4]
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	0718      	lsls	r0, r3, #28
 800c584:	d55e      	bpl.n	800c644 <_vfiprintf_r+0xe4>
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d05b      	beq.n	800c644 <_vfiprintf_r+0xe4>
 800c58c:	2300      	movs	r3, #0
 800c58e:	9309      	str	r3, [sp, #36]	; 0x24
 800c590:	2320      	movs	r3, #32
 800c592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c596:	2330      	movs	r3, #48	; 0x30
 800c598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c59c:	9503      	str	r5, [sp, #12]
 800c59e:	f04f 0b01 	mov.w	fp, #1
 800c5a2:	46b8      	mov	r8, r7
 800c5a4:	4645      	mov	r5, r8
 800c5a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5aa:	b10b      	cbz	r3, 800c5b0 <_vfiprintf_r+0x50>
 800c5ac:	2b25      	cmp	r3, #37	; 0x25
 800c5ae:	d154      	bne.n	800c65a <_vfiprintf_r+0xfa>
 800c5b0:	ebb8 0a07 	subs.w	sl, r8, r7
 800c5b4:	d00b      	beq.n	800c5ce <_vfiprintf_r+0x6e>
 800c5b6:	4653      	mov	r3, sl
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff ffbc 	bl	800c53a <__sfputs_r>
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	f000 80c2 	beq.w	800c74c <_vfiprintf_r+0x1ec>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ca:	4453      	add	r3, sl
 800c5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ce:	f898 3000 	ldrb.w	r3, [r8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 80ba 	beq.w	800c74c <_vfiprintf_r+0x1ec>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	9307      	str	r3, [sp, #28]
 800c5e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ec:	46a8      	mov	r8, r5
 800c5ee:	2205      	movs	r2, #5
 800c5f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c5f4:	485e      	ldr	r0, [pc, #376]	; (800c770 <_vfiprintf_r+0x210>)
 800c5f6:	f7f3 fdf3 	bl	80001e0 <memchr>
 800c5fa:	9b04      	ldr	r3, [sp, #16]
 800c5fc:	bb78      	cbnz	r0, 800c65e <_vfiprintf_r+0xfe>
 800c5fe:	06d9      	lsls	r1, r3, #27
 800c600:	bf44      	itt	mi
 800c602:	2220      	movmi	r2, #32
 800c604:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c608:	071a      	lsls	r2, r3, #28
 800c60a:	bf44      	itt	mi
 800c60c:	222b      	movmi	r2, #43	; 0x2b
 800c60e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c612:	782a      	ldrb	r2, [r5, #0]
 800c614:	2a2a      	cmp	r2, #42	; 0x2a
 800c616:	d02a      	beq.n	800c66e <_vfiprintf_r+0x10e>
 800c618:	9a07      	ldr	r2, [sp, #28]
 800c61a:	46a8      	mov	r8, r5
 800c61c:	2000      	movs	r0, #0
 800c61e:	250a      	movs	r5, #10
 800c620:	4641      	mov	r1, r8
 800c622:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c626:	3b30      	subs	r3, #48	; 0x30
 800c628:	2b09      	cmp	r3, #9
 800c62a:	d969      	bls.n	800c700 <_vfiprintf_r+0x1a0>
 800c62c:	b360      	cbz	r0, 800c688 <_vfiprintf_r+0x128>
 800c62e:	e024      	b.n	800c67a <_vfiprintf_r+0x11a>
 800c630:	4b50      	ldr	r3, [pc, #320]	; (800c774 <_vfiprintf_r+0x214>)
 800c632:	429c      	cmp	r4, r3
 800c634:	d101      	bne.n	800c63a <_vfiprintf_r+0xda>
 800c636:	68b4      	ldr	r4, [r6, #8]
 800c638:	e7a2      	b.n	800c580 <_vfiprintf_r+0x20>
 800c63a:	4b4f      	ldr	r3, [pc, #316]	; (800c778 <_vfiprintf_r+0x218>)
 800c63c:	429c      	cmp	r4, r3
 800c63e:	bf08      	it	eq
 800c640:	68f4      	ldreq	r4, [r6, #12]
 800c642:	e79d      	b.n	800c580 <_vfiprintf_r+0x20>
 800c644:	4621      	mov	r1, r4
 800c646:	4630      	mov	r0, r6
 800c648:	f7fd fd72 	bl	800a130 <__swsetup_r>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d09d      	beq.n	800c58c <_vfiprintf_r+0x2c>
 800c650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c654:	b01d      	add	sp, #116	; 0x74
 800c656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65a:	46a8      	mov	r8, r5
 800c65c:	e7a2      	b.n	800c5a4 <_vfiprintf_r+0x44>
 800c65e:	4a44      	ldr	r2, [pc, #272]	; (800c770 <_vfiprintf_r+0x210>)
 800c660:	1a80      	subs	r0, r0, r2
 800c662:	fa0b f000 	lsl.w	r0, fp, r0
 800c666:	4318      	orrs	r0, r3
 800c668:	9004      	str	r0, [sp, #16]
 800c66a:	4645      	mov	r5, r8
 800c66c:	e7be      	b.n	800c5ec <_vfiprintf_r+0x8c>
 800c66e:	9a03      	ldr	r2, [sp, #12]
 800c670:	1d11      	adds	r1, r2, #4
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	9103      	str	r1, [sp, #12]
 800c676:	2a00      	cmp	r2, #0
 800c678:	db01      	blt.n	800c67e <_vfiprintf_r+0x11e>
 800c67a:	9207      	str	r2, [sp, #28]
 800c67c:	e004      	b.n	800c688 <_vfiprintf_r+0x128>
 800c67e:	4252      	negs	r2, r2
 800c680:	f043 0302 	orr.w	r3, r3, #2
 800c684:	9207      	str	r2, [sp, #28]
 800c686:	9304      	str	r3, [sp, #16]
 800c688:	f898 3000 	ldrb.w	r3, [r8]
 800c68c:	2b2e      	cmp	r3, #46	; 0x2e
 800c68e:	d10e      	bne.n	800c6ae <_vfiprintf_r+0x14e>
 800c690:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c694:	2b2a      	cmp	r3, #42	; 0x2a
 800c696:	d138      	bne.n	800c70a <_vfiprintf_r+0x1aa>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	1d1a      	adds	r2, r3, #4
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	9203      	str	r2, [sp, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bfb8      	it	lt
 800c6a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6a8:	f108 0802 	add.w	r8, r8, #2
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	4d33      	ldr	r5, [pc, #204]	; (800c77c <_vfiprintf_r+0x21c>)
 800c6b0:	f898 1000 	ldrb.w	r1, [r8]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f7f3 fd92 	bl	80001e0 <memchr>
 800c6bc:	b140      	cbz	r0, 800c6d0 <_vfiprintf_r+0x170>
 800c6be:	2340      	movs	r3, #64	; 0x40
 800c6c0:	1b40      	subs	r0, r0, r5
 800c6c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c6c6:	9b04      	ldr	r3, [sp, #16]
 800c6c8:	4303      	orrs	r3, r0
 800c6ca:	f108 0801 	add.w	r8, r8, #1
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	f898 1000 	ldrb.w	r1, [r8]
 800c6d4:	482a      	ldr	r0, [pc, #168]	; (800c780 <_vfiprintf_r+0x220>)
 800c6d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6da:	2206      	movs	r2, #6
 800c6dc:	f108 0701 	add.w	r7, r8, #1
 800c6e0:	f7f3 fd7e 	bl	80001e0 <memchr>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d037      	beq.n	800c758 <_vfiprintf_r+0x1f8>
 800c6e8:	4b26      	ldr	r3, [pc, #152]	; (800c784 <_vfiprintf_r+0x224>)
 800c6ea:	bb1b      	cbnz	r3, 800c734 <_vfiprintf_r+0x1d4>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	3307      	adds	r3, #7
 800c6f0:	f023 0307 	bic.w	r3, r3, #7
 800c6f4:	3308      	adds	r3, #8
 800c6f6:	9303      	str	r3, [sp, #12]
 800c6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6fa:	444b      	add	r3, r9
 800c6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fe:	e750      	b.n	800c5a2 <_vfiprintf_r+0x42>
 800c700:	fb05 3202 	mla	r2, r5, r2, r3
 800c704:	2001      	movs	r0, #1
 800c706:	4688      	mov	r8, r1
 800c708:	e78a      	b.n	800c620 <_vfiprintf_r+0xc0>
 800c70a:	2300      	movs	r3, #0
 800c70c:	f108 0801 	add.w	r8, r8, #1
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	4619      	mov	r1, r3
 800c714:	250a      	movs	r5, #10
 800c716:	4640      	mov	r0, r8
 800c718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c71c:	3a30      	subs	r2, #48	; 0x30
 800c71e:	2a09      	cmp	r2, #9
 800c720:	d903      	bls.n	800c72a <_vfiprintf_r+0x1ca>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0c3      	beq.n	800c6ae <_vfiprintf_r+0x14e>
 800c726:	9105      	str	r1, [sp, #20]
 800c728:	e7c1      	b.n	800c6ae <_vfiprintf_r+0x14e>
 800c72a:	fb05 2101 	mla	r1, r5, r1, r2
 800c72e:	2301      	movs	r3, #1
 800c730:	4680      	mov	r8, r0
 800c732:	e7f0      	b.n	800c716 <_vfiprintf_r+0x1b6>
 800c734:	ab03      	add	r3, sp, #12
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	4622      	mov	r2, r4
 800c73a:	4b13      	ldr	r3, [pc, #76]	; (800c788 <_vfiprintf_r+0x228>)
 800c73c:	a904      	add	r1, sp, #16
 800c73e:	4630      	mov	r0, r6
 800c740:	f7fb fef2 	bl	8008528 <_printf_float>
 800c744:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c748:	4681      	mov	r9, r0
 800c74a:	d1d5      	bne.n	800c6f8 <_vfiprintf_r+0x198>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	065b      	lsls	r3, r3, #25
 800c750:	f53f af7e 	bmi.w	800c650 <_vfiprintf_r+0xf0>
 800c754:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c756:	e77d      	b.n	800c654 <_vfiprintf_r+0xf4>
 800c758:	ab03      	add	r3, sp, #12
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	4622      	mov	r2, r4
 800c75e:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <_vfiprintf_r+0x228>)
 800c760:	a904      	add	r1, sp, #16
 800c762:	4630      	mov	r0, r6
 800c764:	f7fc f996 	bl	8008a94 <_printf_i>
 800c768:	e7ec      	b.n	800c744 <_vfiprintf_r+0x1e4>
 800c76a:	bf00      	nop
 800c76c:	0800e340 	.word	0x0800e340
 800c770:	0800e48c 	.word	0x0800e48c
 800c774:	0800e360 	.word	0x0800e360
 800c778:	0800e320 	.word	0x0800e320
 800c77c:	0800e492 	.word	0x0800e492
 800c780:	0800e496 	.word	0x0800e496
 800c784:	08008529 	.word	0x08008529
 800c788:	0800c53b 	.word	0x0800c53b

0800c78c <_sbrk_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4c06      	ldr	r4, [pc, #24]	; (800c7a8 <_sbrk_r+0x1c>)
 800c790:	2300      	movs	r3, #0
 800c792:	4605      	mov	r5, r0
 800c794:	4608      	mov	r0, r1
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	f7f5 fd56 	bl	8002248 <_sbrk>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d102      	bne.n	800c7a6 <_sbrk_r+0x1a>
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	b103      	cbz	r3, 800c7a6 <_sbrk_r+0x1a>
 800c7a4:	602b      	str	r3, [r5, #0]
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	200005fc 	.word	0x200005fc

0800c7ac <__sread>:
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b4:	f000 f8f4 	bl	800c9a0 <_read_r>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	bfab      	itete	ge
 800c7bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7be:	89a3      	ldrhlt	r3, [r4, #12]
 800c7c0:	181b      	addge	r3, r3, r0
 800c7c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7c6:	bfac      	ite	ge
 800c7c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7ca:	81a3      	strhlt	r3, [r4, #12]
 800c7cc:	bd10      	pop	{r4, pc}

0800c7ce <__swrite>:
 800c7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	461f      	mov	r7, r3
 800c7d4:	898b      	ldrh	r3, [r1, #12]
 800c7d6:	05db      	lsls	r3, r3, #23
 800c7d8:	4605      	mov	r5, r0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	4616      	mov	r6, r2
 800c7de:	d505      	bpl.n	800c7ec <__swrite+0x1e>
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e8:	f000 f886 	bl	800c8f8 <_lseek_r>
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7f6:	81a3      	strh	r3, [r4, #12]
 800c7f8:	4632      	mov	r2, r6
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c802:	f000 b835 	b.w	800c870 <_write_r>

0800c806 <__sseek>:
 800c806:	b510      	push	{r4, lr}
 800c808:	460c      	mov	r4, r1
 800c80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c80e:	f000 f873 	bl	800c8f8 <_lseek_r>
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	89a3      	ldrh	r3, [r4, #12]
 800c816:	bf15      	itete	ne
 800c818:	6560      	strne	r0, [r4, #84]	; 0x54
 800c81a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c81e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c822:	81a3      	strheq	r3, [r4, #12]
 800c824:	bf18      	it	ne
 800c826:	81a3      	strhne	r3, [r4, #12]
 800c828:	bd10      	pop	{r4, pc}

0800c82a <__sclose>:
 800c82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82e:	f000 b831 	b.w	800c894 <_close_r>

0800c832 <strncmp>:
 800c832:	b510      	push	{r4, lr}
 800c834:	b16a      	cbz	r2, 800c852 <strncmp+0x20>
 800c836:	3901      	subs	r1, #1
 800c838:	1884      	adds	r4, r0, r2
 800c83a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c83e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c842:	4293      	cmp	r3, r2
 800c844:	d103      	bne.n	800c84e <strncmp+0x1c>
 800c846:	42a0      	cmp	r0, r4
 800c848:	d001      	beq.n	800c84e <strncmp+0x1c>
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1f5      	bne.n	800c83a <strncmp+0x8>
 800c84e:	1a98      	subs	r0, r3, r2
 800c850:	bd10      	pop	{r4, pc}
 800c852:	4610      	mov	r0, r2
 800c854:	e7fc      	b.n	800c850 <strncmp+0x1e>

0800c856 <__ascii_wctomb>:
 800c856:	b149      	cbz	r1, 800c86c <__ascii_wctomb+0x16>
 800c858:	2aff      	cmp	r2, #255	; 0xff
 800c85a:	bf85      	ittet	hi
 800c85c:	238a      	movhi	r3, #138	; 0x8a
 800c85e:	6003      	strhi	r3, [r0, #0]
 800c860:	700a      	strbls	r2, [r1, #0]
 800c862:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c866:	bf98      	it	ls
 800c868:	2001      	movls	r0, #1
 800c86a:	4770      	bx	lr
 800c86c:	4608      	mov	r0, r1
 800c86e:	4770      	bx	lr

0800c870 <_write_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4c07      	ldr	r4, [pc, #28]	; (800c890 <_write_r+0x20>)
 800c874:	4605      	mov	r5, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	6022      	str	r2, [r4, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f5 fc91 	bl	80021a6 <_write>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_write_r+0x1e>
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_write_r+0x1e>
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	200005fc 	.word	0x200005fc

0800c894 <_close_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4c06      	ldr	r4, [pc, #24]	; (800c8b0 <_close_r+0x1c>)
 800c898:	2300      	movs	r3, #0
 800c89a:	4605      	mov	r5, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	f7f5 fc9d 	bl	80021de <_close>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_close_r+0x1a>
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_close_r+0x1a>
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	200005fc 	.word	0x200005fc

0800c8b4 <_fstat_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4c07      	ldr	r4, [pc, #28]	; (800c8d4 <_fstat_r+0x20>)
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	4608      	mov	r0, r1
 800c8be:	4611      	mov	r1, r2
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	f7f5 fc98 	bl	80021f6 <_fstat>
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	d102      	bne.n	800c8d0 <_fstat_r+0x1c>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	b103      	cbz	r3, 800c8d0 <_fstat_r+0x1c>
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	bd38      	pop	{r3, r4, r5, pc}
 800c8d2:	bf00      	nop
 800c8d4:	200005fc 	.word	0x200005fc

0800c8d8 <_isatty_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4c06      	ldr	r4, [pc, #24]	; (800c8f4 <_isatty_r+0x1c>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4605      	mov	r5, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	6023      	str	r3, [r4, #0]
 800c8e4:	f7f5 fc97 	bl	8002216 <_isatty>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_isatty_r+0x1a>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_isatty_r+0x1a>
 800c8f0:	602b      	str	r3, [r5, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	200005fc 	.word	0x200005fc

0800c8f8 <_lseek_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4c07      	ldr	r4, [pc, #28]	; (800c918 <_lseek_r+0x20>)
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	4608      	mov	r0, r1
 800c900:	4611      	mov	r1, r2
 800c902:	2200      	movs	r2, #0
 800c904:	6022      	str	r2, [r4, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	f7f5 fc90 	bl	800222c <_lseek>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_lseek_r+0x1e>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	b103      	cbz	r3, 800c916 <_lseek_r+0x1e>
 800c914:	602b      	str	r3, [r5, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	200005fc 	.word	0x200005fc

0800c91c <memmove>:
 800c91c:	4288      	cmp	r0, r1
 800c91e:	b510      	push	{r4, lr}
 800c920:	eb01 0302 	add.w	r3, r1, r2
 800c924:	d807      	bhi.n	800c936 <memmove+0x1a>
 800c926:	1e42      	subs	r2, r0, #1
 800c928:	4299      	cmp	r1, r3
 800c92a:	d00a      	beq.n	800c942 <memmove+0x26>
 800c92c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c930:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c934:	e7f8      	b.n	800c928 <memmove+0xc>
 800c936:	4283      	cmp	r3, r0
 800c938:	d9f5      	bls.n	800c926 <memmove+0xa>
 800c93a:	1881      	adds	r1, r0, r2
 800c93c:	1ad2      	subs	r2, r2, r3
 800c93e:	42d3      	cmn	r3, r2
 800c940:	d100      	bne.n	800c944 <memmove+0x28>
 800c942:	bd10      	pop	{r4, pc}
 800c944:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c948:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c94c:	e7f7      	b.n	800c93e <memmove+0x22>

0800c94e <__malloc_lock>:
 800c94e:	4770      	bx	lr

0800c950 <__malloc_unlock>:
 800c950:	4770      	bx	lr

0800c952 <_realloc_r>:
 800c952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c954:	4607      	mov	r7, r0
 800c956:	4614      	mov	r4, r2
 800c958:	460e      	mov	r6, r1
 800c95a:	b921      	cbnz	r1, 800c966 <_realloc_r+0x14>
 800c95c:	4611      	mov	r1, r2
 800c95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c962:	f7ff bc27 	b.w	800c1b4 <_malloc_r>
 800c966:	b922      	cbnz	r2, 800c972 <_realloc_r+0x20>
 800c968:	f7ff fbd6 	bl	800c118 <_free_r>
 800c96c:	4625      	mov	r5, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c972:	f000 f827 	bl	800c9c4 <_malloc_usable_size_r>
 800c976:	42a0      	cmp	r0, r4
 800c978:	d20f      	bcs.n	800c99a <_realloc_r+0x48>
 800c97a:	4621      	mov	r1, r4
 800c97c:	4638      	mov	r0, r7
 800c97e:	f7ff fc19 	bl	800c1b4 <_malloc_r>
 800c982:	4605      	mov	r5, r0
 800c984:	2800      	cmp	r0, #0
 800c986:	d0f2      	beq.n	800c96e <_realloc_r+0x1c>
 800c988:	4631      	mov	r1, r6
 800c98a:	4622      	mov	r2, r4
 800c98c:	f7fb fd24 	bl	80083d8 <memcpy>
 800c990:	4631      	mov	r1, r6
 800c992:	4638      	mov	r0, r7
 800c994:	f7ff fbc0 	bl	800c118 <_free_r>
 800c998:	e7e9      	b.n	800c96e <_realloc_r+0x1c>
 800c99a:	4635      	mov	r5, r6
 800c99c:	e7e7      	b.n	800c96e <_realloc_r+0x1c>
	...

0800c9a0 <_read_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4c07      	ldr	r4, [pc, #28]	; (800c9c0 <_read_r+0x20>)
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	6022      	str	r2, [r4, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7f5 fbdc 	bl	800216c <_read>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_read_r+0x1e>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_read_r+0x1e>
 800c9bc:	602b      	str	r3, [r5, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	200005fc 	.word	0x200005fc

0800c9c4 <_malloc_usable_size_r>:
 800c9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c8:	1f18      	subs	r0, r3, #4
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bfbc      	itt	lt
 800c9ce:	580b      	ldrlt	r3, [r1, r0]
 800c9d0:	18c0      	addlt	r0, r0, r3
 800c9d2:	4770      	bx	lr
 800c9d4:	0000      	movs	r0, r0
	...

0800c9d8 <cos>:
 800c9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9da:	ec51 0b10 	vmov	r0, r1, d0
 800c9de:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <cos+0x80>)
 800c9e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	dc06      	bgt.n	800c9f6 <cos+0x1e>
 800c9e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ca50 <cos+0x78>
 800c9ec:	f000 fdd8 	bl	800d5a0 <__kernel_cos>
 800c9f0:	ec51 0b10 	vmov	r0, r1, d0
 800c9f4:	e007      	b.n	800ca06 <cos+0x2e>
 800c9f6:	4a19      	ldr	r2, [pc, #100]	; (800ca5c <cos+0x84>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	dd09      	ble.n	800ca10 <cos+0x38>
 800c9fc:	ee10 2a10 	vmov	r2, s0
 800ca00:	460b      	mov	r3, r1
 800ca02:	f7f3 fc41 	bl	8000288 <__aeabi_dsub>
 800ca06:	ec41 0b10 	vmov	d0, r0, r1
 800ca0a:	b005      	add	sp, #20
 800ca0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca10:	4668      	mov	r0, sp
 800ca12:	f000 fb21 	bl	800d058 <__ieee754_rem_pio2>
 800ca16:	f000 0003 	and.w	r0, r0, #3
 800ca1a:	2801      	cmp	r0, #1
 800ca1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca20:	ed9d 0b00 	vldr	d0, [sp]
 800ca24:	d007      	beq.n	800ca36 <cos+0x5e>
 800ca26:	2802      	cmp	r0, #2
 800ca28:	d00e      	beq.n	800ca48 <cos+0x70>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0de      	beq.n	800c9ec <cos+0x14>
 800ca2e:	2001      	movs	r0, #1
 800ca30:	f001 f9be 	bl	800ddb0 <__kernel_sin>
 800ca34:	e7dc      	b.n	800c9f0 <cos+0x18>
 800ca36:	f001 f9bb 	bl	800ddb0 <__kernel_sin>
 800ca3a:	ec53 2b10 	vmov	r2, r3, d0
 800ca3e:	ee10 0a10 	vmov	r0, s0
 800ca42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ca46:	e7de      	b.n	800ca06 <cos+0x2e>
 800ca48:	f000 fdaa 	bl	800d5a0 <__kernel_cos>
 800ca4c:	e7f5      	b.n	800ca3a <cos+0x62>
 800ca4e:	bf00      	nop
	...
 800ca58:	3fe921fb 	.word	0x3fe921fb
 800ca5c:	7fefffff 	.word	0x7fefffff

0800ca60 <sin>:
 800ca60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca62:	ec51 0b10 	vmov	r0, r1, d0
 800ca66:	4a20      	ldr	r2, [pc, #128]	; (800cae8 <sin+0x88>)
 800ca68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	dc07      	bgt.n	800ca80 <sin+0x20>
 800ca70:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800cae0 <sin+0x80>
 800ca74:	2000      	movs	r0, #0
 800ca76:	f001 f99b 	bl	800ddb0 <__kernel_sin>
 800ca7a:	ec51 0b10 	vmov	r0, r1, d0
 800ca7e:	e007      	b.n	800ca90 <sin+0x30>
 800ca80:	4a1a      	ldr	r2, [pc, #104]	; (800caec <sin+0x8c>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	dd09      	ble.n	800ca9a <sin+0x3a>
 800ca86:	ee10 2a10 	vmov	r2, s0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	f7f3 fbfc 	bl	8000288 <__aeabi_dsub>
 800ca90:	ec41 0b10 	vmov	d0, r0, r1
 800ca94:	b005      	add	sp, #20
 800ca96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca9a:	4668      	mov	r0, sp
 800ca9c:	f000 fadc 	bl	800d058 <__ieee754_rem_pio2>
 800caa0:	f000 0003 	and.w	r0, r0, #3
 800caa4:	2801      	cmp	r0, #1
 800caa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800caaa:	ed9d 0b00 	vldr	d0, [sp]
 800caae:	d004      	beq.n	800caba <sin+0x5a>
 800cab0:	2802      	cmp	r0, #2
 800cab2:	d005      	beq.n	800cac0 <sin+0x60>
 800cab4:	b970      	cbnz	r0, 800cad4 <sin+0x74>
 800cab6:	2001      	movs	r0, #1
 800cab8:	e7dd      	b.n	800ca76 <sin+0x16>
 800caba:	f000 fd71 	bl	800d5a0 <__kernel_cos>
 800cabe:	e7dc      	b.n	800ca7a <sin+0x1a>
 800cac0:	2001      	movs	r0, #1
 800cac2:	f001 f975 	bl	800ddb0 <__kernel_sin>
 800cac6:	ec53 2b10 	vmov	r2, r3, d0
 800caca:	ee10 0a10 	vmov	r0, s0
 800cace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cad2:	e7dd      	b.n	800ca90 <sin+0x30>
 800cad4:	f000 fd64 	bl	800d5a0 <__kernel_cos>
 800cad8:	e7f5      	b.n	800cac6 <sin+0x66>
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w
	...
 800cae8:	3fe921fb 	.word	0x3fe921fb
 800caec:	7fefffff 	.word	0x7fefffff

0800caf0 <acos>:
 800caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caf2:	ed2d 8b02 	vpush	{d8}
 800caf6:	4e26      	ldr	r6, [pc, #152]	; (800cb90 <acos+0xa0>)
 800caf8:	b08b      	sub	sp, #44	; 0x2c
 800cafa:	ec55 4b10 	vmov	r4, r5, d0
 800cafe:	f000 f84f 	bl	800cba0 <__ieee754_acos>
 800cb02:	f996 3000 	ldrsb.w	r3, [r6]
 800cb06:	eeb0 8a40 	vmov.f32	s16, s0
 800cb0a:	eef0 8a60 	vmov.f32	s17, s1
 800cb0e:	3301      	adds	r3, #1
 800cb10:	d036      	beq.n	800cb80 <acos+0x90>
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7f4 f807 	bl	8000b2c <__aeabi_dcmpun>
 800cb1e:	4607      	mov	r7, r0
 800cb20:	bb70      	cbnz	r0, 800cb80 <acos+0x90>
 800cb22:	ec45 4b10 	vmov	d0, r4, r5
 800cb26:	f001 f9fd 	bl	800df24 <fabs>
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	4b19      	ldr	r3, [pc, #100]	; (800cb94 <acos+0xa4>)
 800cb2e:	ec51 0b10 	vmov	r0, r1, d0
 800cb32:	f7f3 fff1 	bl	8000b18 <__aeabi_dcmpgt>
 800cb36:	b318      	cbz	r0, 800cb80 <acos+0x90>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	4816      	ldr	r0, [pc, #88]	; (800cb98 <acos+0xa8>)
 800cb3e:	4b17      	ldr	r3, [pc, #92]	; (800cb9c <acos+0xac>)
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	9708      	str	r7, [sp, #32]
 800cb44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cb48:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cb4c:	f001 fa7c 	bl	800e048 <nan>
 800cb50:	f996 3000 	ldrsb.w	r3, [r6]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	ed8d 0b06 	vstr	d0, [sp, #24]
 800cb5a:	d104      	bne.n	800cb66 <acos+0x76>
 800cb5c:	f7fb fc12 	bl	8008384 <__errno>
 800cb60:	2321      	movs	r3, #33	; 0x21
 800cb62:	6003      	str	r3, [r0, #0]
 800cb64:	e004      	b.n	800cb70 <acos+0x80>
 800cb66:	4668      	mov	r0, sp
 800cb68:	f001 fa6a 	bl	800e040 <matherr>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d0f5      	beq.n	800cb5c <acos+0x6c>
 800cb70:	9b08      	ldr	r3, [sp, #32]
 800cb72:	b11b      	cbz	r3, 800cb7c <acos+0x8c>
 800cb74:	f7fb fc06 	bl	8008384 <__errno>
 800cb78:	9b08      	ldr	r3, [sp, #32]
 800cb7a:	6003      	str	r3, [r0, #0]
 800cb7c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cb80:	eeb0 0a48 	vmov.f32	s0, s16
 800cb84:	eef0 0a68 	vmov.f32	s1, s17
 800cb88:	b00b      	add	sp, #44	; 0x2c
 800cb8a:	ecbd 8b02 	vpop	{d8}
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb90:	200001f4 	.word	0x200001f4
 800cb94:	3ff00000 	.word	0x3ff00000
 800cb98:	0800e491 	.word	0x0800e491
 800cb9c:	0800e59e 	.word	0x0800e59e

0800cba0 <__ieee754_acos>:
 800cba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	ec55 4b10 	vmov	r4, r5, d0
 800cba8:	49b7      	ldr	r1, [pc, #732]	; (800ce88 <__ieee754_acos+0x2e8>)
 800cbaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbae:	428b      	cmp	r3, r1
 800cbb0:	dd1b      	ble.n	800cbea <__ieee754_acos+0x4a>
 800cbb2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800cbb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cbba:	4323      	orrs	r3, r4
 800cbbc:	d109      	bne.n	800cbd2 <__ieee754_acos+0x32>
 800cbbe:	2d00      	cmp	r5, #0
 800cbc0:	f300 8211 	bgt.w	800cfe6 <__ieee754_acos+0x446>
 800cbc4:	a196      	add	r1, pc, #600	; (adr r1, 800ce20 <__ieee754_acos+0x280>)
 800cbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbca:	ec41 0b10 	vmov	d0, r0, r1
 800cbce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	ee10 2a10 	vmov	r2, s0
 800cbd6:	462b      	mov	r3, r5
 800cbd8:	4620      	mov	r0, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	f7f3 fe32 	bl	800084c <__aeabi_ddiv>
 800cbe8:	e7ef      	b.n	800cbca <__ieee754_acos+0x2a>
 800cbea:	49a8      	ldr	r1, [pc, #672]	; (800ce8c <__ieee754_acos+0x2ec>)
 800cbec:	428b      	cmp	r3, r1
 800cbee:	f300 8087 	bgt.w	800cd00 <__ieee754_acos+0x160>
 800cbf2:	4aa7      	ldr	r2, [pc, #668]	; (800ce90 <__ieee754_acos+0x2f0>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	f340 81f9 	ble.w	800cfec <__ieee754_acos+0x44c>
 800cbfa:	ee10 2a10 	vmov	r2, s0
 800cbfe:	ee10 0a10 	vmov	r0, s0
 800cc02:	462b      	mov	r3, r5
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 fcf7 	bl	80005f8 <__aeabi_dmul>
 800cc0a:	a387      	add	r3, pc, #540	; (adr r3, 800ce28 <__ieee754_acos+0x288>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	4606      	mov	r6, r0
 800cc12:	460f      	mov	r7, r1
 800cc14:	f7f3 fcf0 	bl	80005f8 <__aeabi_dmul>
 800cc18:	a385      	add	r3, pc, #532	; (adr r3, 800ce30 <__ieee754_acos+0x290>)
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	f7f3 fb35 	bl	800028c <__adddf3>
 800cc22:	4632      	mov	r2, r6
 800cc24:	463b      	mov	r3, r7
 800cc26:	f7f3 fce7 	bl	80005f8 <__aeabi_dmul>
 800cc2a:	a383      	add	r3, pc, #524	; (adr r3, 800ce38 <__ieee754_acos+0x298>)
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	f7f3 fb2a 	bl	8000288 <__aeabi_dsub>
 800cc34:	4632      	mov	r2, r6
 800cc36:	463b      	mov	r3, r7
 800cc38:	f7f3 fcde 	bl	80005f8 <__aeabi_dmul>
 800cc3c:	a380      	add	r3, pc, #512	; (adr r3, 800ce40 <__ieee754_acos+0x2a0>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 fb23 	bl	800028c <__adddf3>
 800cc46:	4632      	mov	r2, r6
 800cc48:	463b      	mov	r3, r7
 800cc4a:	f7f3 fcd5 	bl	80005f8 <__aeabi_dmul>
 800cc4e:	a37e      	add	r3, pc, #504	; (adr r3, 800ce48 <__ieee754_acos+0x2a8>)
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	4632      	mov	r2, r6
 800cc5a:	463b      	mov	r3, r7
 800cc5c:	f7f3 fccc 	bl	80005f8 <__aeabi_dmul>
 800cc60:	a37b      	add	r3, pc, #492	; (adr r3, 800ce50 <__ieee754_acos+0x2b0>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fb11 	bl	800028c <__adddf3>
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	463b      	mov	r3, r7
 800cc6e:	f7f3 fcc3 	bl	80005f8 <__aeabi_dmul>
 800cc72:	a379      	add	r3, pc, #484	; (adr r3, 800ce58 <__ieee754_acos+0x2b8>)
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	4680      	mov	r8, r0
 800cc7a:	4689      	mov	r9, r1
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	4639      	mov	r1, r7
 800cc80:	f7f3 fcba 	bl	80005f8 <__aeabi_dmul>
 800cc84:	a376      	add	r3, pc, #472	; (adr r3, 800ce60 <__ieee754_acos+0x2c0>)
 800cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8a:	f7f3 fafd 	bl	8000288 <__aeabi_dsub>
 800cc8e:	4632      	mov	r2, r6
 800cc90:	463b      	mov	r3, r7
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	a374      	add	r3, pc, #464	; (adr r3, 800ce68 <__ieee754_acos+0x2c8>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 faf6 	bl	800028c <__adddf3>
 800cca0:	4632      	mov	r2, r6
 800cca2:	463b      	mov	r3, r7
 800cca4:	f7f3 fca8 	bl	80005f8 <__aeabi_dmul>
 800cca8:	a371      	add	r3, pc, #452	; (adr r3, 800ce70 <__ieee754_acos+0x2d0>)
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	f7f3 faeb 	bl	8000288 <__aeabi_dsub>
 800ccb2:	4632      	mov	r2, r6
 800ccb4:	463b      	mov	r3, r7
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4b75      	ldr	r3, [pc, #468]	; (800ce94 <__ieee754_acos+0x2f4>)
 800ccbe:	f7f3 fae5 	bl	800028c <__adddf3>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	f7f3 fdbf 	bl	800084c <__aeabi_ddiv>
 800ccce:	4622      	mov	r2, r4
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	a167      	add	r1, pc, #412	; (adr r1, 800ce78 <__ieee754_acos+0x2d8>)
 800ccdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce0:	f7f3 fad2 	bl	8000288 <__aeabi_dsub>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 facc 	bl	8000288 <__aeabi_dsub>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	a162      	add	r1, pc, #392	; (adr r1, 800ce80 <__ieee754_acos+0x2e0>)
 800ccf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccfa:	f7f3 fac5 	bl	8000288 <__aeabi_dsub>
 800ccfe:	e764      	b.n	800cbca <__ieee754_acos+0x2a>
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	f280 80cb 	bge.w	800ce9c <__ieee754_acos+0x2fc>
 800cd06:	ee10 0a10 	vmov	r0, s0
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	4b61      	ldr	r3, [pc, #388]	; (800ce94 <__ieee754_acos+0x2f4>)
 800cd0e:	4629      	mov	r1, r5
 800cd10:	f7f3 fabc 	bl	800028c <__adddf3>
 800cd14:	2200      	movs	r2, #0
 800cd16:	4b60      	ldr	r3, [pc, #384]	; (800ce98 <__ieee754_acos+0x2f8>)
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	a342      	add	r3, pc, #264	; (adr r3, 800ce28 <__ieee754_acos+0x288>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	f7f3 fc67 	bl	80005f8 <__aeabi_dmul>
 800cd2a:	a341      	add	r3, pc, #260	; (adr r3, 800ce30 <__ieee754_acos+0x290>)
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	f7f3 faac 	bl	800028c <__adddf3>
 800cd34:	4622      	mov	r2, r4
 800cd36:	462b      	mov	r3, r5
 800cd38:	f7f3 fc5e 	bl	80005f8 <__aeabi_dmul>
 800cd3c:	a33e      	add	r3, pc, #248	; (adr r3, 800ce38 <__ieee754_acos+0x298>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f7f3 faa1 	bl	8000288 <__aeabi_dsub>
 800cd46:	4622      	mov	r2, r4
 800cd48:	462b      	mov	r3, r5
 800cd4a:	f7f3 fc55 	bl	80005f8 <__aeabi_dmul>
 800cd4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ce40 <__ieee754_acos+0x2a0>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fa9a 	bl	800028c <__adddf3>
 800cd58:	4622      	mov	r2, r4
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	f7f3 fc4c 	bl	80005f8 <__aeabi_dmul>
 800cd60:	a339      	add	r3, pc, #228	; (adr r3, 800ce48 <__ieee754_acos+0x2a8>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fa8f 	bl	8000288 <__aeabi_dsub>
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	f7f3 fc43 	bl	80005f8 <__aeabi_dmul>
 800cd72:	a337      	add	r3, pc, #220	; (adr r3, 800ce50 <__ieee754_acos+0x2b0>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 fa88 	bl	800028c <__adddf3>
 800cd7c:	4622      	mov	r2, r4
 800cd7e:	462b      	mov	r3, r5
 800cd80:	f7f3 fc3a 	bl	80005f8 <__aeabi_dmul>
 800cd84:	ec45 4b10 	vmov	d0, r4, r5
 800cd88:	4680      	mov	r8, r0
 800cd8a:	4689      	mov	r9, r1
 800cd8c:	f000 fb56 	bl	800d43c <__ieee754_sqrt>
 800cd90:	a331      	add	r3, pc, #196	; (adr r3, 800ce58 <__ieee754_acos+0x2b8>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	4620      	mov	r0, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	ec57 6b10 	vmov	r6, r7, d0
 800cd9e:	f7f3 fc2b 	bl	80005f8 <__aeabi_dmul>
 800cda2:	a32f      	add	r3, pc, #188	; (adr r3, 800ce60 <__ieee754_acos+0x2c0>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f3 fa6e 	bl	8000288 <__aeabi_dsub>
 800cdac:	4622      	mov	r2, r4
 800cdae:	462b      	mov	r3, r5
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	a32c      	add	r3, pc, #176	; (adr r3, 800ce68 <__ieee754_acos+0x2c8>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7f3 fa67 	bl	800028c <__adddf3>
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	462b      	mov	r3, r5
 800cdc2:	f7f3 fc19 	bl	80005f8 <__aeabi_dmul>
 800cdc6:	a32a      	add	r3, pc, #168	; (adr r3, 800ce70 <__ieee754_acos+0x2d0>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	f7f3 fa5c 	bl	8000288 <__aeabi_dsub>
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	f7f3 fc10 	bl	80005f8 <__aeabi_dmul>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4b2e      	ldr	r3, [pc, #184]	; (800ce94 <__ieee754_acos+0x2f4>)
 800cddc:	f7f3 fa56 	bl	800028c <__adddf3>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4640      	mov	r0, r8
 800cde6:	4649      	mov	r1, r9
 800cde8:	f7f3 fd30 	bl	800084c <__aeabi_ddiv>
 800cdec:	4632      	mov	r2, r6
 800cdee:	463b      	mov	r3, r7
 800cdf0:	f7f3 fc02 	bl	80005f8 <__aeabi_dmul>
 800cdf4:	a320      	add	r3, pc, #128	; (adr r3, 800ce78 <__ieee754_acos+0x2d8>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	f7f3 fa45 	bl	8000288 <__aeabi_dsub>
 800cdfe:	4632      	mov	r2, r6
 800ce00:	463b      	mov	r3, r7
 800ce02:	f7f3 fa43 	bl	800028c <__adddf3>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	f7f3 fa3f 	bl	800028c <__adddf3>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	a103      	add	r1, pc, #12	; (adr r1, 800ce20 <__ieee754_acos+0x280>)
 800ce14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce18:	e76f      	b.n	800ccfa <__ieee754_acos+0x15a>
 800ce1a:	bf00      	nop
 800ce1c:	f3af 8000 	nop.w
 800ce20:	54442d18 	.word	0x54442d18
 800ce24:	400921fb 	.word	0x400921fb
 800ce28:	0dfdf709 	.word	0x0dfdf709
 800ce2c:	3f023de1 	.word	0x3f023de1
 800ce30:	7501b288 	.word	0x7501b288
 800ce34:	3f49efe0 	.word	0x3f49efe0
 800ce38:	b5688f3b 	.word	0xb5688f3b
 800ce3c:	3fa48228 	.word	0x3fa48228
 800ce40:	0e884455 	.word	0x0e884455
 800ce44:	3fc9c155 	.word	0x3fc9c155
 800ce48:	03eb6f7d 	.word	0x03eb6f7d
 800ce4c:	3fd4d612 	.word	0x3fd4d612
 800ce50:	55555555 	.word	0x55555555
 800ce54:	3fc55555 	.word	0x3fc55555
 800ce58:	b12e9282 	.word	0xb12e9282
 800ce5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ce60:	1b8d0159 	.word	0x1b8d0159
 800ce64:	3fe6066c 	.word	0x3fe6066c
 800ce68:	9c598ac8 	.word	0x9c598ac8
 800ce6c:	40002ae5 	.word	0x40002ae5
 800ce70:	1c8a2d4b 	.word	0x1c8a2d4b
 800ce74:	40033a27 	.word	0x40033a27
 800ce78:	33145c07 	.word	0x33145c07
 800ce7c:	3c91a626 	.word	0x3c91a626
 800ce80:	54442d18 	.word	0x54442d18
 800ce84:	3ff921fb 	.word	0x3ff921fb
 800ce88:	3fefffff 	.word	0x3fefffff
 800ce8c:	3fdfffff 	.word	0x3fdfffff
 800ce90:	3c600000 	.word	0x3c600000
 800ce94:	3ff00000 	.word	0x3ff00000
 800ce98:	3fe00000 	.word	0x3fe00000
 800ce9c:	ee10 2a10 	vmov	r2, s0
 800cea0:	462b      	mov	r3, r5
 800cea2:	2000      	movs	r0, #0
 800cea4:	496a      	ldr	r1, [pc, #424]	; (800d050 <__ieee754_acos+0x4b0>)
 800cea6:	f7f3 f9ef 	bl	8000288 <__aeabi_dsub>
 800ceaa:	2200      	movs	r2, #0
 800ceac:	4b69      	ldr	r3, [pc, #420]	; (800d054 <__ieee754_acos+0x4b4>)
 800ceae:	f7f3 fba3 	bl	80005f8 <__aeabi_dmul>
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	ec45 4b10 	vmov	d0, r4, r5
 800ceba:	f000 fabf 	bl	800d43c <__ieee754_sqrt>
 800cebe:	a34e      	add	r3, pc, #312	; (adr r3, 800cff8 <__ieee754_acos+0x458>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	4620      	mov	r0, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	ec59 8b10 	vmov	r8, r9, d0
 800cecc:	f7f3 fb94 	bl	80005f8 <__aeabi_dmul>
 800ced0:	a34b      	add	r3, pc, #300	; (adr r3, 800d000 <__ieee754_acos+0x460>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	f7f3 f9d9 	bl	800028c <__adddf3>
 800ceda:	4622      	mov	r2, r4
 800cedc:	462b      	mov	r3, r5
 800cede:	f7f3 fb8b 	bl	80005f8 <__aeabi_dmul>
 800cee2:	a349      	add	r3, pc, #292	; (adr r3, 800d008 <__ieee754_acos+0x468>)
 800cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee8:	f7f3 f9ce 	bl	8000288 <__aeabi_dsub>
 800ceec:	4622      	mov	r2, r4
 800ceee:	462b      	mov	r3, r5
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	a346      	add	r3, pc, #280	; (adr r3, 800d010 <__ieee754_acos+0x470>)
 800cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefa:	f7f3 f9c7 	bl	800028c <__adddf3>
 800cefe:	4622      	mov	r2, r4
 800cf00:	462b      	mov	r3, r5
 800cf02:	f7f3 fb79 	bl	80005f8 <__aeabi_dmul>
 800cf06:	a344      	add	r3, pc, #272	; (adr r3, 800d018 <__ieee754_acos+0x478>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	f7f3 f9bc 	bl	8000288 <__aeabi_dsub>
 800cf10:	4622      	mov	r2, r4
 800cf12:	462b      	mov	r3, r5
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	a341      	add	r3, pc, #260	; (adr r3, 800d020 <__ieee754_acos+0x480>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 f9b5 	bl	800028c <__adddf3>
 800cf22:	4622      	mov	r2, r4
 800cf24:	462b      	mov	r3, r5
 800cf26:	f7f3 fb67 	bl	80005f8 <__aeabi_dmul>
 800cf2a:	a33f      	add	r3, pc, #252	; (adr r3, 800d028 <__ieee754_acos+0x488>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	4682      	mov	sl, r0
 800cf32:	468b      	mov	fp, r1
 800cf34:	4620      	mov	r0, r4
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 fb5e 	bl	80005f8 <__aeabi_dmul>
 800cf3c:	a33c      	add	r3, pc, #240	; (adr r3, 800d030 <__ieee754_acos+0x490>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7f3 f9a1 	bl	8000288 <__aeabi_dsub>
 800cf46:	4622      	mov	r2, r4
 800cf48:	462b      	mov	r3, r5
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	a33a      	add	r3, pc, #232	; (adr r3, 800d038 <__ieee754_acos+0x498>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 f99a 	bl	800028c <__adddf3>
 800cf58:	4622      	mov	r2, r4
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	f7f3 fb4c 	bl	80005f8 <__aeabi_dmul>
 800cf60:	a337      	add	r3, pc, #220	; (adr r3, 800d040 <__ieee754_acos+0x4a0>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 f98f 	bl	8000288 <__aeabi_dsub>
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	f7f3 fb43 	bl	80005f8 <__aeabi_dmul>
 800cf72:	2200      	movs	r2, #0
 800cf74:	4b36      	ldr	r3, [pc, #216]	; (800d050 <__ieee754_acos+0x4b0>)
 800cf76:	f7f3 f989 	bl	800028c <__adddf3>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4650      	mov	r0, sl
 800cf80:	4659      	mov	r1, fp
 800cf82:	f7f3 fc63 	bl	800084c <__aeabi_ddiv>
 800cf86:	4642      	mov	r2, r8
 800cf88:	464b      	mov	r3, r9
 800cf8a:	f7f3 fb35 	bl	80005f8 <__aeabi_dmul>
 800cf8e:	2600      	movs	r6, #0
 800cf90:	4682      	mov	sl, r0
 800cf92:	468b      	mov	fp, r1
 800cf94:	4632      	mov	r2, r6
 800cf96:	464b      	mov	r3, r9
 800cf98:	4630      	mov	r0, r6
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	f7f3 fb2c 	bl	80005f8 <__aeabi_dmul>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 f96e 	bl	8000288 <__aeabi_dsub>
 800cfac:	4632      	mov	r2, r6
 800cfae:	4604      	mov	r4, r0
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	464b      	mov	r3, r9
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	4649      	mov	r1, r9
 800cfb8:	f7f3 f968 	bl	800028c <__adddf3>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f7f3 fc42 	bl	800084c <__aeabi_ddiv>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4650      	mov	r0, sl
 800cfce:	4659      	mov	r1, fp
 800cfd0:	f7f3 f95c 	bl	800028c <__adddf3>
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	f7f3 f958 	bl	800028c <__adddf3>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	f7f3 f954 	bl	800028c <__adddf3>
 800cfe4:	e5f1      	b.n	800cbca <__ieee754_acos+0x2a>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	2100      	movs	r1, #0
 800cfea:	e5ee      	b.n	800cbca <__ieee754_acos+0x2a>
 800cfec:	a116      	add	r1, pc, #88	; (adr r1, 800d048 <__ieee754_acos+0x4a8>)
 800cfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cff2:	e5ea      	b.n	800cbca <__ieee754_acos+0x2a>
 800cff4:	f3af 8000 	nop.w
 800cff8:	0dfdf709 	.word	0x0dfdf709
 800cffc:	3f023de1 	.word	0x3f023de1
 800d000:	7501b288 	.word	0x7501b288
 800d004:	3f49efe0 	.word	0x3f49efe0
 800d008:	b5688f3b 	.word	0xb5688f3b
 800d00c:	3fa48228 	.word	0x3fa48228
 800d010:	0e884455 	.word	0x0e884455
 800d014:	3fc9c155 	.word	0x3fc9c155
 800d018:	03eb6f7d 	.word	0x03eb6f7d
 800d01c:	3fd4d612 	.word	0x3fd4d612
 800d020:	55555555 	.word	0x55555555
 800d024:	3fc55555 	.word	0x3fc55555
 800d028:	b12e9282 	.word	0xb12e9282
 800d02c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d030:	1b8d0159 	.word	0x1b8d0159
 800d034:	3fe6066c 	.word	0x3fe6066c
 800d038:	9c598ac8 	.word	0x9c598ac8
 800d03c:	40002ae5 	.word	0x40002ae5
 800d040:	1c8a2d4b 	.word	0x1c8a2d4b
 800d044:	40033a27 	.word	0x40033a27
 800d048:	54442d18 	.word	0x54442d18
 800d04c:	3ff921fb 	.word	0x3ff921fb
 800d050:	3ff00000 	.word	0x3ff00000
 800d054:	3fe00000 	.word	0x3fe00000

0800d058 <__ieee754_rem_pio2>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	ec57 6b10 	vmov	r6, r7, d0
 800d060:	4bc3      	ldr	r3, [pc, #780]	; (800d370 <__ieee754_rem_pio2+0x318>)
 800d062:	b08d      	sub	sp, #52	; 0x34
 800d064:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d068:	4598      	cmp	r8, r3
 800d06a:	4604      	mov	r4, r0
 800d06c:	9704      	str	r7, [sp, #16]
 800d06e:	dc07      	bgt.n	800d080 <__ieee754_rem_pio2+0x28>
 800d070:	2200      	movs	r2, #0
 800d072:	2300      	movs	r3, #0
 800d074:	ed84 0b00 	vstr	d0, [r4]
 800d078:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d07c:	2500      	movs	r5, #0
 800d07e:	e027      	b.n	800d0d0 <__ieee754_rem_pio2+0x78>
 800d080:	4bbc      	ldr	r3, [pc, #752]	; (800d374 <__ieee754_rem_pio2+0x31c>)
 800d082:	4598      	cmp	r8, r3
 800d084:	dc75      	bgt.n	800d172 <__ieee754_rem_pio2+0x11a>
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	4dbb      	ldr	r5, [pc, #748]	; (800d378 <__ieee754_rem_pio2+0x320>)
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	ee10 0a10 	vmov	r0, s0
 800d090:	a3a9      	add	r3, pc, #676	; (adr r3, 800d338 <__ieee754_rem_pio2+0x2e0>)
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	4639      	mov	r1, r7
 800d098:	dd36      	ble.n	800d108 <__ieee754_rem_pio2+0xb0>
 800d09a:	f7f3 f8f5 	bl	8000288 <__aeabi_dsub>
 800d09e:	45a8      	cmp	r8, r5
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	460f      	mov	r7, r1
 800d0a4:	d018      	beq.n	800d0d8 <__ieee754_rem_pio2+0x80>
 800d0a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d340 <__ieee754_rem_pio2+0x2e8>)
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	f7f3 f8ec 	bl	8000288 <__aeabi_dsub>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	e9c4 2300 	strd	r2, r3, [r4]
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	f7f3 f8e4 	bl	8000288 <__aeabi_dsub>
 800d0c0:	a39f      	add	r3, pc, #636	; (adr r3, 800d340 <__ieee754_rem_pio2+0x2e8>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 f8df 	bl	8000288 <__aeabi_dsub>
 800d0ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0ce:	2501      	movs	r5, #1
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	b00d      	add	sp, #52	; 0x34
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	a39b      	add	r3, pc, #620	; (adr r3, 800d348 <__ieee754_rem_pio2+0x2f0>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	a39b      	add	r3, pc, #620	; (adr r3, 800d350 <__ieee754_rem_pio2+0x2f8>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	460f      	mov	r7, r1
 800d0ec:	f7f3 f8cc 	bl	8000288 <__aeabi_dsub>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	e9c4 2300 	strd	r2, r3, [r4]
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 f8c4 	bl	8000288 <__aeabi_dsub>
 800d100:	a393      	add	r3, pc, #588	; (adr r3, 800d350 <__ieee754_rem_pio2+0x2f8>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	e7de      	b.n	800d0c6 <__ieee754_rem_pio2+0x6e>
 800d108:	f7f3 f8c0 	bl	800028c <__adddf3>
 800d10c:	45a8      	cmp	r8, r5
 800d10e:	4606      	mov	r6, r0
 800d110:	460f      	mov	r7, r1
 800d112:	d016      	beq.n	800d142 <__ieee754_rem_pio2+0xea>
 800d114:	a38a      	add	r3, pc, #552	; (adr r3, 800d340 <__ieee754_rem_pio2+0x2e8>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 f8b7 	bl	800028c <__adddf3>
 800d11e:	4602      	mov	r2, r0
 800d120:	460b      	mov	r3, r1
 800d122:	e9c4 2300 	strd	r2, r3, [r4]
 800d126:	4630      	mov	r0, r6
 800d128:	4639      	mov	r1, r7
 800d12a:	f7f3 f8ad 	bl	8000288 <__aeabi_dsub>
 800d12e:	a384      	add	r3, pc, #528	; (adr r3, 800d340 <__ieee754_rem_pio2+0x2e8>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	f7f3 f8aa 	bl	800028c <__adddf3>
 800d138:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d13c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d140:	e7c6      	b.n	800d0d0 <__ieee754_rem_pio2+0x78>
 800d142:	a381      	add	r3, pc, #516	; (adr r3, 800d348 <__ieee754_rem_pio2+0x2f0>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8a0 	bl	800028c <__adddf3>
 800d14c:	a380      	add	r3, pc, #512	; (adr r3, 800d350 <__ieee754_rem_pio2+0x2f8>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	4606      	mov	r6, r0
 800d154:	460f      	mov	r7, r1
 800d156:	f7f3 f899 	bl	800028c <__adddf3>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	e9c4 2300 	strd	r2, r3, [r4]
 800d162:	4630      	mov	r0, r6
 800d164:	4639      	mov	r1, r7
 800d166:	f7f3 f88f 	bl	8000288 <__aeabi_dsub>
 800d16a:	a379      	add	r3, pc, #484	; (adr r3, 800d350 <__ieee754_rem_pio2+0x2f8>)
 800d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d170:	e7e0      	b.n	800d134 <__ieee754_rem_pio2+0xdc>
 800d172:	4b82      	ldr	r3, [pc, #520]	; (800d37c <__ieee754_rem_pio2+0x324>)
 800d174:	4598      	cmp	r8, r3
 800d176:	f300 80d0 	bgt.w	800d31a <__ieee754_rem_pio2+0x2c2>
 800d17a:	f000 fed3 	bl	800df24 <fabs>
 800d17e:	ec57 6b10 	vmov	r6, r7, d0
 800d182:	ee10 0a10 	vmov	r0, s0
 800d186:	a374      	add	r3, pc, #464	; (adr r3, 800d358 <__ieee754_rem_pio2+0x300>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	4639      	mov	r1, r7
 800d18e:	f7f3 fa33 	bl	80005f8 <__aeabi_dmul>
 800d192:	2200      	movs	r2, #0
 800d194:	4b7a      	ldr	r3, [pc, #488]	; (800d380 <__ieee754_rem_pio2+0x328>)
 800d196:	f7f3 f879 	bl	800028c <__adddf3>
 800d19a:	f7f3 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800d19e:	4605      	mov	r5, r0
 800d1a0:	f7f3 f9c0 	bl	8000524 <__aeabi_i2d>
 800d1a4:	a364      	add	r3, pc, #400	; (adr r3, 800d338 <__ieee754_rem_pio2+0x2e0>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1ae:	f7f3 fa23 	bl	80005f8 <__aeabi_dmul>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	4639      	mov	r1, r7
 800d1ba:	f7f3 f865 	bl	8000288 <__aeabi_dsub>
 800d1be:	a360      	add	r3, pc, #384	; (adr r3, 800d340 <__ieee754_rem_pio2+0x2e8>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	4682      	mov	sl, r0
 800d1c6:	468b      	mov	fp, r1
 800d1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1cc:	f7f3 fa14 	bl	80005f8 <__aeabi_dmul>
 800d1d0:	2d1f      	cmp	r5, #31
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	dc0c      	bgt.n	800d1f2 <__ieee754_rem_pio2+0x19a>
 800d1d8:	1e6a      	subs	r2, r5, #1
 800d1da:	4b6a      	ldr	r3, [pc, #424]	; (800d384 <__ieee754_rem_pio2+0x32c>)
 800d1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e0:	4543      	cmp	r3, r8
 800d1e2:	d006      	beq.n	800d1f2 <__ieee754_rem_pio2+0x19a>
 800d1e4:	4632      	mov	r2, r6
 800d1e6:	463b      	mov	r3, r7
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	4659      	mov	r1, fp
 800d1ec:	f7f3 f84c 	bl	8000288 <__aeabi_dsub>
 800d1f0:	e00e      	b.n	800d210 <__ieee754_rem_pio2+0x1b8>
 800d1f2:	4632      	mov	r2, r6
 800d1f4:	463b      	mov	r3, r7
 800d1f6:	4650      	mov	r0, sl
 800d1f8:	4659      	mov	r1, fp
 800d1fa:	f7f3 f845 	bl	8000288 <__aeabi_dsub>
 800d1fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d202:	9305      	str	r3, [sp, #20]
 800d204:	9a05      	ldr	r2, [sp, #20]
 800d206:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	2b10      	cmp	r3, #16
 800d20e:	dc02      	bgt.n	800d216 <__ieee754_rem_pio2+0x1be>
 800d210:	e9c4 0100 	strd	r0, r1, [r4]
 800d214:	e039      	b.n	800d28a <__ieee754_rem_pio2+0x232>
 800d216:	a34c      	add	r3, pc, #304	; (adr r3, 800d348 <__ieee754_rem_pio2+0x2f0>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d220:	f7f3 f9ea 	bl	80005f8 <__aeabi_dmul>
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4650      	mov	r0, sl
 800d22e:	4659      	mov	r1, fp
 800d230:	f7f3 f82a 	bl	8000288 <__aeabi_dsub>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4680      	mov	r8, r0
 800d23a:	4689      	mov	r9, r1
 800d23c:	4650      	mov	r0, sl
 800d23e:	4659      	mov	r1, fp
 800d240:	f7f3 f822 	bl	8000288 <__aeabi_dsub>
 800d244:	4632      	mov	r2, r6
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 f81e 	bl	8000288 <__aeabi_dsub>
 800d24c:	a340      	add	r3, pc, #256	; (adr r3, 800d350 <__ieee754_rem_pio2+0x2f8>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	4606      	mov	r6, r0
 800d254:	460f      	mov	r7, r1
 800d256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d25a:	f7f3 f9cd 	bl	80005f8 <__aeabi_dmul>
 800d25e:	4632      	mov	r2, r6
 800d260:	463b      	mov	r3, r7
 800d262:	f7f3 f811 	bl	8000288 <__aeabi_dsub>
 800d266:	4602      	mov	r2, r0
 800d268:	460b      	mov	r3, r1
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 f809 	bl	8000288 <__aeabi_dsub>
 800d276:	9a05      	ldr	r2, [sp, #20]
 800d278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	2b31      	cmp	r3, #49	; 0x31
 800d280:	dc20      	bgt.n	800d2c4 <__ieee754_rem_pio2+0x26c>
 800d282:	e9c4 0100 	strd	r0, r1, [r4]
 800d286:	46c2      	mov	sl, r8
 800d288:	46cb      	mov	fp, r9
 800d28a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d28e:	4650      	mov	r0, sl
 800d290:	4642      	mov	r2, r8
 800d292:	464b      	mov	r3, r9
 800d294:	4659      	mov	r1, fp
 800d296:	f7f2 fff7 	bl	8000288 <__aeabi_dsub>
 800d29a:	463b      	mov	r3, r7
 800d29c:	4632      	mov	r2, r6
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	9b04      	ldr	r3, [sp, #16]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2aa:	f6bf af11 	bge.w	800d0d0 <__ieee754_rem_pio2+0x78>
 800d2ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d2b2:	6063      	str	r3, [r4, #4]
 800d2b4:	f8c4 8000 	str.w	r8, [r4]
 800d2b8:	60a0      	str	r0, [r4, #8]
 800d2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2be:	60e3      	str	r3, [r4, #12]
 800d2c0:	426d      	negs	r5, r5
 800d2c2:	e705      	b.n	800d0d0 <__ieee754_rem_pio2+0x78>
 800d2c4:	a326      	add	r3, pc, #152	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ce:	f7f3 f993 	bl	80005f8 <__aeabi_dmul>
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460f      	mov	r7, r1
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4649      	mov	r1, r9
 800d2de:	f7f2 ffd3 	bl	8000288 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f2 ffc7 	bl	8000288 <__aeabi_dsub>
 800d2fa:	a31b      	add	r3, pc, #108	; (adr r3, 800d368 <__ieee754_rem_pio2+0x310>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	4606      	mov	r6, r0
 800d302:	460f      	mov	r7, r1
 800d304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d308:	f7f3 f976 	bl	80005f8 <__aeabi_dmul>
 800d30c:	4632      	mov	r2, r6
 800d30e:	463b      	mov	r3, r7
 800d310:	f7f2 ffba 	bl	8000288 <__aeabi_dsub>
 800d314:	4606      	mov	r6, r0
 800d316:	460f      	mov	r7, r1
 800d318:	e764      	b.n	800d1e4 <__ieee754_rem_pio2+0x18c>
 800d31a:	4b1b      	ldr	r3, [pc, #108]	; (800d388 <__ieee754_rem_pio2+0x330>)
 800d31c:	4598      	cmp	r8, r3
 800d31e:	dd35      	ble.n	800d38c <__ieee754_rem_pio2+0x334>
 800d320:	ee10 2a10 	vmov	r2, s0
 800d324:	463b      	mov	r3, r7
 800d326:	4630      	mov	r0, r6
 800d328:	4639      	mov	r1, r7
 800d32a:	f7f2 ffad 	bl	8000288 <__aeabi_dsub>
 800d32e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d332:	e9c4 0100 	strd	r0, r1, [r4]
 800d336:	e6a1      	b.n	800d07c <__ieee754_rem_pio2+0x24>
 800d338:	54400000 	.word	0x54400000
 800d33c:	3ff921fb 	.word	0x3ff921fb
 800d340:	1a626331 	.word	0x1a626331
 800d344:	3dd0b461 	.word	0x3dd0b461
 800d348:	1a600000 	.word	0x1a600000
 800d34c:	3dd0b461 	.word	0x3dd0b461
 800d350:	2e037073 	.word	0x2e037073
 800d354:	3ba3198a 	.word	0x3ba3198a
 800d358:	6dc9c883 	.word	0x6dc9c883
 800d35c:	3fe45f30 	.word	0x3fe45f30
 800d360:	2e000000 	.word	0x2e000000
 800d364:	3ba3198a 	.word	0x3ba3198a
 800d368:	252049c1 	.word	0x252049c1
 800d36c:	397b839a 	.word	0x397b839a
 800d370:	3fe921fb 	.word	0x3fe921fb
 800d374:	4002d97b 	.word	0x4002d97b
 800d378:	3ff921fb 	.word	0x3ff921fb
 800d37c:	413921fb 	.word	0x413921fb
 800d380:	3fe00000 	.word	0x3fe00000
 800d384:	0800e5a4 	.word	0x0800e5a4
 800d388:	7fefffff 	.word	0x7fefffff
 800d38c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d390:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d394:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d398:	4630      	mov	r0, r6
 800d39a:	460f      	mov	r7, r1
 800d39c:	f7f3 fbdc 	bl	8000b58 <__aeabi_d2iz>
 800d3a0:	f7f3 f8c0 	bl	8000524 <__aeabi_i2d>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3b0:	f7f2 ff6a 	bl	8000288 <__aeabi_dsub>
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4b1f      	ldr	r3, [pc, #124]	; (800d434 <__ieee754_rem_pio2+0x3dc>)
 800d3b8:	f7f3 f91e 	bl	80005f8 <__aeabi_dmul>
 800d3bc:	460f      	mov	r7, r1
 800d3be:	4606      	mov	r6, r0
 800d3c0:	f7f3 fbca 	bl	8000b58 <__aeabi_d2iz>
 800d3c4:	f7f3 f8ae 	bl	8000524 <__aeabi_i2d>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d3d4:	f7f2 ff58 	bl	8000288 <__aeabi_dsub>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4b16      	ldr	r3, [pc, #88]	; (800d434 <__ieee754_rem_pio2+0x3dc>)
 800d3dc:	f7f3 f90c 	bl	80005f8 <__aeabi_dmul>
 800d3e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d3e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d3e8:	f04f 0803 	mov.w	r8, #3
 800d3ec:	2600      	movs	r6, #0
 800d3ee:	2700      	movs	r7, #0
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d3f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800d3fc:	f7f3 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 800d400:	b9b0      	cbnz	r0, 800d430 <__ieee754_rem_pio2+0x3d8>
 800d402:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <__ieee754_rem_pio2+0x3e0>)
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	2302      	movs	r3, #2
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	462a      	mov	r2, r5
 800d40c:	4643      	mov	r3, r8
 800d40e:	4621      	mov	r1, r4
 800d410:	a806      	add	r0, sp, #24
 800d412:	f000 f98d 	bl	800d730 <__kernel_rem_pio2>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	4605      	mov	r5, r0
 800d41c:	f6bf ae58 	bge.w	800d0d0 <__ieee754_rem_pio2+0x78>
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d426:	6063      	str	r3, [r4, #4]
 800d428:	68e3      	ldr	r3, [r4, #12]
 800d42a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d42e:	e746      	b.n	800d2be <__ieee754_rem_pio2+0x266>
 800d430:	46d0      	mov	r8, sl
 800d432:	e7dd      	b.n	800d3f0 <__ieee754_rem_pio2+0x398>
 800d434:	41700000 	.word	0x41700000
 800d438:	0800e624 	.word	0x0800e624

0800d43c <__ieee754_sqrt>:
 800d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d440:	4955      	ldr	r1, [pc, #340]	; (800d598 <__ieee754_sqrt+0x15c>)
 800d442:	ec55 4b10 	vmov	r4, r5, d0
 800d446:	43a9      	bics	r1, r5
 800d448:	462b      	mov	r3, r5
 800d44a:	462a      	mov	r2, r5
 800d44c:	d112      	bne.n	800d474 <__ieee754_sqrt+0x38>
 800d44e:	ee10 2a10 	vmov	r2, s0
 800d452:	ee10 0a10 	vmov	r0, s0
 800d456:	4629      	mov	r1, r5
 800d458:	f7f3 f8ce 	bl	80005f8 <__aeabi_dmul>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	f7f2 ff12 	bl	800028c <__adddf3>
 800d468:	4604      	mov	r4, r0
 800d46a:	460d      	mov	r5, r1
 800d46c:	ec45 4b10 	vmov	d0, r4, r5
 800d470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d474:	2d00      	cmp	r5, #0
 800d476:	ee10 0a10 	vmov	r0, s0
 800d47a:	4621      	mov	r1, r4
 800d47c:	dc0f      	bgt.n	800d49e <__ieee754_sqrt+0x62>
 800d47e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d482:	4330      	orrs	r0, r6
 800d484:	d0f2      	beq.n	800d46c <__ieee754_sqrt+0x30>
 800d486:	b155      	cbz	r5, 800d49e <__ieee754_sqrt+0x62>
 800d488:	ee10 2a10 	vmov	r2, s0
 800d48c:	4620      	mov	r0, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	f7f2 fefa 	bl	8000288 <__aeabi_dsub>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	f7f3 f9d8 	bl	800084c <__aeabi_ddiv>
 800d49c:	e7e4      	b.n	800d468 <__ieee754_sqrt+0x2c>
 800d49e:	151b      	asrs	r3, r3, #20
 800d4a0:	d073      	beq.n	800d58a <__ieee754_sqrt+0x14e>
 800d4a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4a6:	07dd      	lsls	r5, r3, #31
 800d4a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d4ac:	bf48      	it	mi
 800d4ae:	0fc8      	lsrmi	r0, r1, #31
 800d4b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d4b4:	bf44      	itt	mi
 800d4b6:	0049      	lslmi	r1, r1, #1
 800d4b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d4bc:	2500      	movs	r5, #0
 800d4be:	1058      	asrs	r0, r3, #1
 800d4c0:	0fcb      	lsrs	r3, r1, #31
 800d4c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d4c6:	0049      	lsls	r1, r1, #1
 800d4c8:	2316      	movs	r3, #22
 800d4ca:	462c      	mov	r4, r5
 800d4cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d4d0:	19a7      	adds	r7, r4, r6
 800d4d2:	4297      	cmp	r7, r2
 800d4d4:	bfde      	ittt	le
 800d4d6:	19bc      	addle	r4, r7, r6
 800d4d8:	1bd2      	suble	r2, r2, r7
 800d4da:	19ad      	addle	r5, r5, r6
 800d4dc:	0fcf      	lsrs	r7, r1, #31
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d4e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d4e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d4ec:	d1f0      	bne.n	800d4d0 <__ieee754_sqrt+0x94>
 800d4ee:	f04f 0c20 	mov.w	ip, #32
 800d4f2:	469e      	mov	lr, r3
 800d4f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d4f8:	42a2      	cmp	r2, r4
 800d4fa:	eb06 070e 	add.w	r7, r6, lr
 800d4fe:	dc02      	bgt.n	800d506 <__ieee754_sqrt+0xca>
 800d500:	d112      	bne.n	800d528 <__ieee754_sqrt+0xec>
 800d502:	428f      	cmp	r7, r1
 800d504:	d810      	bhi.n	800d528 <__ieee754_sqrt+0xec>
 800d506:	2f00      	cmp	r7, #0
 800d508:	eb07 0e06 	add.w	lr, r7, r6
 800d50c:	da42      	bge.n	800d594 <__ieee754_sqrt+0x158>
 800d50e:	f1be 0f00 	cmp.w	lr, #0
 800d512:	db3f      	blt.n	800d594 <__ieee754_sqrt+0x158>
 800d514:	f104 0801 	add.w	r8, r4, #1
 800d518:	1b12      	subs	r2, r2, r4
 800d51a:	428f      	cmp	r7, r1
 800d51c:	bf88      	it	hi
 800d51e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d522:	1bc9      	subs	r1, r1, r7
 800d524:	4433      	add	r3, r6
 800d526:	4644      	mov	r4, r8
 800d528:	0052      	lsls	r2, r2, #1
 800d52a:	f1bc 0c01 	subs.w	ip, ip, #1
 800d52e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d532:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d536:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d53a:	d1dd      	bne.n	800d4f8 <__ieee754_sqrt+0xbc>
 800d53c:	430a      	orrs	r2, r1
 800d53e:	d006      	beq.n	800d54e <__ieee754_sqrt+0x112>
 800d540:	1c5c      	adds	r4, r3, #1
 800d542:	bf13      	iteet	ne
 800d544:	3301      	addne	r3, #1
 800d546:	3501      	addeq	r5, #1
 800d548:	4663      	moveq	r3, ip
 800d54a:	f023 0301 	bicne.w	r3, r3, #1
 800d54e:	106a      	asrs	r2, r5, #1
 800d550:	085b      	lsrs	r3, r3, #1
 800d552:	07e9      	lsls	r1, r5, #31
 800d554:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d558:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d55c:	bf48      	it	mi
 800d55e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d562:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d566:	461c      	mov	r4, r3
 800d568:	e780      	b.n	800d46c <__ieee754_sqrt+0x30>
 800d56a:	0aca      	lsrs	r2, r1, #11
 800d56c:	3815      	subs	r0, #21
 800d56e:	0549      	lsls	r1, r1, #21
 800d570:	2a00      	cmp	r2, #0
 800d572:	d0fa      	beq.n	800d56a <__ieee754_sqrt+0x12e>
 800d574:	02d6      	lsls	r6, r2, #11
 800d576:	d50a      	bpl.n	800d58e <__ieee754_sqrt+0x152>
 800d578:	f1c3 0420 	rsb	r4, r3, #32
 800d57c:	fa21 f404 	lsr.w	r4, r1, r4
 800d580:	1e5d      	subs	r5, r3, #1
 800d582:	4099      	lsls	r1, r3
 800d584:	4322      	orrs	r2, r4
 800d586:	1b43      	subs	r3, r0, r5
 800d588:	e78b      	b.n	800d4a2 <__ieee754_sqrt+0x66>
 800d58a:	4618      	mov	r0, r3
 800d58c:	e7f0      	b.n	800d570 <__ieee754_sqrt+0x134>
 800d58e:	0052      	lsls	r2, r2, #1
 800d590:	3301      	adds	r3, #1
 800d592:	e7ef      	b.n	800d574 <__ieee754_sqrt+0x138>
 800d594:	46a0      	mov	r8, r4
 800d596:	e7bf      	b.n	800d518 <__ieee754_sqrt+0xdc>
 800d598:	7ff00000 	.word	0x7ff00000
 800d59c:	00000000 	.word	0x00000000

0800d5a0 <__kernel_cos>:
 800d5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	ec59 8b10 	vmov	r8, r9, d0
 800d5a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d5ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d5b0:	ed2d 8b02 	vpush	{d8}
 800d5b4:	eeb0 8a41 	vmov.f32	s16, s2
 800d5b8:	eef0 8a61 	vmov.f32	s17, s3
 800d5bc:	da07      	bge.n	800d5ce <__kernel_cos+0x2e>
 800d5be:	ee10 0a10 	vmov	r0, s0
 800d5c2:	4649      	mov	r1, r9
 800d5c4:	f7f3 fac8 	bl	8000b58 <__aeabi_d2iz>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	f000 8089 	beq.w	800d6e0 <__kernel_cos+0x140>
 800d5ce:	4642      	mov	r2, r8
 800d5d0:	464b      	mov	r3, r9
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	f7f3 f80f 	bl	80005f8 <__aeabi_dmul>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4b4e      	ldr	r3, [pc, #312]	; (800d718 <__kernel_cos+0x178>)
 800d5de:	4604      	mov	r4, r0
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	f7f3 f809 	bl	80005f8 <__aeabi_dmul>
 800d5e6:	a340      	add	r3, pc, #256	; (adr r3, 800d6e8 <__kernel_cos+0x148>)
 800d5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	468b      	mov	fp, r1
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	f7f3 f800 	bl	80005f8 <__aeabi_dmul>
 800d5f8:	a33d      	add	r3, pc, #244	; (adr r3, 800d6f0 <__kernel_cos+0x150>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fe45 	bl	800028c <__adddf3>
 800d602:	4622      	mov	r2, r4
 800d604:	462b      	mov	r3, r5
 800d606:	f7f2 fff7 	bl	80005f8 <__aeabi_dmul>
 800d60a:	a33b      	add	r3, pc, #236	; (adr r3, 800d6f8 <__kernel_cos+0x158>)
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	f7f2 fe3a 	bl	8000288 <__aeabi_dsub>
 800d614:	4622      	mov	r2, r4
 800d616:	462b      	mov	r3, r5
 800d618:	f7f2 ffee 	bl	80005f8 <__aeabi_dmul>
 800d61c:	a338      	add	r3, pc, #224	; (adr r3, 800d700 <__kernel_cos+0x160>)
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f7f2 fe33 	bl	800028c <__adddf3>
 800d626:	4622      	mov	r2, r4
 800d628:	462b      	mov	r3, r5
 800d62a:	f7f2 ffe5 	bl	80005f8 <__aeabi_dmul>
 800d62e:	a336      	add	r3, pc, #216	; (adr r3, 800d708 <__kernel_cos+0x168>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f7f2 fe28 	bl	8000288 <__aeabi_dsub>
 800d638:	4622      	mov	r2, r4
 800d63a:	462b      	mov	r3, r5
 800d63c:	f7f2 ffdc 	bl	80005f8 <__aeabi_dmul>
 800d640:	a333      	add	r3, pc, #204	; (adr r3, 800d710 <__kernel_cos+0x170>)
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f7f2 fe21 	bl	800028c <__adddf3>
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f7f2 ffd3 	bl	80005f8 <__aeabi_dmul>
 800d652:	4622      	mov	r2, r4
 800d654:	462b      	mov	r3, r5
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	ec53 2b18 	vmov	r2, r3, d8
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	4640      	mov	r0, r8
 800d664:	4649      	mov	r1, r9
 800d666:	f7f2 ffc7 	bl	80005f8 <__aeabi_dmul>
 800d66a:	460b      	mov	r3, r1
 800d66c:	4602      	mov	r2, r0
 800d66e:	4629      	mov	r1, r5
 800d670:	4620      	mov	r0, r4
 800d672:	f7f2 fe09 	bl	8000288 <__aeabi_dsub>
 800d676:	4b29      	ldr	r3, [pc, #164]	; (800d71c <__kernel_cos+0x17c>)
 800d678:	429e      	cmp	r6, r3
 800d67a:	4680      	mov	r8, r0
 800d67c:	4689      	mov	r9, r1
 800d67e:	dc11      	bgt.n	800d6a4 <__kernel_cos+0x104>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4650      	mov	r0, sl
 800d686:	4659      	mov	r1, fp
 800d688:	f7f2 fdfe 	bl	8000288 <__aeabi_dsub>
 800d68c:	460b      	mov	r3, r1
 800d68e:	4924      	ldr	r1, [pc, #144]	; (800d720 <__kernel_cos+0x180>)
 800d690:	4602      	mov	r2, r0
 800d692:	2000      	movs	r0, #0
 800d694:	f7f2 fdf8 	bl	8000288 <__aeabi_dsub>
 800d698:	ecbd 8b02 	vpop	{d8}
 800d69c:	ec41 0b10 	vmov	d0, r0, r1
 800d6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	4b1f      	ldr	r3, [pc, #124]	; (800d724 <__kernel_cos+0x184>)
 800d6a6:	491e      	ldr	r1, [pc, #120]	; (800d720 <__kernel_cos+0x180>)
 800d6a8:	429e      	cmp	r6, r3
 800d6aa:	bfcc      	ite	gt
 800d6ac:	4d1e      	ldrgt	r5, [pc, #120]	; (800d728 <__kernel_cos+0x188>)
 800d6ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d6b2:	2400      	movs	r4, #0
 800d6b4:	4622      	mov	r2, r4
 800d6b6:	462b      	mov	r3, r5
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f2 fde5 	bl	8000288 <__aeabi_dsub>
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	460f      	mov	r7, r1
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	4650      	mov	r0, sl
 800d6c8:	4659      	mov	r1, fp
 800d6ca:	f7f2 fddd 	bl	8000288 <__aeabi_dsub>
 800d6ce:	4642      	mov	r2, r8
 800d6d0:	464b      	mov	r3, r9
 800d6d2:	f7f2 fdd9 	bl	8000288 <__aeabi_dsub>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	e7d9      	b.n	800d694 <__kernel_cos+0xf4>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	490f      	ldr	r1, [pc, #60]	; (800d720 <__kernel_cos+0x180>)
 800d6e4:	e7d8      	b.n	800d698 <__kernel_cos+0xf8>
 800d6e6:	bf00      	nop
 800d6e8:	be8838d4 	.word	0xbe8838d4
 800d6ec:	bda8fae9 	.word	0xbda8fae9
 800d6f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d6f4:	3e21ee9e 	.word	0x3e21ee9e
 800d6f8:	809c52ad 	.word	0x809c52ad
 800d6fc:	3e927e4f 	.word	0x3e927e4f
 800d700:	19cb1590 	.word	0x19cb1590
 800d704:	3efa01a0 	.word	0x3efa01a0
 800d708:	16c15177 	.word	0x16c15177
 800d70c:	3f56c16c 	.word	0x3f56c16c
 800d710:	5555554c 	.word	0x5555554c
 800d714:	3fa55555 	.word	0x3fa55555
 800d718:	3fe00000 	.word	0x3fe00000
 800d71c:	3fd33332 	.word	0x3fd33332
 800d720:	3ff00000 	.word	0x3ff00000
 800d724:	3fe90000 	.word	0x3fe90000
 800d728:	3fd20000 	.word	0x3fd20000
 800d72c:	00000000 	.word	0x00000000

0800d730 <__kernel_rem_pio2>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	ed2d 8b02 	vpush	{d8}
 800d738:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d73c:	1ed4      	subs	r4, r2, #3
 800d73e:	9308      	str	r3, [sp, #32]
 800d740:	9101      	str	r1, [sp, #4]
 800d742:	4bc5      	ldr	r3, [pc, #788]	; (800da58 <__kernel_rem_pio2+0x328>)
 800d744:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d746:	9009      	str	r0, [sp, #36]	; 0x24
 800d748:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	9b08      	ldr	r3, [sp, #32]
 800d750:	3b01      	subs	r3, #1
 800d752:	9307      	str	r3, [sp, #28]
 800d754:	2318      	movs	r3, #24
 800d756:	fb94 f4f3 	sdiv	r4, r4, r3
 800d75a:	f06f 0317 	mvn.w	r3, #23
 800d75e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d762:	fb04 3303 	mla	r3, r4, r3, r3
 800d766:	eb03 0a02 	add.w	sl, r3, r2
 800d76a:	9b04      	ldr	r3, [sp, #16]
 800d76c:	9a07      	ldr	r2, [sp, #28]
 800d76e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800da48 <__kernel_rem_pio2+0x318>
 800d772:	eb03 0802 	add.w	r8, r3, r2
 800d776:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d778:	1aa7      	subs	r7, r4, r2
 800d77a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d77e:	ae22      	add	r6, sp, #136	; 0x88
 800d780:	2500      	movs	r5, #0
 800d782:	4545      	cmp	r5, r8
 800d784:	dd13      	ble.n	800d7ae <__kernel_rem_pio2+0x7e>
 800d786:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800da48 <__kernel_rem_pio2+0x318>
 800d78a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d78e:	2600      	movs	r6, #0
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	429e      	cmp	r6, r3
 800d794:	dc32      	bgt.n	800d7fc <__kernel_rem_pio2+0xcc>
 800d796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d798:	9302      	str	r3, [sp, #8]
 800d79a:	9b08      	ldr	r3, [sp, #32]
 800d79c:	199d      	adds	r5, r3, r6
 800d79e:	ab22      	add	r3, sp, #136	; 0x88
 800d7a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d7a4:	9306      	str	r3, [sp, #24]
 800d7a6:	ec59 8b18 	vmov	r8, r9, d8
 800d7aa:	2700      	movs	r7, #0
 800d7ac:	e01f      	b.n	800d7ee <__kernel_rem_pio2+0xbe>
 800d7ae:	42ef      	cmn	r7, r5
 800d7b0:	d407      	bmi.n	800d7c2 <__kernel_rem_pio2+0x92>
 800d7b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d7b6:	f7f2 feb5 	bl	8000524 <__aeabi_i2d>
 800d7ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d7be:	3501      	adds	r5, #1
 800d7c0:	e7df      	b.n	800d782 <__kernel_rem_pio2+0x52>
 800d7c2:	ec51 0b18 	vmov	r0, r1, d8
 800d7c6:	e7f8      	b.n	800d7ba <__kernel_rem_pio2+0x8a>
 800d7c8:	9906      	ldr	r1, [sp, #24]
 800d7ca:	9d02      	ldr	r5, [sp, #8]
 800d7cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d7d0:	9106      	str	r1, [sp, #24]
 800d7d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d7d6:	9502      	str	r5, [sp, #8]
 800d7d8:	f7f2 ff0e 	bl	80005f8 <__aeabi_dmul>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f2 fd52 	bl	800028c <__adddf3>
 800d7e8:	3701      	adds	r7, #1
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	4689      	mov	r9, r1
 800d7ee:	9b07      	ldr	r3, [sp, #28]
 800d7f0:	429f      	cmp	r7, r3
 800d7f2:	dde9      	ble.n	800d7c8 <__kernel_rem_pio2+0x98>
 800d7f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d7f8:	3601      	adds	r6, #1
 800d7fa:	e7c9      	b.n	800d790 <__kernel_rem_pio2+0x60>
 800d7fc:	9b04      	ldr	r3, [sp, #16]
 800d7fe:	aa0e      	add	r2, sp, #56	; 0x38
 800d800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d804:	930c      	str	r3, [sp, #48]	; 0x30
 800d806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d808:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d80c:	9c04      	ldr	r4, [sp, #16]
 800d80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d810:	ab9a      	add	r3, sp, #616	; 0x268
 800d812:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800d816:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d81a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d81e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d822:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d826:	ab9a      	add	r3, sp, #616	; 0x268
 800d828:	445b      	add	r3, fp
 800d82a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800d82e:	2500      	movs	r5, #0
 800d830:	1b63      	subs	r3, r4, r5
 800d832:	2b00      	cmp	r3, #0
 800d834:	dc78      	bgt.n	800d928 <__kernel_rem_pio2+0x1f8>
 800d836:	4650      	mov	r0, sl
 800d838:	ec49 8b10 	vmov	d0, r8, r9
 800d83c:	f000 fc0c 	bl	800e058 <scalbn>
 800d840:	ec57 6b10 	vmov	r6, r7, d0
 800d844:	2200      	movs	r2, #0
 800d846:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d84a:	ee10 0a10 	vmov	r0, s0
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f2 fed2 	bl	80005f8 <__aeabi_dmul>
 800d854:	ec41 0b10 	vmov	d0, r0, r1
 800d858:	f000 fb6e 	bl	800df38 <floor>
 800d85c:	2200      	movs	r2, #0
 800d85e:	ec51 0b10 	vmov	r0, r1, d0
 800d862:	4b7e      	ldr	r3, [pc, #504]	; (800da5c <__kernel_rem_pio2+0x32c>)
 800d864:	f7f2 fec8 	bl	80005f8 <__aeabi_dmul>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4630      	mov	r0, r6
 800d86e:	4639      	mov	r1, r7
 800d870:	f7f2 fd0a 	bl	8000288 <__aeabi_dsub>
 800d874:	460f      	mov	r7, r1
 800d876:	4606      	mov	r6, r0
 800d878:	f7f3 f96e 	bl	8000b58 <__aeabi_d2iz>
 800d87c:	9006      	str	r0, [sp, #24]
 800d87e:	f7f2 fe51 	bl	8000524 <__aeabi_i2d>
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	4630      	mov	r0, r6
 800d888:	4639      	mov	r1, r7
 800d88a:	f7f2 fcfd 	bl	8000288 <__aeabi_dsub>
 800d88e:	f1ba 0f00 	cmp.w	sl, #0
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	dd6c      	ble.n	800d972 <__kernel_rem_pio2+0x242>
 800d898:	1e62      	subs	r2, r4, #1
 800d89a:	ab0e      	add	r3, sp, #56	; 0x38
 800d89c:	f1ca 0118 	rsb	r1, sl, #24
 800d8a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d8a4:	9d06      	ldr	r5, [sp, #24]
 800d8a6:	fa40 f301 	asr.w	r3, r0, r1
 800d8aa:	441d      	add	r5, r3
 800d8ac:	408b      	lsls	r3, r1
 800d8ae:	1ac0      	subs	r0, r0, r3
 800d8b0:	ab0e      	add	r3, sp, #56	; 0x38
 800d8b2:	9506      	str	r5, [sp, #24]
 800d8b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d8b8:	f1ca 0317 	rsb	r3, sl, #23
 800d8bc:	fa40 f303 	asr.w	r3, r0, r3
 800d8c0:	9302      	str	r3, [sp, #8]
 800d8c2:	9b02      	ldr	r3, [sp, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dd62      	ble.n	800d98e <__kernel_rem_pio2+0x25e>
 800d8c8:	9b06      	ldr	r3, [sp, #24]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	9306      	str	r3, [sp, #24]
 800d8d0:	4615      	mov	r5, r2
 800d8d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d8d6:	4294      	cmp	r4, r2
 800d8d8:	f300 8095 	bgt.w	800da06 <__kernel_rem_pio2+0x2d6>
 800d8dc:	f1ba 0f00 	cmp.w	sl, #0
 800d8e0:	dd07      	ble.n	800d8f2 <__kernel_rem_pio2+0x1c2>
 800d8e2:	f1ba 0f01 	cmp.w	sl, #1
 800d8e6:	f000 80a2 	beq.w	800da2e <__kernel_rem_pio2+0x2fe>
 800d8ea:	f1ba 0f02 	cmp.w	sl, #2
 800d8ee:	f000 80c1 	beq.w	800da74 <__kernel_rem_pio2+0x344>
 800d8f2:	9b02      	ldr	r3, [sp, #8]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d14a      	bne.n	800d98e <__kernel_rem_pio2+0x25e>
 800d8f8:	4632      	mov	r2, r6
 800d8fa:	463b      	mov	r3, r7
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	4958      	ldr	r1, [pc, #352]	; (800da60 <__kernel_rem_pio2+0x330>)
 800d900:	f7f2 fcc2 	bl	8000288 <__aeabi_dsub>
 800d904:	4606      	mov	r6, r0
 800d906:	460f      	mov	r7, r1
 800d908:	2d00      	cmp	r5, #0
 800d90a:	d040      	beq.n	800d98e <__kernel_rem_pio2+0x25e>
 800d90c:	4650      	mov	r0, sl
 800d90e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800da50 <__kernel_rem_pio2+0x320>
 800d912:	f000 fba1 	bl	800e058 <scalbn>
 800d916:	4630      	mov	r0, r6
 800d918:	4639      	mov	r1, r7
 800d91a:	ec53 2b10 	vmov	r2, r3, d0
 800d91e:	f7f2 fcb3 	bl	8000288 <__aeabi_dsub>
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	e032      	b.n	800d98e <__kernel_rem_pio2+0x25e>
 800d928:	2200      	movs	r2, #0
 800d92a:	4b4e      	ldr	r3, [pc, #312]	; (800da64 <__kernel_rem_pio2+0x334>)
 800d92c:	4640      	mov	r0, r8
 800d92e:	4649      	mov	r1, r9
 800d930:	f7f2 fe62 	bl	80005f8 <__aeabi_dmul>
 800d934:	f7f3 f910 	bl	8000b58 <__aeabi_d2iz>
 800d938:	f7f2 fdf4 	bl	8000524 <__aeabi_i2d>
 800d93c:	2200      	movs	r2, #0
 800d93e:	4b4a      	ldr	r3, [pc, #296]	; (800da68 <__kernel_rem_pio2+0x338>)
 800d940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d944:	f7f2 fe58 	bl	80005f8 <__aeabi_dmul>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4640      	mov	r0, r8
 800d94e:	4649      	mov	r1, r9
 800d950:	f7f2 fc9a 	bl	8000288 <__aeabi_dsub>
 800d954:	f7f3 f900 	bl	8000b58 <__aeabi_d2iz>
 800d958:	ab0e      	add	r3, sp, #56	; 0x38
 800d95a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d95e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d966:	f7f2 fc91 	bl	800028c <__adddf3>
 800d96a:	3501      	adds	r5, #1
 800d96c:	4680      	mov	r8, r0
 800d96e:	4689      	mov	r9, r1
 800d970:	e75e      	b.n	800d830 <__kernel_rem_pio2+0x100>
 800d972:	d105      	bne.n	800d980 <__kernel_rem_pio2+0x250>
 800d974:	1e63      	subs	r3, r4, #1
 800d976:	aa0e      	add	r2, sp, #56	; 0x38
 800d978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d97c:	15c3      	asrs	r3, r0, #23
 800d97e:	e79f      	b.n	800d8c0 <__kernel_rem_pio2+0x190>
 800d980:	2200      	movs	r2, #0
 800d982:	4b3a      	ldr	r3, [pc, #232]	; (800da6c <__kernel_rem_pio2+0x33c>)
 800d984:	f7f3 f8be 	bl	8000b04 <__aeabi_dcmpge>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d139      	bne.n	800da00 <__kernel_rem_pio2+0x2d0>
 800d98c:	9002      	str	r0, [sp, #8]
 800d98e:	2200      	movs	r2, #0
 800d990:	2300      	movs	r3, #0
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f3 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	f000 80c7 	beq.w	800db2e <__kernel_rem_pio2+0x3fe>
 800d9a0:	1e65      	subs	r5, r4, #1
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	9904      	ldr	r1, [sp, #16]
 800d9a8:	428b      	cmp	r3, r1
 800d9aa:	da6a      	bge.n	800da82 <__kernel_rem_pio2+0x352>
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	f000 8088 	beq.w	800dac2 <__kernel_rem_pio2+0x392>
 800d9b2:	ab0e      	add	r3, sp, #56	; 0x38
 800d9b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d9b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 80b4 	beq.w	800db2a <__kernel_rem_pio2+0x3fa>
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800da50 <__kernel_rem_pio2+0x320>
 800d9c8:	f000 fb46 	bl	800e058 <scalbn>
 800d9cc:	00ec      	lsls	r4, r5, #3
 800d9ce:	ab72      	add	r3, sp, #456	; 0x1c8
 800d9d0:	191e      	adds	r6, r3, r4
 800d9d2:	ec59 8b10 	vmov	r8, r9, d0
 800d9d6:	f106 0a08 	add.w	sl, r6, #8
 800d9da:	462f      	mov	r7, r5
 800d9dc:	2f00      	cmp	r7, #0
 800d9de:	f280 80df 	bge.w	800dba0 <__kernel_rem_pio2+0x470>
 800d9e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800da48 <__kernel_rem_pio2+0x318>
 800d9e6:	f04f 0a00 	mov.w	sl, #0
 800d9ea:	eba5 030a 	sub.w	r3, r5, sl
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f2c0 810a 	blt.w	800dc08 <__kernel_rem_pio2+0x4d8>
 800d9f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800da70 <__kernel_rem_pio2+0x340>
 800d9f8:	ec59 8b18 	vmov	r8, r9, d8
 800d9fc:	2700      	movs	r7, #0
 800d9fe:	e0f5      	b.n	800dbec <__kernel_rem_pio2+0x4bc>
 800da00:	2302      	movs	r3, #2
 800da02:	9302      	str	r3, [sp, #8]
 800da04:	e760      	b.n	800d8c8 <__kernel_rem_pio2+0x198>
 800da06:	ab0e      	add	r3, sp, #56	; 0x38
 800da08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0c:	b94d      	cbnz	r5, 800da22 <__kernel_rem_pio2+0x2f2>
 800da0e:	b12b      	cbz	r3, 800da1c <__kernel_rem_pio2+0x2ec>
 800da10:	a80e      	add	r0, sp, #56	; 0x38
 800da12:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800da16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800da1a:	2301      	movs	r3, #1
 800da1c:	3201      	adds	r2, #1
 800da1e:	461d      	mov	r5, r3
 800da20:	e759      	b.n	800d8d6 <__kernel_rem_pio2+0x1a6>
 800da22:	a80e      	add	r0, sp, #56	; 0x38
 800da24:	1acb      	subs	r3, r1, r3
 800da26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800da2a:	462b      	mov	r3, r5
 800da2c:	e7f6      	b.n	800da1c <__kernel_rem_pio2+0x2ec>
 800da2e:	1e62      	subs	r2, r4, #1
 800da30:	ab0e      	add	r3, sp, #56	; 0x38
 800da32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800da3a:	a90e      	add	r1, sp, #56	; 0x38
 800da3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800da40:	e757      	b.n	800d8f2 <__kernel_rem_pio2+0x1c2>
 800da42:	bf00      	nop
 800da44:	f3af 8000 	nop.w
	...
 800da54:	3ff00000 	.word	0x3ff00000
 800da58:	0800e770 	.word	0x0800e770
 800da5c:	40200000 	.word	0x40200000
 800da60:	3ff00000 	.word	0x3ff00000
 800da64:	3e700000 	.word	0x3e700000
 800da68:	41700000 	.word	0x41700000
 800da6c:	3fe00000 	.word	0x3fe00000
 800da70:	0800e730 	.word	0x0800e730
 800da74:	1e62      	subs	r2, r4, #1
 800da76:	ab0e      	add	r3, sp, #56	; 0x38
 800da78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da80:	e7db      	b.n	800da3a <__kernel_rem_pio2+0x30a>
 800da82:	a90e      	add	r1, sp, #56	; 0x38
 800da84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800da88:	3b01      	subs	r3, #1
 800da8a:	430a      	orrs	r2, r1
 800da8c:	e78b      	b.n	800d9a6 <__kernel_rem_pio2+0x276>
 800da8e:	3301      	adds	r3, #1
 800da90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800da94:	2900      	cmp	r1, #0
 800da96:	d0fa      	beq.n	800da8e <__kernel_rem_pio2+0x35e>
 800da98:	9a08      	ldr	r2, [sp, #32]
 800da9a:	4422      	add	r2, r4
 800da9c:	00d2      	lsls	r2, r2, #3
 800da9e:	a922      	add	r1, sp, #136	; 0x88
 800daa0:	18e3      	adds	r3, r4, r3
 800daa2:	9206      	str	r2, [sp, #24]
 800daa4:	440a      	add	r2, r1
 800daa6:	9302      	str	r3, [sp, #8]
 800daa8:	f10b 0108 	add.w	r1, fp, #8
 800daac:	f102 0308 	add.w	r3, r2, #8
 800dab0:	1c66      	adds	r6, r4, #1
 800dab2:	910a      	str	r1, [sp, #40]	; 0x28
 800dab4:	2500      	movs	r5, #0
 800dab6:	930d      	str	r3, [sp, #52]	; 0x34
 800dab8:	9b02      	ldr	r3, [sp, #8]
 800daba:	42b3      	cmp	r3, r6
 800dabc:	da04      	bge.n	800dac8 <__kernel_rem_pio2+0x398>
 800dabe:	461c      	mov	r4, r3
 800dac0:	e6a6      	b.n	800d810 <__kernel_rem_pio2+0xe0>
 800dac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dac4:	2301      	movs	r3, #1
 800dac6:	e7e3      	b.n	800da90 <__kernel_rem_pio2+0x360>
 800dac8:	9b06      	ldr	r3, [sp, #24]
 800daca:	18ef      	adds	r7, r5, r3
 800dacc:	ab22      	add	r3, sp, #136	; 0x88
 800dace:	441f      	add	r7, r3
 800dad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dad2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dad6:	f7f2 fd25 	bl	8000524 <__aeabi_i2d>
 800dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dadc:	461c      	mov	r4, r3
 800dade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dae0:	e9c7 0100 	strd	r0, r1, [r7]
 800dae4:	eb03 0b05 	add.w	fp, r3, r5
 800dae8:	2700      	movs	r7, #0
 800daea:	f04f 0800 	mov.w	r8, #0
 800daee:	f04f 0900 	mov.w	r9, #0
 800daf2:	9b07      	ldr	r3, [sp, #28]
 800daf4:	429f      	cmp	r7, r3
 800daf6:	dd08      	ble.n	800db0a <__kernel_rem_pio2+0x3da>
 800daf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dafa:	aa72      	add	r2, sp, #456	; 0x1c8
 800dafc:	18eb      	adds	r3, r5, r3
 800dafe:	4413      	add	r3, r2
 800db00:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800db04:	3601      	adds	r6, #1
 800db06:	3508      	adds	r5, #8
 800db08:	e7d6      	b.n	800dab8 <__kernel_rem_pio2+0x388>
 800db0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800db0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800db12:	f7f2 fd71 	bl	80005f8 <__aeabi_dmul>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 fbb5 	bl	800028c <__adddf3>
 800db22:	3701      	adds	r7, #1
 800db24:	4680      	mov	r8, r0
 800db26:	4689      	mov	r9, r1
 800db28:	e7e3      	b.n	800daf2 <__kernel_rem_pio2+0x3c2>
 800db2a:	3d01      	subs	r5, #1
 800db2c:	e741      	b.n	800d9b2 <__kernel_rem_pio2+0x282>
 800db2e:	f1ca 0000 	rsb	r0, sl, #0
 800db32:	ec47 6b10 	vmov	d0, r6, r7
 800db36:	f000 fa8f 	bl	800e058 <scalbn>
 800db3a:	ec57 6b10 	vmov	r6, r7, d0
 800db3e:	2200      	movs	r2, #0
 800db40:	4b99      	ldr	r3, [pc, #612]	; (800dda8 <__kernel_rem_pio2+0x678>)
 800db42:	ee10 0a10 	vmov	r0, s0
 800db46:	4639      	mov	r1, r7
 800db48:	f7f2 ffdc 	bl	8000b04 <__aeabi_dcmpge>
 800db4c:	b1f8      	cbz	r0, 800db8e <__kernel_rem_pio2+0x45e>
 800db4e:	2200      	movs	r2, #0
 800db50:	4b96      	ldr	r3, [pc, #600]	; (800ddac <__kernel_rem_pio2+0x67c>)
 800db52:	4630      	mov	r0, r6
 800db54:	4639      	mov	r1, r7
 800db56:	f7f2 fd4f 	bl	80005f8 <__aeabi_dmul>
 800db5a:	f7f2 fffd 	bl	8000b58 <__aeabi_d2iz>
 800db5e:	4680      	mov	r8, r0
 800db60:	f7f2 fce0 	bl	8000524 <__aeabi_i2d>
 800db64:	2200      	movs	r2, #0
 800db66:	4b90      	ldr	r3, [pc, #576]	; (800dda8 <__kernel_rem_pio2+0x678>)
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	460b      	mov	r3, r1
 800db6e:	4602      	mov	r2, r0
 800db70:	4639      	mov	r1, r7
 800db72:	4630      	mov	r0, r6
 800db74:	f7f2 fb88 	bl	8000288 <__aeabi_dsub>
 800db78:	f7f2 ffee 	bl	8000b58 <__aeabi_d2iz>
 800db7c:	1c65      	adds	r5, r4, #1
 800db7e:	ab0e      	add	r3, sp, #56	; 0x38
 800db80:	f10a 0a18 	add.w	sl, sl, #24
 800db84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800db88:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800db8c:	e719      	b.n	800d9c2 <__kernel_rem_pio2+0x292>
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 ffe1 	bl	8000b58 <__aeabi_d2iz>
 800db96:	ab0e      	add	r3, sp, #56	; 0x38
 800db98:	4625      	mov	r5, r4
 800db9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800db9e:	e710      	b.n	800d9c2 <__kernel_rem_pio2+0x292>
 800dba0:	ab0e      	add	r3, sp, #56	; 0x38
 800dba2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dba6:	f7f2 fcbd 	bl	8000524 <__aeabi_i2d>
 800dbaa:	4642      	mov	r2, r8
 800dbac:	464b      	mov	r3, r9
 800dbae:	f7f2 fd23 	bl	80005f8 <__aeabi_dmul>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dbb8:	4b7c      	ldr	r3, [pc, #496]	; (800ddac <__kernel_rem_pio2+0x67c>)
 800dbba:	4640      	mov	r0, r8
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	3f01      	subs	r7, #1
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	4689      	mov	r9, r1
 800dbc8:	e708      	b.n	800d9dc <__kernel_rem_pio2+0x2ac>
 800dbca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800dbd6:	f7f2 fd0f 	bl	80005f8 <__aeabi_dmul>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	4640      	mov	r0, r8
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	f7f2 fb53 	bl	800028c <__adddf3>
 800dbe6:	3701      	adds	r7, #1
 800dbe8:	4680      	mov	r8, r0
 800dbea:	4689      	mov	r9, r1
 800dbec:	9b04      	ldr	r3, [sp, #16]
 800dbee:	429f      	cmp	r7, r3
 800dbf0:	dc01      	bgt.n	800dbf6 <__kernel_rem_pio2+0x4c6>
 800dbf2:	45ba      	cmp	sl, r7
 800dbf4:	dae9      	bge.n	800dbca <__kernel_rem_pio2+0x49a>
 800dbf6:	ab4a      	add	r3, sp, #296	; 0x128
 800dbf8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dbfc:	e9c3 8900 	strd	r8, r9, [r3]
 800dc00:	f10a 0a01 	add.w	sl, sl, #1
 800dc04:	3e08      	subs	r6, #8
 800dc06:	e6f0      	b.n	800d9ea <__kernel_rem_pio2+0x2ba>
 800dc08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc0a:	2b03      	cmp	r3, #3
 800dc0c:	d85b      	bhi.n	800dcc6 <__kernel_rem_pio2+0x596>
 800dc0e:	e8df f003 	tbb	[pc, r3]
 800dc12:	264a      	.short	0x264a
 800dc14:	0226      	.short	0x0226
 800dc16:	ab9a      	add	r3, sp, #616	; 0x268
 800dc18:	441c      	add	r4, r3
 800dc1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dc1e:	46a2      	mov	sl, r4
 800dc20:	46ab      	mov	fp, r5
 800dc22:	f1bb 0f00 	cmp.w	fp, #0
 800dc26:	dc6c      	bgt.n	800dd02 <__kernel_rem_pio2+0x5d2>
 800dc28:	46a2      	mov	sl, r4
 800dc2a:	46ab      	mov	fp, r5
 800dc2c:	f1bb 0f01 	cmp.w	fp, #1
 800dc30:	f300 8086 	bgt.w	800dd40 <__kernel_rem_pio2+0x610>
 800dc34:	2000      	movs	r0, #0
 800dc36:	2100      	movs	r1, #0
 800dc38:	2d01      	cmp	r5, #1
 800dc3a:	f300 80a0 	bgt.w	800dd7e <__kernel_rem_pio2+0x64e>
 800dc3e:	9b02      	ldr	r3, [sp, #8]
 800dc40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800dc44:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f040 809e 	bne.w	800dd8a <__kernel_rem_pio2+0x65a>
 800dc4e:	9b01      	ldr	r3, [sp, #4]
 800dc50:	e9c3 7800 	strd	r7, r8, [r3]
 800dc54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dc58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dc5c:	e033      	b.n	800dcc6 <__kernel_rem_pio2+0x596>
 800dc5e:	3408      	adds	r4, #8
 800dc60:	ab4a      	add	r3, sp, #296	; 0x128
 800dc62:	441c      	add	r4, r3
 800dc64:	462e      	mov	r6, r5
 800dc66:	2000      	movs	r0, #0
 800dc68:	2100      	movs	r1, #0
 800dc6a:	2e00      	cmp	r6, #0
 800dc6c:	da3a      	bge.n	800dce4 <__kernel_rem_pio2+0x5b4>
 800dc6e:	9b02      	ldr	r3, [sp, #8]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d03d      	beq.n	800dcf0 <__kernel_rem_pio2+0x5c0>
 800dc74:	4602      	mov	r2, r0
 800dc76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc7a:	9c01      	ldr	r4, [sp, #4]
 800dc7c:	e9c4 2300 	strd	r2, r3, [r4]
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dc88:	f7f2 fafe 	bl	8000288 <__aeabi_dsub>
 800dc8c:	ae4c      	add	r6, sp, #304	; 0x130
 800dc8e:	2401      	movs	r4, #1
 800dc90:	42a5      	cmp	r5, r4
 800dc92:	da30      	bge.n	800dcf6 <__kernel_rem_pio2+0x5c6>
 800dc94:	9b02      	ldr	r3, [sp, #8]
 800dc96:	b113      	cbz	r3, 800dc9e <__kernel_rem_pio2+0x56e>
 800dc98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	9b01      	ldr	r3, [sp, #4]
 800dca0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dca4:	e00f      	b.n	800dcc6 <__kernel_rem_pio2+0x596>
 800dca6:	ab9a      	add	r3, sp, #616	; 0x268
 800dca8:	441c      	add	r4, r3
 800dcaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dcae:	2000      	movs	r0, #0
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	2d00      	cmp	r5, #0
 800dcb4:	da10      	bge.n	800dcd8 <__kernel_rem_pio2+0x5a8>
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	b113      	cbz	r3, 800dcc0 <__kernel_rem_pio2+0x590>
 800dcba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	9b01      	ldr	r3, [sp, #4]
 800dcc2:	e9c3 0100 	strd	r0, r1, [r3]
 800dcc6:	9b06      	ldr	r3, [sp, #24]
 800dcc8:	f003 0007 	and.w	r0, r3, #7
 800dccc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dcd0:	ecbd 8b02 	vpop	{d8}
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dcdc:	f7f2 fad6 	bl	800028c <__adddf3>
 800dce0:	3d01      	subs	r5, #1
 800dce2:	e7e6      	b.n	800dcb2 <__kernel_rem_pio2+0x582>
 800dce4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dce8:	f7f2 fad0 	bl	800028c <__adddf3>
 800dcec:	3e01      	subs	r6, #1
 800dcee:	e7bc      	b.n	800dc6a <__kernel_rem_pio2+0x53a>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	e7c1      	b.n	800dc7a <__kernel_rem_pio2+0x54a>
 800dcf6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dcfa:	f7f2 fac7 	bl	800028c <__adddf3>
 800dcfe:	3401      	adds	r4, #1
 800dd00:	e7c6      	b.n	800dc90 <__kernel_rem_pio2+0x560>
 800dd02:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800dd06:	ed3a 7b02 	vldmdb	sl!, {d7}
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	ec53 2b17 	vmov	r2, r3, d7
 800dd10:	4649      	mov	r1, r9
 800dd12:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd16:	f7f2 fab9 	bl	800028c <__adddf3>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460f      	mov	r7, r1
 800dd22:	4640      	mov	r0, r8
 800dd24:	4649      	mov	r1, r9
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd2e:	f7f2 faad 	bl	800028c <__adddf3>
 800dd32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dd36:	e9ca 0100 	strd	r0, r1, [sl]
 800dd3a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800dd3e:	e770      	b.n	800dc22 <__kernel_rem_pio2+0x4f2>
 800dd40:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800dd44:	ed3a 7b02 	vldmdb	sl!, {d7}
 800dd48:	4630      	mov	r0, r6
 800dd4a:	ec53 2b17 	vmov	r2, r3, d7
 800dd4e:	4639      	mov	r1, r7
 800dd50:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd54:	f7f2 fa9a 	bl	800028c <__adddf3>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4680      	mov	r8, r0
 800dd5e:	4689      	mov	r9, r1
 800dd60:	4630      	mov	r0, r6
 800dd62:	4639      	mov	r1, r7
 800dd64:	f7f2 fa90 	bl	8000288 <__aeabi_dsub>
 800dd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd6c:	f7f2 fa8e 	bl	800028c <__adddf3>
 800dd70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dd74:	e9ca 0100 	strd	r0, r1, [sl]
 800dd78:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800dd7c:	e756      	b.n	800dc2c <__kernel_rem_pio2+0x4fc>
 800dd7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd82:	f7f2 fa83 	bl	800028c <__adddf3>
 800dd86:	3d01      	subs	r5, #1
 800dd88:	e756      	b.n	800dc38 <__kernel_rem_pio2+0x508>
 800dd8a:	9b01      	ldr	r3, [sp, #4]
 800dd8c:	9a01      	ldr	r2, [sp, #4]
 800dd8e:	601f      	str	r7, [r3, #0]
 800dd90:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800dd94:	605c      	str	r4, [r3, #4]
 800dd96:	609d      	str	r5, [r3, #8]
 800dd98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dd9c:	60d3      	str	r3, [r2, #12]
 800dd9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dda2:	6110      	str	r0, [r2, #16]
 800dda4:	6153      	str	r3, [r2, #20]
 800dda6:	e78e      	b.n	800dcc6 <__kernel_rem_pio2+0x596>
 800dda8:	41700000 	.word	0x41700000
 800ddac:	3e700000 	.word	0x3e700000

0800ddb0 <__kernel_sin>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	ec55 4b10 	vmov	r4, r5, d0
 800ddb8:	b085      	sub	sp, #20
 800ddba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ddbe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ddc2:	ed8d 1b00 	vstr	d1, [sp]
 800ddc6:	9002      	str	r0, [sp, #8]
 800ddc8:	da06      	bge.n	800ddd8 <__kernel_sin+0x28>
 800ddca:	ee10 0a10 	vmov	r0, s0
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 fec2 	bl	8000b58 <__aeabi_d2iz>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d051      	beq.n	800de7c <__kernel_sin+0xcc>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	462b      	mov	r3, r5
 800dddc:	4620      	mov	r0, r4
 800ddde:	4629      	mov	r1, r5
 800dde0:	f7f2 fc0a 	bl	80005f8 <__aeabi_dmul>
 800dde4:	4682      	mov	sl, r0
 800dde6:	468b      	mov	fp, r1
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4620      	mov	r0, r4
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7f2 fc02 	bl	80005f8 <__aeabi_dmul>
 800ddf4:	a341      	add	r3, pc, #260	; (adr r3, 800defc <__kernel_sin+0x14c>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	4680      	mov	r8, r0
 800ddfc:	4689      	mov	r9, r1
 800ddfe:	4650      	mov	r0, sl
 800de00:	4659      	mov	r1, fp
 800de02:	f7f2 fbf9 	bl	80005f8 <__aeabi_dmul>
 800de06:	a33f      	add	r3, pc, #252	; (adr r3, 800df04 <__kernel_sin+0x154>)
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	f7f2 fa3c 	bl	8000288 <__aeabi_dsub>
 800de10:	4652      	mov	r2, sl
 800de12:	465b      	mov	r3, fp
 800de14:	f7f2 fbf0 	bl	80005f8 <__aeabi_dmul>
 800de18:	a33c      	add	r3, pc, #240	; (adr r3, 800df0c <__kernel_sin+0x15c>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f7f2 fa35 	bl	800028c <__adddf3>
 800de22:	4652      	mov	r2, sl
 800de24:	465b      	mov	r3, fp
 800de26:	f7f2 fbe7 	bl	80005f8 <__aeabi_dmul>
 800de2a:	a33a      	add	r3, pc, #232	; (adr r3, 800df14 <__kernel_sin+0x164>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	f7f2 fa2a 	bl	8000288 <__aeabi_dsub>
 800de34:	4652      	mov	r2, sl
 800de36:	465b      	mov	r3, fp
 800de38:	f7f2 fbde 	bl	80005f8 <__aeabi_dmul>
 800de3c:	a337      	add	r3, pc, #220	; (adr r3, 800df1c <__kernel_sin+0x16c>)
 800de3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de42:	f7f2 fa23 	bl	800028c <__adddf3>
 800de46:	9b02      	ldr	r3, [sp, #8]
 800de48:	4606      	mov	r6, r0
 800de4a:	460f      	mov	r7, r1
 800de4c:	b9db      	cbnz	r3, 800de86 <__kernel_sin+0xd6>
 800de4e:	4602      	mov	r2, r0
 800de50:	460b      	mov	r3, r1
 800de52:	4650      	mov	r0, sl
 800de54:	4659      	mov	r1, fp
 800de56:	f7f2 fbcf 	bl	80005f8 <__aeabi_dmul>
 800de5a:	a325      	add	r3, pc, #148	; (adr r3, 800def0 <__kernel_sin+0x140>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	f7f2 fa12 	bl	8000288 <__aeabi_dsub>
 800de64:	4642      	mov	r2, r8
 800de66:	464b      	mov	r3, r9
 800de68:	f7f2 fbc6 	bl	80005f8 <__aeabi_dmul>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	4620      	mov	r0, r4
 800de72:	4629      	mov	r1, r5
 800de74:	f7f2 fa0a 	bl	800028c <__adddf3>
 800de78:	4604      	mov	r4, r0
 800de7a:	460d      	mov	r5, r1
 800de7c:	ec45 4b10 	vmov	d0, r4, r5
 800de80:	b005      	add	sp, #20
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de86:	2200      	movs	r2, #0
 800de88:	4b1b      	ldr	r3, [pc, #108]	; (800def8 <__kernel_sin+0x148>)
 800de8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de8e:	f7f2 fbb3 	bl	80005f8 <__aeabi_dmul>
 800de92:	4632      	mov	r2, r6
 800de94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de98:	463b      	mov	r3, r7
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	f7f2 fbab 	bl	80005f8 <__aeabi_dmul>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deaa:	f7f2 f9ed 	bl	8000288 <__aeabi_dsub>
 800deae:	4652      	mov	r2, sl
 800deb0:	465b      	mov	r3, fp
 800deb2:	f7f2 fba1 	bl	80005f8 <__aeabi_dmul>
 800deb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800deba:	f7f2 f9e5 	bl	8000288 <__aeabi_dsub>
 800debe:	a30c      	add	r3, pc, #48	; (adr r3, 800def0 <__kernel_sin+0x140>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	4606      	mov	r6, r0
 800dec6:	460f      	mov	r7, r1
 800dec8:	4640      	mov	r0, r8
 800deca:	4649      	mov	r1, r9
 800decc:	f7f2 fb94 	bl	80005f8 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4630      	mov	r0, r6
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 f9d8 	bl	800028c <__adddf3>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4620      	mov	r0, r4
 800dee2:	4629      	mov	r1, r5
 800dee4:	f7f2 f9d0 	bl	8000288 <__aeabi_dsub>
 800dee8:	e7c6      	b.n	800de78 <__kernel_sin+0xc8>
 800deea:	bf00      	nop
 800deec:	f3af 8000 	nop.w
 800def0:	55555549 	.word	0x55555549
 800def4:	3fc55555 	.word	0x3fc55555
 800def8:	3fe00000 	.word	0x3fe00000
 800defc:	5acfd57c 	.word	0x5acfd57c
 800df00:	3de5d93a 	.word	0x3de5d93a
 800df04:	8a2b9ceb 	.word	0x8a2b9ceb
 800df08:	3e5ae5e6 	.word	0x3e5ae5e6
 800df0c:	57b1fe7d 	.word	0x57b1fe7d
 800df10:	3ec71de3 	.word	0x3ec71de3
 800df14:	19c161d5 	.word	0x19c161d5
 800df18:	3f2a01a0 	.word	0x3f2a01a0
 800df1c:	1110f8a6 	.word	0x1110f8a6
 800df20:	3f811111 	.word	0x3f811111

0800df24 <fabs>:
 800df24:	ec51 0b10 	vmov	r0, r1, d0
 800df28:	ee10 2a10 	vmov	r2, s0
 800df2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df30:	ec43 2b10 	vmov	d0, r2, r3
 800df34:	4770      	bx	lr
	...

0800df38 <floor>:
 800df38:	ec51 0b10 	vmov	r0, r1, d0
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800df44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800df48:	2e13      	cmp	r6, #19
 800df4a:	460c      	mov	r4, r1
 800df4c:	ee10 5a10 	vmov	r5, s0
 800df50:	4680      	mov	r8, r0
 800df52:	dc34      	bgt.n	800dfbe <floor+0x86>
 800df54:	2e00      	cmp	r6, #0
 800df56:	da16      	bge.n	800df86 <floor+0x4e>
 800df58:	a335      	add	r3, pc, #212	; (adr r3, 800e030 <floor+0xf8>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 f995 	bl	800028c <__adddf3>
 800df62:	2200      	movs	r2, #0
 800df64:	2300      	movs	r3, #0
 800df66:	f7f2 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 800df6a:	b148      	cbz	r0, 800df80 <floor+0x48>
 800df6c:	2c00      	cmp	r4, #0
 800df6e:	da59      	bge.n	800e024 <floor+0xec>
 800df70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800df74:	4a30      	ldr	r2, [pc, #192]	; (800e038 <floor+0x100>)
 800df76:	432b      	orrs	r3, r5
 800df78:	2500      	movs	r5, #0
 800df7a:	42ab      	cmp	r3, r5
 800df7c:	bf18      	it	ne
 800df7e:	4614      	movne	r4, r2
 800df80:	4621      	mov	r1, r4
 800df82:	4628      	mov	r0, r5
 800df84:	e025      	b.n	800dfd2 <floor+0x9a>
 800df86:	4f2d      	ldr	r7, [pc, #180]	; (800e03c <floor+0x104>)
 800df88:	4137      	asrs	r7, r6
 800df8a:	ea01 0307 	and.w	r3, r1, r7
 800df8e:	4303      	orrs	r3, r0
 800df90:	d01f      	beq.n	800dfd2 <floor+0x9a>
 800df92:	a327      	add	r3, pc, #156	; (adr r3, 800e030 <floor+0xf8>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f978 	bl	800028c <__adddf3>
 800df9c:	2200      	movs	r2, #0
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f7f2 fdba 	bl	8000b18 <__aeabi_dcmpgt>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0eb      	beq.n	800df80 <floor+0x48>
 800dfa8:	2c00      	cmp	r4, #0
 800dfaa:	bfbe      	ittt	lt
 800dfac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dfb0:	fa43 f606 	asrlt.w	r6, r3, r6
 800dfb4:	19a4      	addlt	r4, r4, r6
 800dfb6:	ea24 0407 	bic.w	r4, r4, r7
 800dfba:	2500      	movs	r5, #0
 800dfbc:	e7e0      	b.n	800df80 <floor+0x48>
 800dfbe:	2e33      	cmp	r6, #51	; 0x33
 800dfc0:	dd0b      	ble.n	800dfda <floor+0xa2>
 800dfc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dfc6:	d104      	bne.n	800dfd2 <floor+0x9a>
 800dfc8:	ee10 2a10 	vmov	r2, s0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	f7f2 f95d 	bl	800028c <__adddf3>
 800dfd2:	ec41 0b10 	vmov	d0, r0, r1
 800dfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfda:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dfde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfe2:	fa23 f707 	lsr.w	r7, r3, r7
 800dfe6:	4207      	tst	r7, r0
 800dfe8:	d0f3      	beq.n	800dfd2 <floor+0x9a>
 800dfea:	a311      	add	r3, pc, #68	; (adr r3, 800e030 <floor+0xf8>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f7f2 f94c 	bl	800028c <__adddf3>
 800dff4:	2200      	movs	r2, #0
 800dff6:	2300      	movs	r3, #0
 800dff8:	f7f2 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d0bf      	beq.n	800df80 <floor+0x48>
 800e000:	2c00      	cmp	r4, #0
 800e002:	da02      	bge.n	800e00a <floor+0xd2>
 800e004:	2e14      	cmp	r6, #20
 800e006:	d103      	bne.n	800e010 <floor+0xd8>
 800e008:	3401      	adds	r4, #1
 800e00a:	ea25 0507 	bic.w	r5, r5, r7
 800e00e:	e7b7      	b.n	800df80 <floor+0x48>
 800e010:	2301      	movs	r3, #1
 800e012:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e016:	fa03 f606 	lsl.w	r6, r3, r6
 800e01a:	4435      	add	r5, r6
 800e01c:	4545      	cmp	r5, r8
 800e01e:	bf38      	it	cc
 800e020:	18e4      	addcc	r4, r4, r3
 800e022:	e7f2      	b.n	800e00a <floor+0xd2>
 800e024:	2500      	movs	r5, #0
 800e026:	462c      	mov	r4, r5
 800e028:	e7aa      	b.n	800df80 <floor+0x48>
 800e02a:	bf00      	nop
 800e02c:	f3af 8000 	nop.w
 800e030:	8800759c 	.word	0x8800759c
 800e034:	7e37e43c 	.word	0x7e37e43c
 800e038:	bff00000 	.word	0xbff00000
 800e03c:	000fffff 	.word	0x000fffff

0800e040 <matherr>:
 800e040:	2000      	movs	r0, #0
 800e042:	4770      	bx	lr
 800e044:	0000      	movs	r0, r0
	...

0800e048 <nan>:
 800e048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e050 <nan+0x8>
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	00000000 	.word	0x00000000
 800e054:	7ff80000 	.word	0x7ff80000

0800e058 <scalbn>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	ec55 4b10 	vmov	r4, r5, d0
 800e05e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e062:	4606      	mov	r6, r0
 800e064:	462b      	mov	r3, r5
 800e066:	b9aa      	cbnz	r2, 800e094 <scalbn+0x3c>
 800e068:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e06c:	4323      	orrs	r3, r4
 800e06e:	d03b      	beq.n	800e0e8 <scalbn+0x90>
 800e070:	4b31      	ldr	r3, [pc, #196]	; (800e138 <scalbn+0xe0>)
 800e072:	4629      	mov	r1, r5
 800e074:	2200      	movs	r2, #0
 800e076:	ee10 0a10 	vmov	r0, s0
 800e07a:	f7f2 fabd 	bl	80005f8 <__aeabi_dmul>
 800e07e:	4b2f      	ldr	r3, [pc, #188]	; (800e13c <scalbn+0xe4>)
 800e080:	429e      	cmp	r6, r3
 800e082:	4604      	mov	r4, r0
 800e084:	460d      	mov	r5, r1
 800e086:	da12      	bge.n	800e0ae <scalbn+0x56>
 800e088:	a327      	add	r3, pc, #156	; (adr r3, 800e128 <scalbn+0xd0>)
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	f7f2 fab3 	bl	80005f8 <__aeabi_dmul>
 800e092:	e009      	b.n	800e0a8 <scalbn+0x50>
 800e094:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e098:	428a      	cmp	r2, r1
 800e09a:	d10c      	bne.n	800e0b6 <scalbn+0x5e>
 800e09c:	ee10 2a10 	vmov	r2, s0
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f7f2 f8f2 	bl	800028c <__adddf3>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	e01c      	b.n	800e0e8 <scalbn+0x90>
 800e0ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	3a36      	subs	r2, #54	; 0x36
 800e0b6:	4432      	add	r2, r6
 800e0b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e0bc:	428a      	cmp	r2, r1
 800e0be:	dd0b      	ble.n	800e0d8 <scalbn+0x80>
 800e0c0:	ec45 4b11 	vmov	d1, r4, r5
 800e0c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e130 <scalbn+0xd8>
 800e0c8:	f000 f83c 	bl	800e144 <copysign>
 800e0cc:	a318      	add	r3, pc, #96	; (adr r3, 800e130 <scalbn+0xd8>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	ec51 0b10 	vmov	r0, r1, d0
 800e0d6:	e7da      	b.n	800e08e <scalbn+0x36>
 800e0d8:	2a00      	cmp	r2, #0
 800e0da:	dd08      	ble.n	800e0ee <scalbn+0x96>
 800e0dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0e8:	ec45 4b10 	vmov	d0, r4, r5
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0f2:	da0d      	bge.n	800e110 <scalbn+0xb8>
 800e0f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0f8:	429e      	cmp	r6, r3
 800e0fa:	ec45 4b11 	vmov	d1, r4, r5
 800e0fe:	dce1      	bgt.n	800e0c4 <scalbn+0x6c>
 800e100:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e128 <scalbn+0xd0>
 800e104:	f000 f81e 	bl	800e144 <copysign>
 800e108:	a307      	add	r3, pc, #28	; (adr r3, 800e128 <scalbn+0xd0>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	e7e0      	b.n	800e0d2 <scalbn+0x7a>
 800e110:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e114:	3236      	adds	r2, #54	; 0x36
 800e116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e11a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	2200      	movs	r2, #0
 800e124:	4b06      	ldr	r3, [pc, #24]	; (800e140 <scalbn+0xe8>)
 800e126:	e7b2      	b.n	800e08e <scalbn+0x36>
 800e128:	c2f8f359 	.word	0xc2f8f359
 800e12c:	01a56e1f 	.word	0x01a56e1f
 800e130:	8800759c 	.word	0x8800759c
 800e134:	7e37e43c 	.word	0x7e37e43c
 800e138:	43500000 	.word	0x43500000
 800e13c:	ffff3cb0 	.word	0xffff3cb0
 800e140:	3c900000 	.word	0x3c900000

0800e144 <copysign>:
 800e144:	ec51 0b10 	vmov	r0, r1, d0
 800e148:	ee11 0a90 	vmov	r0, s3
 800e14c:	ee10 2a10 	vmov	r2, s0
 800e150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e154:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e158:	ea41 0300 	orr.w	r3, r1, r0
 800e15c:	ec43 2b10 	vmov	d0, r2, r3
 800e160:	4770      	bx	lr
	...

0800e164 <_init>:
 800e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e166:	bf00      	nop
 800e168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16a:	bc08      	pop	{r3}
 800e16c:	469e      	mov	lr, r3
 800e16e:	4770      	bx	lr

0800e170 <_fini>:
 800e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e172:	bf00      	nop
 800e174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e176:	bc08      	pop	{r3}
 800e178:	469e      	mov	lr, r3
 800e17a:	4770      	bx	lr
